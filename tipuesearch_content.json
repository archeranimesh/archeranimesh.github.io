{"pages":[{"url":"pages/about.html","text":"The About Page for Archer Imagine.","tags":"pages","loc":"pages/about.html","title":"About"},{"url":"articles/python-setup-for-pelican-blog.html","text":"Installing Pelican Pelican is a python package, so we can have multiple option to install pelican. There can be 3 option which I can think of. Direct Installation If we have only one python installation on the system, and we do not have any issue if we screw up this installation just use pip to install pelican. Installation using VirtualEnv. This approach is already mentioned in official documentation of pelican Installation using Conda. By now you could have understood that we will use Conda to install pelican. This is because Anaconda is already a pre-packaged installation of very well know python package in both version 2 and 3. In future I will will update this page if I wrote about Anaconda installation, for now refer any documents on the google search for installation. Configure Anaconda for Pelican Blog The first thing we have to do is to create a environment using the python version 2. This can be done by this command. conda create -n pelican1 python=2 Once we have executed the above command we will have pelican1 as an environment. We can see the list of environment in the system by using. conda info --envs Which will provide an output like this. pelican1 /home/username/anaconda3/envs/pelican1 py27 /home/username/anaconda3/envs/py27 py35 /home/username/anaconda3/envs/py35 root * /home/username/anaconda3 This shows all the available environment. We can activate the pelican1 by using this command. source activate pelican1 Now we have an environment which we can used for pelican development. The reason for this environment creation is to have a separate environment for experimentation with pelican, if anything goes wrong we do not disturb already existing programs. Configure Pelican Environment for Blog Once we have the environment we have install few packages in this environment. The first is to install PiP to install other package. Install Pip by using. conda install pip With the completion of installing pip , the first and foremost package to install is pelican, with this command. pip install pelican Since we will be using Markdown to write our blogs we need the markdown package, which we can install using. pip install Markdown There are some plugin and themes in pelican which might need some additional packages, we will install these 2. pip install Fabric pip install beautifulsoup4 Freeze the Requirement When we have all our installation complete, we should save our package history into a requirement.txt . We can use this requirement.txt to install all the above mentioned packages with same version in one go. We can freeze the details by using. pip freeze > requirements.txt Dependencies If we check the requirement.txt generated in the above step, we will see a lot of packages already installed apart from pelican , markdown , Fabric and beautifulsoup4 . These extra packages are dependencies for running pelican. feedgenerator: to generate the Atom feeds jinja2: for templating support pygments: for syntax highlighting docutils: for supporting reStructuredText as an input format pytz: for timezone definitions blinker: an object-to-object and broadcast signaling system unidecode: for ASCII transliterations of Unicode text six: for Python 2 and 3 compatibility utilities MarkupSafe: for a markup safe string implementation python-dateutil: to read the date metadata We have completed 2 important steps of our own blog publishing. Reference Installing Pelican Managing Python","tags":"Pelican","loc":"articles/python-setup-for-pelican-blog.html","title":"How to setup Anaconda Python environment for Pelican Blog."},{"url":"articles/cost-effective-blogging-with-Pelican-and-Github.html","text":"This is a series of blog post to help set up a static blog at minimal cost and integrating with all the popular tools such as Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog. I am a novice blogger and this blog would act as a journal, which will document my approach towards bloging, software development. The idea is to generate some revenue out of this blog in the long run. We all might have read about so many blogs which are able to generate good amount of traffic but in none one of those we have never read how do they achieve it. I may fail in my attempt, which might work as a guidance for someone to not follow this path and try another path for the same goal. The background theme to support this is to minimize my cost to the bare minimum so that the failure does not hurt me financially. Why Static Blog? There are already a lot of literature present behind this, just wanted to summarize those:- Cost:- This was the deciding factor for me, because of using a static website, this complete website can be hosted and deployed by just registering a domain name with a provider. I do not have to go for any hosting services etc. Easy of Writing Content:- I wanted to write my content using just Markdown , as i have grown comfortable writing in markdown. With using a static blog this was possible. Hosting:- We can serve these static html pages practically from any place, be it Github , Amazon S3 , Dropbox or any other place which can serve static html pages. I have chosen Github just to save the cost. Easy workFlow:- The work flow is very simple when deploying with static blogs, just right you content in markdown, generate html, push your changes to github and that's it. Your content is not available online. If you want to even go crazy you cam automate the whole thing other than writing content. The above three are the main reason for choosing static blogs, but there could be many more valid reason for choosing static blogs. Most of the reason for me was personal in nature so you can also choose accordingly. Why Pelican? Once the approach to make this blog as static was finalized, the next big question came was which technology to choose, Pelican or Jerkll . There as already many comparison already available among these, but the only reason for me to choose pelican was because it uses python and jinja. In some near future I want to fully customize my blog with the knowledge of these two. Why Github? The final decision to be taken before starting this blog was to finalize the hosting provider. We have already mentioned some of the popular choice are Github Amazon S3 Dropbox I chose Github, for its near zero cost, it may cost you if you want to keep your repository private else it is completely free were as Amazon S3 would have required to shell out some money though less, with some extra benefits, but for the time being when I am just measuring the water it made sense to keep my cost down. Once all the above 3 moral questions were answered, setting up the blogs was easy and which will be documented in future. Collated Blog post. How to setup Anaconda Python environment for Pelican Blog. Reference Making a Static Blog with Pelican This above blog explains why a static blog generator is good. Moving Blogs to Pelican This blog has a terrific explanation for pelican vs jekyll. Amazon S3 Vs Github Pages This explains the benefits of Amazon S3 over Github Pages, kindly check if you are affected because of this.","tags":"Pelican","loc":"articles/cost-effective-blogging-with-Pelican-and-Github.html","title":"Cost effective blogging with Pelican and Github"},{"url":"articles/configure-github-custom-domain.html","text":"I have mentioned some of the links in references, have visited all of the below and few more, but the configuration is much simpler. The process can be broken into 2 broad steps. Configure your Github repo Configure the DNS at GoDaddy Configure your Github repo The prequsite is that we have a github pages of like this archeranimesh.github.io , if not kindly visit this link for generating one. The first thing we would like to do is to configure a CNAME in the above repo. There are two ways to do this. Local Repo Directly on Github. Local Repo Create a local file in the repo with the name CNAME. Just have one line in the file. example.com , where example.com is your domain you have bought from GoDaddy . Push the changes to Github Directly on GitHub On the repository in Github , you will see something like this. In the above Click on the Settings , Scroll down you will see something like this. Enter the domain you have purchased from GoDaddy . These are the only changes required to be done in GitHub. Configure the DNS at GoDaddy The most easiest of the all the below references is Configuring a Godaddy domain name with github pages . The real issue is all of the links shows the old UI of GoDaddy , so some things get confusing. Go to the account setting page, which mostly will like in this link . The link will look like this. Click on the + Symbols in Front of Domain, and Click on the Manage DNS Link The link will show a lot of Records , go to the end of the Records , and click on the link ADD From the above option we have to add 3 entries. These is how all the 3 would look like after adding. Now you can launch and check your desired domain. Kindly wait 48 hrs for these changes to reflect, do not try to configure multiple times, if it does not work even after 48 hours kindly search for help, till then take a coffee break and have a nice time out of this screen. The domain XYX is no longer parked by godaddy When we are doing the above process, even after 24 hours, when you launch your website, we find one of these error. The domain XYX is no longer parked by godaddy It is detected as a Malware in the office network. The website might launch for some times and sometimes you might get any one of the above 2 errors. kindly check this in the Manage DNS page. We had added two A Names pointing to the GitHub URL as shown below. Check if you have any other A Names in addition to the above two, if you have, kindly delete that. The detailed issue can be read GoDaddy domain (randomly) not resolving to GitHub Pages References Setting Up a GoDaddy Domain Name With GitHub Configuring a Godaddy domain name with github pages Using a custom domain with GitHub Pages Using GitHub Pages To Host Your Website GoDaddy domain (randomly) not resolving to GitHub Pages [Help]: How to correctly connect my github pages blog to a custom domain? Redirecting GitHub Page to a custom domain Kindly read the above site, to understand what is the use of CNAME and A Record. Great introduction.","tags":"Pelican","loc":"articles/configure-github-custom-domain.html","title":"Configuring Github pages with Custom Domain"}]}