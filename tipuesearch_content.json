{"pages":[{"url":"articles/100daysofdiscretemath/100Days-of-DiscreteMath-log-file.html","text":"Discrete Maths is a study of things which are discrete, which means things which can be counted. Discrete Maths forms the basis of a lot of concepts in algorithms and Computer science in general. I am starting this #100DaysOfX which Discrete Maths, to have a sufficient understanding of the concepts. I am using resources from NPTEL, MIT OCW, and ArsDigita University. The plan is to follow the 3 lectures mentioned in the references and the Rosen book on Discrete math. Day 01 | Monday 18 February 2019 Days Progress Complete the First lecture of this YouTube play list . Thoughts This lecture covers these topics:- Logic Propositions Logical Connectives ( \\(\\&\\) , \\(|\\) , \\(\\sim\\) ) and its truth tables Implication. ( \\(\\Rightarrow\\) ) Equivalence. ( \\(\\Leftrightarrow\\) ) Tautology, Contradiction & Contingency. Logical Identities Understanding Equivalence and Implication was little tough. These 2 video's provided the additional help. Rachel's Discrete Math Course - Implications (Lecture 5) Propositional logic | first order predicate logic| Propositional calculus | gate | net - part 5 Reference NPTEL | Computer Sc - Discrete Mathematical Structures | Prof. Kamala Krithivasan ArsDigita | Discrete Mathematics and Its Applications | Rosen | Shai Simonson MIT 6.042J | Mathematics for Computer Science, Fall 2010 | Tom Leighton, Marten van Dijk Amazon | Discrete Mathematics and Its Applications (SIE) | Kenneth Rosen Latex | Math Symbols Pelican and Math Equations if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"#100DaysOfDiscreteMath","title":"100 Days of Discrete Maths."},{"url":"articles/100daysofvim/100Days-of-vim-log-file-V-2-0.html","text":"I am starting this new journey into the world of VIM, with a hope that this time the mistakes of my past attempts will be rectified. This journey's goal is pre-decided so that there is no deviation from the plan of learning VIM. In the last attempt of learning VIM, I was doing the classic mistakes of learning vim as described by Mr. Bram Moolenaar in this video, that is, Learn every feature the editor offers and use the most efficient command all the time. The approach this time will be learning a little bit of commands in VIM and apply it daily for a few days, as it becomes part of the muscle memory move to the next set. In addition, I have also set my goals for this 100 Days to have a razor sharp focus and not deviating. The goal of this 100DaysofVim are:- Edit text effectively. Scroll and move in a file quickly. Navigate source code with ctags and key board shortcuts. Edit multiple files using buffers. No use of any vim plugins. Read and understand the vim help system. Integrate debugging with source code navigation in VIM. Day 1 - Monday 18 February 2019 Today's Progress Complete the vimtutor exercise. Studied the quick reference in vim help. Thoughts Few commands which was very good. Using C to change the text from the cursor till end of line. Using D to delete the text from the cursor till end of line. Few Insert Mode commands. CTRL-T : insert one shiftwidth of indent in front of line. CTRL-D : deletes one shiftwidth of indent in front of line. References How To Learn Vim: A Four Week Plan 100daysOfX YouTube | 7 Habits For Effective Text Editing 2.0 VimCast | Episodes","tags":"#100DaysOfVim","title":"100Days of Vim Log File"},{"url":"articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html","text":"Hello World!, You are about the witness the beginning of an epic second coming of the 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies. Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys. I have failed in my previous attempt for the challenge, which you can find here . There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap. Selected the resource in advance, Learn Python Track from Team TreeHouse MIT 6.00SC Introduction to Computer Science and Programming Practice the 100Daysofcode for a month before committing fully. Create a time table and sticking to it. Studying at the same time everyday, brains craves for learning python in that hour of the day. Missing few (~5) days is acceptable. Ladies and gentleman, I present to you, #100DaysofCode with @ animeshkbhadra Day 1: Friday 15 February 2019 Days Progress Thoughts Link to Tweet Reference QuoteFancy | Image Source 100DaysOfCode Official Website Learn Python Track from Team TreeHouse MIT 6.00SC Introduction to Computer Science and Programming Create a Tweet With image Preview for Free","tags":"#100DaysOfCode, python","title":"100Days of Code Log File 2nd Attempt"},{"url":"articles/pelican/Render-Maths-pelican-blog.html","text":"De Morgan's Law De Morgan's Law (negation of conjunction) $$ \\neg(P \\wedge Q) \\equiv \\neg P \\vee \\neg Q $$ De Morgan's Law (negation of alternative) $$ \\neg(P \\vee Q) \\equiv \\neg P \\wedge \\neg Q $$ First Header Second Header Content Cell Content Cell Content Cell Content Cell if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Pelican","title":"Render Maths Equation with Pelican Blog"},{"url":"articles/c-programming/StudyNotes-Programming-in-C.html","text":"Introduction C is not only a \"System programming language\" but has a wide variety of use in other domain. Fundamental Data Types Characters char Integers int , short , long Floating point double , float Derived Data Types Pointers Pointers provide for a machine-independent address arithmetic. Arrays Structure Unions. Expressions Expressions are formed from Operator and Operands . Any expression including an assignment or a function call can be a statement . Functions Functions performs a single set of operation within a block of code. Functions may return values of Fundamental data types. Derived Data types. except arrays Pointers Structure Unions Variables Variables can be internal to a function. External but known only within a single source file. Visible to the entire program. This is frowned upon and we should rarely use. Preprocessing Preprocessing step performs macro substitution on program text, inclusion of other source file or conditional compilation. UseCase not provided in C Operations directly dealing with Composite Objects, like Array, Structure, Unions No Storage other than static and auto matic. No Input/Output facilities. No built in file Access. The above facilities are included by help of standard library defined by the ANSI C Standard . ANSI C Standard New syntax for declaring and defining functions. Definition of a standard library. C is not a strongly typed language. C frowns on but permits the interchange of pointer and integers which has been eliminated by ANSI. No Automatic conversion of incompatible data types. Reference Image Source","tags":"C Programming","title":"Study Notes for Programming in C"},{"url":"articles/100daysofvim/100Days-of-vim-log-file.html","text":"What is the definition of a Real Programmer is open for interpretation. I have been using VIM for last couple of years to do the basic editing and was happy with whatever I learn about using vim in the process. Deep within I always wanted to become a better user of vim, tried different experimentation which includes installing mindless plugins, copying from different vimrc files sometimes understanding and sometime not understanding the concepts. Moral of the story is nothing sticked to my brain or what we call muscle memory to use it efficiently. Fortunately enough when I was struggling with the idea to become better at vim, this article How To Learn Vim: A Four Week Plan came along and I was immediately interested, clubbed this with the 100daysofx and I had a plan at becoming better at VIM. Through this log file, I will update what ever resource I will use and what ever practice I am doing everyday. God permits if I become good at vim in these 100 days it will be an achievement for me. Hoping for the best I hereby jump into the world of Real Programmers. Day -4: Saturday January 6,2018 Today's Progress Completed the vimtutor exercise in ~11 minutes. Learned about these keystrokes. i : insert before the cursor. x : delete the character under the cursor. h : Left Movement. (Left most Key) j : Down Movement. (Anchor like j ) k : Up Movement. l : Right Movement. (Right most key) Thoughts In my first attempt while learning vimtutor some years ago, I was not able to understand that vimtutor is a separate command in shell. From that beginning to today where I am comfortable in using vimtutor , surely have come a long way. Link to Tweet Day -5: Friday January 5,2018 Today's Progress Completed the vimtutor exercise in ~11 minutes. Learned about these keystrokes. u : undo just one change. U : Undo changes in one line. Ctrl + r : Redo the last change. :s/searchforstring/replacewithSting/g : Search and replace in one line. Thoughts vimtutor is helping me gain the confidence on using VIM. Now I do not feel threatened by VIM. Link to Tweet #100DaysOfVim Day-04 Tweet Day -6: Thursday January 4,2018 Today's Progress Completed the vimtutor exercise in ~14 minutes. Learned about these keystrokes. w : jump a word, not special char e : jump to end of word. $ : jump to end of line. 0 : jump to first column of the line. Thoughts Just vimtutor teaches so many basic key strokes to become a better beginner, everyone thinking of learning vim should try this. Link to Tweet #100DaysOfVim Day-03 Tweet Day -7: Wednesday January 3,2018 Today's Progress Completed the vimtutor exercise in ~14 minutes. Learned about these keystrokes. a : Append at the next cursor point. A : Append at the end of line. u : undo a single instruction. U : undo a complete line. Thoughts Looking at the key combination of VIM, I feel like each characters have a similar story. Link to Tweet #100DaysOfVim Day-02 Tweet Day -8: Wednesday January 2,2018 Today's Progress Completed the vimtutor exercise in ~20 minutes. The idea is to, do this for next 7 days as suggested in one blog link. Thoughts I have been using vim for a long time, but never took the pain to master it. I am starting this challenge with an idea that I will be able to move to intermediate level vim. Link To Tweet #100DaysOfVim Day-01 Tweet References How To Learn Vim: A Four Week Plan 100daysofx Real Programmers xkcd","tags":"#100DaysOfVim","title":"100Days of Vim Log File"},{"url":"articles/100daysofcode/100Days-of-code-log-file.html","text":"Hello World!, You are about the witness the beginning of an epic 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies. Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiat warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys. Ladies and gentleman, I present to you, #100DaysofCode with @ animeshkbhadra Day -8: Wednesday January 2,2018 Today's Progress Completed the vimtutor exercise in ~20 mins. The idea is to do this for next 7 days as suggested in one blog link. Thoughts Reference","tags":"#100DaysOfCode","title":"100Days of Code Log File"},{"url":"articles/pelican/tips-for-improving-workflow-in-pelican.html","text":"We all know a lot of meta-data is required for writing a pelican blog, we can use Sublime Text to improve this meta-data collection, and also see some useful commands to improve the output. FileHeader to Write Meta-Data in Sublime Text Sublime Text is a very nice Text editor for writing Markdown. There are already a lot of articles on how to configure Sublime text for Markdown. We will discuss about one specific package in Sublime Text called FileHeader , this package helps in writing custom File Header, so we can use this package to provide some Meta-Data to the pelican blog by default. FileHeader comes with predefined header template, if we want to change the content of these templates we can use a custom fileHeader template. Since we are writing our content in markdown, I have extended the default Markdown template. The modified Markdown Template have to saved in this path /home/username/.config/sublime-text-2/Packages/User/fileHeaderTemplatesUser named as Markdown.tmpl . FileHeader uses Jinja2 template, the Markdown template looks like this . Title : Date : {{ create_time }} Modified : {{ last_modified_time }} Category : Pelican Tags : pelican Slug : {{ file_name_without_extension }} Author : {{ author }} subtitle : Summary : keywords : [ TOC ] We have to give some configuration for it to work. Kindly add this in the FileHeader.sublime-settings . { \"custom_template_header_path\" : \"/home/username/.config/sublime-text-2/Packages/User/fileHeaderTemplatesUser\" , \"Default\" : { \"author\" : \"ABC\" } } After this every time you create a new Markdown file, the above template will be automatically applied. Clean the Output Directory We are working with two git repositories when writing a pelican blog. root This is the folder which has the content and all the setting file. output This is the actual HTML page generated by Pelican. Most often than not we might want to generate the complete blog with a clean build with commands like this. pelican content -ds publishconf.py # While Publishing pelican content -d # Local host. The problem with these above commands is they might delete the .git or even the CNAME directory inside output losing the link with version control. We can prevent this by adding this configuration into our pelicanconf.py OUTPUT_RETENTION = [ \".hg\" , \".git\" , \"CNAME\" ] This change will make sure that the above mentioned file are not deleted. Kindly keep in mind this works for only the above 2 version of the command, if you use make clean then this configuration is of no use. Reference clean should not remove .git metadata #574","tags":"Pelican","title":"Tips to improve work flow in pelican blog."},{"url":"articles/pelican/integrating-3rd-party-services-with-pelican.html","text":"We have already discussed two types of settings file in pelican , and we found that publishconf.py is the file which is picked along with pelicanconf.py when we are generating the blog for publishing. These 3rd party service integration happen over this publishconf.py file, because we do not want these services to be activated when running on localhost . Google Analytics. Google Analytics provide us with very valuable insights into how a user interacts with the website, like the links which users click the most etc. This is a free service which really helps when we are starting out. When we create an account with Google Analytics , we receive a tracking code which we need to provide to Pelican blog. This tracking code is generally of the form UA-********-* , which you can find in this menu flow Administration ---> Property Settings ---> Tracking Id , copy this tracking id and provide it to publishconf.py with this settings GOOGLE_ANALYTICS = \"UA-********-*\" This is it, we will get all the analytics data from our website on Google Analytics. DISQUS DISQUS is a commenting system which is used extensively in the pelican blog world as we have to engage with our visitors for providing feedback and anything which is deemed important to the visitors. Integrating Disqus with any blog requires a ShortName , which is a unique identifier for our site, which can be found in this path https://<username>.disqus.com/admin/settings/general/ . We need to add this setting into the publishconf.py . DISQUS_SITENAME = \"shortName\" The Elegant Theme provides a nice feature called Collapsible Comments in which we will not show all the comments when the page loads. This comments will only be shown when a user presses the comment link. We can use a COMMENTS_INTRO settings to draw the user for engaging with the site. MailChimp MailChimp is a way to provide newsletters to your active subscribers, in this way they can be informed for any new post also immediately. Mailchimp can also be used as an email marketing platform. This is also free for basic subscription. We will need a MAILCHIMP_FORM_ACTION , URL which we can get by creating one list in MailChimp. To create a mailing newsletter we can use these links MailChimp Create a New List Add a Signup Form to Your Website Reference What's a shortname? Host Your Own Signup Forms","tags":"Pelican","title":"Integrating 3rd party services with Pelican Blog."},{"url":"articles/pelican/home-page-features-elegant-theme.html","text":"Elegant has a nice feature called the Home Page, which provides a About Me combined with information from GitHub on the project someone is working. These feature are again controlled by a configuration. In place of adding this configuration into pelicanconf.py we will create a new file called elegantconfig.py , and import this file into pelicanconf.py by calling from elegantConfig import * . This will make sure all the configuration from elegantconfig.py is available while generating the blog. There are two configuration for the Home Page. LANDING_PAGE_ABOUT LANDING_PAGE_ABOUT This is a Dictionary with two field \"title\" and \"details\" \"title\" : This gives a heading Home Page. \"details\" : It is the content in HTML which mostly contains the About Me description which one wants to provide. One clever way of writing this HTML is, write a about page in markdown, generate the pelican blog with this about page and then right click on the page and select view source, copy the relevant text with the HTML code in it. PROJECTS PROJECTS This is also a list of Dictionary with these field in each dictionary, and the value of each of these field is a string and not HTML in case of LANDING_PAGE_ABOUT 's \"details\" \"name\" : The project name which you want to be displayed. \"url\" : The link to the project. \"description\" : The description you want to provide for the project.","tags":"Pelican","title":"Home Page feature for Elegant Theme"},{"url":"articles/pelican/integration-problem-with-elegant-theme.html","text":"Elegant was my theme choice, and while integrating this theme with my blog I found that a lot of things does not work out of the box, and some changes are required in the themes itself. I am listing these changes here, if this are still unresolved in the future. Elegant , requires a lot of different plugins to make it work the way it was designed. If you see the documentation on the above link, it does not mention the important plugins which are required to make it work, it just provides an explanation on the feature. In this blog post I am listing down the issues which I faced while integrating the Elegant themes. favicon.ico not displayed with Elegant If you read the documentation on how to enable favicon.ico for Elegant themes, the process is pretty straight forward, just place the icons into this directory content/theme/images , and define STATIC_PATHS with STATIC_PATHS = ['theme/images', 'images'] . If you follow the above process then most probably you will still not be getting the favicon.ico , the reason being there is one more configuration which needs to enabled in pelicanconf.py in addition to above two. STATIC_PATHS = [ 'theme/images' , 'images' ] USE_SHORTCUT_ICONS = True The reason for this is, the links for including favicon are generated in this template themes/elegant/templates/_includes/favicon_links.html , and the link generation is under a configuration named USE_SHORTCUT_ICONS , so until we make it True the links will not be generated. Issues while integrating Tipue Search Prerequisite Tipue Search plugin integration is little different from other plugin. This plugin has an external dependency on BeautifulSoup , we have to install this python package first in our environment pelican1 pip install beautifulsoup4 We have to add this plugin name into pelicanconf.py PLUGINS = [ 'sitemap' , 'tipue_search' ] When we build our blog after this we should see our search functionality working, but we see 2 issues. Search Result are not displayed. Tipue search return undefined URL. Search Result are not displayed Elegant uses some predefined HTML pages to render few of its content, search functionality is based on one such file, so we have to provide that in the pelicanconf.py DIRECT_TEMPLATES = (( 'index' , 'tags' , 'categories' , 'archives' , 'search' , '404' )) When we do this changes we will see the search result getting listed, but on clicking those link it will redirect to an undefined URL. Tipue search return undefined URL. When we click on the Search result, we get the URL as undefined, this issues is still not solved, there is already a pull request pending on the Github. Kindly visit these two links for more details. Tipue search return undefined url . To solve the issue, we have to modify the plugin manually as mentioned in the pull request - Change the file in plugins/tipue_search/tipue_search.py , line no 61 add this code 'loc': page_url TOC Integration with Elegant Elegant theme has a side bar with the Table of Content of the blog post displayed. This is also achieved based on a plugin named extract_toc . We have to add this into the pelicanconf.py PLUGINS = [ 'sitemap' , 'tipue_search' , 'extract_toc' ] There is also a Markdown settings which we have to update in the same file like this. MARKDOWN = { 'extension_configs' : { 'markdown.extensions.toc' :{ 'permalink' : 'true' } } } In addition to the above changes, every blog post after the file meta-data section should have an entry named [TOC] Syntax Highlighting When writing a technical blog we might be interested in syntax highlighting of the code we write, we can achieve this with following configuration in pelicanconf.py MARKDOWN = { 'extension_configs' : { 'markdown.extensions.codehilite' : { 'css_class' : 'highlight' }, 'markdown.extensions.extra' : {}, 'markdown.extensions.meta' : {}, 'markdown.extensions.toc' :{ 'permalink' : 'true' }, }, 'output_format' : 'html5' , } Next and Previous Articles. When we read the documentation of Elegant Next and Previous Articles , it clearly states that we do not require any additional plugins for this feature, but it does not work out of the box. We have to integrate the neighbors plugins and then it works. Now we will have these in our pelicanconf.py PLUGINS = [ 'sitemap' , 'tipue_search' , 'extract_toc' , 'neighbors' ] Missing icons for social links Pelican supports a way to integrate most of the social Website like Twitter , Facebook , Github etc. This is done by the help of this settings in pelicanconf.py SOCIAL = (( 'github' , 'URL to your profile' ), ( 'linkedin-square' , 'URL to your profile' ), ( 'facebook' , 'URL to your profile' ), ( 'quora' , 'URL to your profile' ), ( 'reddit' , 'URL to your profile' ), ( 'twitter' , 'URL to your profile' ) ) This explains that we have a tuple of tuple in the settings name SOCIAL , if you see each website name is in a particular format, as explained in this link , this format is taken from Font Awesome icon for social links . When naming the website name in SOCIAL configuration, keep in mind the way the website in named in Font Awesome and remove the fa- part of the name. References Elegant Kindly read this documentation for other configuration which gives more flexibility in terms of the themes like Article Subtitle, Add License to your Site etc. pelicanconf of oncrashreboot blog Visit this configuration file for any doubts on the setting of elegant theme. Favicon documentation Tipue Search plugin Tipue search return undefined url . Tipue search return undefined url pull request Missing icons for social links Font Awesome icon for social links","tags":"Pelican","title":"Problem Faced when integrating with Elegant Themes."},{"url":"articles/pelican/expressing-with-pelican-themes.html","text":"We have already discussed about Pelican Themes and Plugins in this blog . We have also seen the comparison between the various popular themes. Elegant is our choice of Themes because of search functionality which it provides along with the minimalist concepts. We will first focus on how we can integrate one particular themes and also one particular plugins which will give us a fair amount of idea on how to integrate different plugins. Integrating the Elegant Theme We have already created folder named plugins and themes , which are clone of the Pelican Plugins and Themes repository. If we see the directory listing inside themes folder we fill find different folders with distinguished names, these are the themes name. To use any of the themes in this folder we have to add this pelican settings in the pelicanconf.py . THEME = 'themes/elegant' Follow the commands to generate the site and launch the site, and you have your new themes applied. pelican content cd output/ python -m pelican.server Integrating A Plugin into Pelican The process to integrate any plugin is also similar to integrating Themes. If we see inside the plugins directory which we had cloned, we will find a lot of different folder name just like in themes directory. Each of these name is a plugin name. To integrate a plugin into Pelican we have to add these 2 configuration into the pelicanconf.py file. PLUGIN_PATHS = [ 'plugin' ] # Name of the directory where plugin are kept. PLUGINS = [ 'sitemap' ] # Name of the particular plugin inside the directory. In the above code sample, we can see we have integrated the sitemap plugin, and as per the documentation , this generates a Sitemap which we generally submit it to some Webmaster tools. Likewise, if we want to integrate any other plugins , we have just add it to the list variable PLUGINS along with the settings required for that plugins defined in its documentation. References Elegant Pelican Plugins Pelican Themes Sitemap Documentation ,","tags":"Pelican","title":"Expressing the content with Pelican Themes."},{"url":"articles/pelican/customizing-pelican-blog-with-plugin-and-themes.html","text":"Pelican Blogs gives its user the full power to customize to the want of the user. We have been using the default themes and default setting provided by Pelican with not much customization and the results are also quite good. Enhancing the present blog further will require us to use certain Plugins and Themes which will extended the functionality. These are the 2 repository which we should clone into for getting these enhancements. pelican-plugins This is the repository for the plugins. git clone --recursive https://github.com/getpelican/pelican-plugins.git plugins pelican-themes This is the themes repository. git clone --recursive https://github.com/getpelican/pelican-themes.git themes Plugins Vs Themes The first things which we have to decide is to choose the list of plugins or the Themes we want to use. I would say first decide on Themes and the see what all plugins are required to support these themes. All plugins are not plug able with all the themes. We have to first start by choosing the themes, and the corresponding plugin required for it. This path is again the easiest as we are already treading the known, when we are comfortable with this integration we can always go ahead and enhance the existing themes and plugins to suit our needs. Till we reach the Jedi stage this precooked solution is the best approach. Flex Vs Elegant vs BootStrap3 When we are deciding on which themes to choose for the blog, broadly the working choice would be Flex: Responsive Pelican theme Elegant Why it is the best Pelican theme BootStrap3 There are many others, which you are free to explore, but for my blog I had considered these 3 options. Each one has its own pros and cons, the choice was very difficult between these 3, and in future I might even consider jumping ships to the other themes. Let's discuss some outline of the above 3 themes Flex: Responsive Pelican theme This has out of the box integration with a lot of plugins including AddThis , which is not available for any other themes. This also has support for Google AdSense, which again is missing in most of the plugin. Actively maintained, the last check-in on its Github repository was on Apr 24, 2017. Tipue_Search is also on the way, there is an open issue on the repository, Search #49 This facility of search is the only reason I dropped Flex . BootStrap3 This is a full hack able implementation of BootStrap3, and will try to use these Themes, once I get my hand dirty enough with the modern CSS and Web Technologies. Elegant Why it is the best Pelican theme I chose this theme just for its minimalist design and search feature. It has an integration with MailChimp. This is not an actively managed project, the last commit on this repository was on Sep 8, 2014, which is good 3 years ago. We can use and modify this theme for our satisfaction if a bug is hampering our development. We have decided on our Themes, the Plugins required for these themes are as below. sitemap tipue_search extract_toc neighbors The standard features and enhancements already available Disqus Google Analytics MailChimp Integration. Custom 404 Page. Collapsible Comments Page and Article Subtitle. We will not try to see the integration of all the above feature with the Elegant themes. Reference Elegant Why it is the best Pelican theme BootStrap3 Flex: Responsive Pelican theme pelican-themes pelican-plugins","tags":"Pelican","title":"Customizing Pelican blog with the help of Plugin and themes"},{"url":"articles/pelican/linking-domain-with-github-pages.html","text":"In the first series of blog post we have seen how to create a pelican blog, customize a little and also host it from Github pages. We can also use Github pages as a hosting service and link any of the domain name providers with this hosting. In this post I have taken the example of GoDaddy, but the process should not much different for any other domain name provider. The process to link a Godaddy Domain to Github Pages can be divided into 2 Steps. Configure your Github repository Configure the DNS at GoDaddy Configure Github Repository We have already made a Github Pages website in our previous post, kindly follow the steps mentioned here . Once we have a Github Pages URL, we have to configure a CNAME in this repository, this can be done in 2 ways. Local Repository Directly on Github. Local Repository Create a local file in the repository with the name CNAME. Just have one line in the file. example.com , where example.com is your domain you have bought from GoDaddy . Push the changes to Github Directly on Github Pages. On the repository in Github , you will see something like this. In the above Click on the Settings , Scroll down you will see something like this. Enter the domain you have purchased from GoDaddy . These are the only changes required to be done in GitHub. Configure the DNS at GoDaddy The easiest of the all the below references is Configuring a Godaddy domain name with github pages . The real issue in all the links is that it shows the old UI of GoDaddy , so some things get confusing. Go to the account setting page, which mostly will like in this link . The link will look like this. Click on the + Symbols in Front of Domain, and Click on the Manage DNS Link The link will show a lot of Records , go to the end of the Records , and click on the link ADD From the above option we have to add 3 entries. This is how all the 3 would look like after adding. Now you can launch and check your desired domain. Kindly wait 48 hrs for these changes to reflect, do not try to configure multiple times, if it does not work even after 48 hours kindly search for help, till then take a coffee break and have a nice time out of this screen. The domain XYX is no longer parked by Godaddy When we are doing the above process, even after 24 hours, when you launch your website, we find one of these errors. The domain XYX is no longer parked by Godaddy It is detected as a Malware in the office network. The website might launch for some times and sometimes you might get any one of the above 2 errors. Kindly check this in the Manage DNS page. We had added two A Names pointing to the GitHub URL as shown below. Check if you have any other A Names in addition to the above two, if you have, kindly delete that. The detailed issue can be read GoDaddy domain (randomly) not resolving to GitHub Pages References Setting Up a GoDaddy Domain Name With GitHub Configuring a Godaddy domain name with github pages Using a custom domain with GitHub Pages Using GitHub Pages To Host Your Website GoDaddy domain (randomly) not resolving to GitHub Pages [Help]: How to correctly connect my github pages blog to a custom domain? Redirecting GitHub Page to a custom domain Kindly read the above site, to understand what is the use of CNAME and A Record. Great introduction.","tags":"Pelican","title":"Configuring Github pages with Custom Domain"},{"url":"articles/pelican/publishing-blog-github-pages.html","text":"We have set the basic blog, though it may not look great because of the theme which we are using, but we will change those. Presently we will focus on taking this blog for the world to see. Github Pages is the way to publish your blog on to the WWW. We will have 2 repositories for doing this. One repository is for the source, which is our blog content. Second repository is for the generated files in the output folder. Prerequisite We all should have a GitHub account, if you have then continue, else go to GitHub and create an account. The process is very straight forward, just follow the instruction on the website. The git should be locally configured. Kindly follow the steps mention in this page Setting your email in Git . The first Repository We should now create our first Repository onto github. Click on the + icon which shows this drop down. And click on the option New Repository as shown above. This will open up a page with looks like this Fill in the repository name which you want to name, and write a little Description also do not click on the check-box which read Initialize this repository with a README Since we already have a folder in our local system, to check-in we can leave this box unchecked. In future if need we can create a README file manually. Once you click on the Create Repository link, you will be taken to this page, with these as a content. This is the symbol of empty repository which is created and now we can push our local code to this folder. Push code from local to Github repository We can follow the instruction mentioned above to push our local code to github, but we have to make sure that we do not push the output directory in the same repository as the code, because the handling of output directory is different. Go to the root of the folder, where your blog is kept. cd ~/mySampleBlog/ Go to the root of the directory where the blog post are kept git init This command initializes an empty repository in the same folder. Create a file named .gitignore in the same folder. Copy the below content to the .gitignore file. *~ ._* *.lock *.DS_Store *.swp *.out *.py [ cod ] output The above code basically prevents all the local temporary files and the output directory to be checked in. git status This command will make sure that the output folder is not tracked by git, check the output as shown below. On branch master Initial commit Untracked files: ( use \"git add <file>...\" to include in what will be committed ) .gitignore Makefile content/ fabfile.py pelicanconf.py publishconf.py nothing added to commit but untracked files present ( use \"git add\" to track ) Only files listed above will be tracked, and output directory is not one of them. git add . Adds all the above files to be ready for commit. git commit -m \"first commit\" This will make a commit locally with the commit message as first commit git remote add origin https://github.com/pelicanBlog/mySampleBlog.git This commands connects the remote repository of github with our local code. The URL might be different for you. git push -u origin master This will push the local changes to the GitHub repository we created. It will ask for your username and password, kindly provide those and we have pushed our code to github. Pushing the output folder The output folder is out actual blog, so this is a little different from the previous way of pushing code to github. Please follow along to create this special repository. Select the same New Repository from the + icon shown in previous repository. In the New Repository form, the magic happens with the Repository Name field, fill in the name as username.github.io , where username is your github username. Fill In the description. Now there are two ways to push the output folder to this new repository, you can follow any one of them. Push the output folder as a repository which we already know. git init git add . git commit -m \"first commit\" git remote add origin https://github.com/pelicanBlog/pelicanBlog.github.io.git git push -u origin master After the above command, just launch this URL in your browser, https://username.github.io/ , just change username with your username. Since the original source folder we create with output directory mentioned in .gitignore , we can now add this repository as a submodule in that repository, to provide a link between both the source and the output Go to the root of the blog content, in this case cd ~/mySampleBlog git submodule add -f https://github.com/pelicanBlog/pelicanBlog.github.io.git output This adds the output folder as a submodule. git commit -m \"added submodule\" git push -u origin master The above will make the output as a submodule With this we have completed our part of the blog series. With this series of blog post we are able to achieve this. Understand what is pelican blog and how to use it with github pages. How to set up the Anaconda environment for pelican development. Understood what pelican-quickstart command does. Understood the basic commands to generate the pelican blog Understood the basic folder structure of the pelican blog Understood the pelican settings files and its uses. Created a github pages and pushed both our content and the blog post to it. The next series will focus into How to configure a domain with github pages. Use of a themes and plugin to enhance the website Integration with google analytics, mail chimp etc. Modifying the blogs to get the most out of the themes. Reference Github Help Setting your email in Git git-submodule How to publish a pelican site on Github Github Pages","tags":"Pelican","title":"Publishing your blog to github pages."},{"url":"articles/pelican/pelican-settings-files.html","text":"The basic work flow in pelican blogging is to first generate content, verify it locally using a localhost:8000 , and when everything is fine will publish it. Pelican comes with two settings files to separate these 2 process. These two files are. pelicanconf.py publishconf.py Let's check what is the use of these 2 files, and how to manipulate these files to get the most out of pelican. These setting files are mostly passed to the templates associated with the themes to generate the site, all these settings are some parameters to these templates. pelicanconf.py We had used the pelican-quickstart to generate this blog, when we use this command, we get a pre-configured pelicanconf.py and a publishconf.py files. This have the bare basic configuration to be used based on the questions we answered on the options. These files basically contains the setting's identifier for the pelican blog, all the setting identifiers are in all-caps, and the values numbers (5, 20, etc.), Boolean (True, False, None, etc.), dictionaries, or tuples should not be enclosed in quotation marks. pelicanconf.py is used to generate the site locally and tested over localhost:8000 . The basic pelicanconf.py would look like this. #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = u 'Animesh' SITENAME = u 'Hello World' SITEURL = '' PATH = 'content' TIMEZONE = 'Asia/Kolkata' DEFAULT_LANG = u 'en' # Feed generation is usually not desired when developing FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None AUTHOR_FEED_ATOM = None AUTHOR_FEED_RSS = None ARTICLE_PATHS = [ 'articles' ,] ARTICLE_URL = 'articles/{slug}.html' ARTICLE_SAVE_AS = 'articles/{slug}.html' # Blogroll LINKS = (( 'Pelican' , 'http://getpelican.com/' ), ( 'Python.org' , 'http://python.org/' ), ( 'Jinja2' , 'http://jinja.pocoo.org/' ), ( 'You can modify those links in your config file' , '#' ),) # Social widget SOCIAL = (( 'You can add links in your config file' , '#' ), ( 'Another social link' , '#' ),) DEFAULT_PAGINATION = 10 # Uncomment following line if you want document-relative URLs when developing #RELATIVE_URLS = True If you remember correctly some of the settings value we had provided during the pelican-quickstart commands, like AUTHOR This is the name of the site author which we had entered during the questions asked. SITENAME This is the Name of the site which we provided. SITEURL Since we still do not have domain name registered, we had kept this empty, and also it makes sense to keep this empty for localhost testing. PATH content where we write our blog is the default path set. TIMEZONE This we had entered during the initial process, and in future if we want to change this we can change these settings. DEFAULT_LANG This was also entered during the pelican-quickstart process. FEEDS_* All the FEEDS_* related settings are empty because we have still not configured the RSS feeds settings, this we will change in the future. ARTICLE_* This is the settings which we modified for keeping the path of the post into one folder. LINKS This is a tuple of tuple, with each entry showing a link which you want provide in your blog. SOCIAL This is also a tuple of tuple, where each entry is meant to point to a name of a social network say Facebook and the link to your profile. DEFAULT_PAGINATION This is a number showing how many blogs should be listed on the front page. Some Themes use this setting for some other purposes. Now these settings are not fully exhaustive, Pelican has a huge list of setting, which we will revisit once we have the need of them. publishconf.py Unlike pelicanconf.py , this setting file is only used when we are supposed to publish our blog to the domain hosting. This configuration is accessed when we generate the site using the following commands. pelican content -s publishconf.py The basic content of these files look like this. #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals # This file is only used if you use `make publish` or # explicitly specify it as your config file. import os import sys sys . path . append ( os . curdir ) from pelicanconf import * SITEURL = '' RELATIVE_URLS = False FEED_ALL_ATOM = 'feeds/all.atom.xml' CATEGORY_FEED_ATOM = 'feeds/ %s .atom.xml' DELETE_OUTPUT_DIRECTORY = True # Following items are often useful when publishing #DISQUS_SITENAME = \"\" #GOOGLE_ANALYTICS = \"\" This file, basically build on top of the pelicanconf.py , as we can see from this line, from pelicanconf import * . What this means is all the configuration from pelicancongf.py is taken into consideration along with some specific configuration which is required for just publishing. If you see this setting most of them are empty which we will fill one by one as we make progress in our blog, but from the structure you might get an idea that this file pertains to its integration with the DISQUS comment system, and the GOOGLE_ANALYTICS code. We will see the use of this code once we integrate these feature into our blog. Reference Pelican Settings","tags":"Pelican","title":"Understanding the Pelican Settings files."},{"url":"articles/pelican/pelican-commands-to-generate-first-pelican-blog-post.html","text":"We have our boilerplate pelican blog available, now we have still not seen the magic of pelican. In this post we will see our blog coming to life. First Pelican Blog We have seen the folder structure here Now we will first execute some commands and see what happens with this boilerplate. Remember to be in the pelican1 environment. We can do this by. source activate pelican1 Once we are in pelican1 environment, we have all the pelican commands at our disposal. Kindly execute this command. pelican content The above command we are passing content as a parameter, which is nothing but one of the directory of the folder structure. The output will be WARNING: No valid files found in content. Done: Processed 0 articles, 0 drafts, 0 pages and 0 hidden pages in 0 .12 seconds. It clearly warns us about no valid files found in content , as we have not added any post to the directory. If you see inside the output folder, we will see some content in that namely these files archives.html authors.html categories.html index.html tags.html theme #directory which contains some predefined images and css. Now let us see what the blog looks like. Just execute these commands. cd output/ python -m pelican.server Once you execute the above commands we can see the output on browser on this path localhost:8000 and it will look something like this Nothing fancy here, but we will some content with some link and a default theme. It is petty good for being a boilerplate. The first post. Now we are ready for our first post, we will do the sample hello world which is the de-facto standard in programming languages first program. We will write the first post in Markdown . Create a file named HelloWorld.md in this directory content . Title: Hello World Date: 2017-04-29 11:01 Category: Pelican Hello World to Pelican Once create and saved this file, just run this command. pelican content This will have the following output. Done: Processed 1 article, 0 drafts, 0 pages and 0 hidden pages in 0 .27 seconds. This time it clearly states that we have 1 article. Then follow the other commands as discussed. cd output/ python -m pelican.server Again check the output on the browser at localhost:8000 . Now this time the output is different and it look like this. The area surrounded in ellipse are new. This shows us the power of pelican, we do not have to bother how the content is presented on screen, we have to only concentrate on writing content. Reference Pelican Doc Quickstart","tags":"Pelican","title":"Pelican commands to generate the first blog."},{"url":"articles/pelican/pelican-folder-structure.html","text":"We will be able to extract the full juice of pelican once we understand the building blocks of the pelican blog. Folder structure and some files forms the basic of this. We will understand some of these files and folder use in this post. After the first blog post if we give make clean command we will see a folder structure just like this. This will have an empty output folder. We will understand the use of these folder and a proper way of managing your content. content folder This is the folder where all the magic happens. This is the root folder for our all content, we can use this folder for these purposes. Writing content Saving the images references in the content Static Pages (ex: about, contact etc) folder for storing our favicon.ico and apple icon Writing Content In traditional wordpress or most of the blogging platform the content is stored in this format /2015/05/24/my-content/ now this may be what some people might be happy with and you can also do the same, but this impacts the SEO ranking as the path becomes long and the date when the content was created has no significance to the actual content but is occupying space on the URL. In my opinion we can better organize our self with some meaning full structure. What we can do is we can create a folder in side content named articles and the sub folders inside articles for each category which you want to write or if you want to have a flat system you can place all your content inside articles . I prefer the sub folder approach as we can derive the category name just from the folder name. So go ahead for beginning create a folder inside content name articles cd content/ mkdir articles Now create your second post inside this and publish the content based on the command we learned on the previous post. Now if you launch the localhost:8000 , and click on the article title, you will see no difference but if you see on the URL bar, we still see that our post is without the article folder structure. We did not want this. Have a look In order to get the proper URL in the address bar we have to change somethings in the pelicanconf.py , we will explain what is the purpose of this file in a short file for not just add these 3 line into that config. ARTICLE_PATHS = [ 'articles' ,] ARTICLE_URL = 'articles/{slug}.html' ARTICLE_SAVE_AS = 'articles/{slug}.html' With is configuration in the config folder, just generate the blog with the commands already learned and then check the localhost:8000 . It should look like this. Now we have a proper folder structure. Static Pages Most often than not we will want some pages which will rarely change, like an About and a Contact pages. These type of static pages is also supported in the pelican blog. Just create a folder named pages inside content folder like this. cd content/ mkdir pages Now we are ready to make our sample About.md and Contact.md inside pages directory. Title: About Date: 2017-04-14 22:30 Modified: 2017-04-14 22:30 Slug: About Author: username Summary: This is a sample blog. The About Page for the blog. and Contact.md Title: Contact Date: 2017-04-14 22:30 Modified: 2017-04-14 22:30 Slug: Contact Author: username Summary: This is a sample blog contact page. The Contact Page for the blog. We again generate the blog and check it on localhost:8000 . When we see the output of pelican content command we will see this. Done: Processed 1 article, 0 drafts, 2 pages and 0 hidden pages in 0 .20 seconds. Which means that, the pages are generated. When we launch the localhost:8000 . we will see that the About and Contact menu like this We can modify these pages with the information which you want to furnish. Static Images Most often than not we will use images to link in our blogs, we can store all these images inside the content folder, having a directory called images . Do this by following these commands. cd content/ mkdir images Now we can copy any image inside this folder and try to link it into one of our blog. Just copy any image in this folder and copy the file name. Now create a link to this file inside the already existing blog post by the help of link of markdown, here is a sample. ![ Hello World 1 ]( {filename}../../images/helloWorldPelicanPost.png \"Hello World 2\" ) We should understand some details about the above piece of code. Hello World 1 The alt text is good if there is a browser which block image, this alt text is displayed, showing an information about what this images were supposed to do. \"Hello World 2\" This is the title of the image, which is shown as a tool tip once we hover over the image. {filename} This is a special syntax which is used by pelican to generate links, so be it URL or images, when using relative URLs kindly use this format. We have covered most of the folder structure inside article we will see the configuration files in the next blog post. Reference Pages Linking to internal content","tags":"Pelican","title":"Pelican Folder Structure"},{"url":"articles/pelican/helloworld-pelican-quickstart.html","text":"Pelican makes it very easy to make the ground rolling ASAP. Pelican provides a great command pelican-quickstart , which asks a few questions to you and makes a boilerplate blog ready in a few seconds. We will go through the entire process explaining each option is details. Activate Python environment We had set up a separate python anaconda environment in our previous post now is the time to active the environment, we can do that by using a simple command. source activate pelican1 It will activate the pelican1 environment, and we can identify it by check the terminal prompt which will change to (pelican1) . Once the work is done, we can deactivate the same with a simple command. source deactivate pelican1 All the above command will work for Linux and Mac, kindly check the windows equivalent of the same. pelican-quickstart Now we are ready to divulge in the world of pelican. Pelican has a ready to bake command to set up the basic boilerplate for the blog. The command is called Before executing the below commands, just create a directory where you want your blog files to be stored. mkdir ~/myBlogDirectory cd ~/myBlogDirectory pelican-quickstart Just execute this commands and it asks you these series of questions, which we will talk in details. pelican-quickstart options The options shown after executing the pelican-quickstart are as below. We will discuss each and every option and their usage, we can always choose the default shown in capital letter, {Y|n} . Where do you want to create your new Website ? [.] Most probably we will keep the default as we are already in that directory, if not you can specify the path /home/pathtomyblog What will be the title of the blog? Provide a suitable title to your blog, do not worry even if you want to change it latter we can change it. Who will be the author of this Website ? Just provide any name you want whose name should be present as an author on the blog post, it can be your name as well. What will be the default language of this Website ? [en] The default choice is English , else you can give any language format mentioned in ISO 639-1 Language Codes, the list can be found ISO Language codes Do you want to specify a URL prefix? e.g., http://example.com (Y/n) If you already have purchased a domain give the domain name as shown in the example, else continue with n , we can later fill the domain name. Do you want to enable article pagination? (Y/n) We can go with the default of having pagination, which means how many posts of the blogs will be displayed in one page, the choice of this is in the next question. How many articles per page do you want? [10] The default choice is 10 , for the time being keep it that way. What is your time zone? [Europe/Paris] To change the time zone, we should be aware that these are tz database time zone, to exactly get the time zone codes for your country visit List of tz database time zones , give the code without the [] . Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) There are multiple ways to automate the blog publishing process, makefile and fabic comes to our help, just chose the default and we will decide on this later. This creates two files in the directory, fabfile.py and Makefile Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) We have the help of auto-reload commands to automatically generates the preview as soon as we change anything in the themes, we might not require it initially, so keep it false. Do you want to upload your website using FTP? (y/N) If we had an FTP site where we could upload, just choose the default and say n Do you want to upload your website using SSH? (y/N) If you are hosting uses SSH, for our use case we will choose N , which is the default. Do you want to upload your website using Dropbox? (y/N) We can also use Dropbox to upload our static files, but for this, we will try some other time, for now choose the default which is N . Do you want to upload your website using S3? (y/N) We also have the facility of choosing amazon S3 for our site hosting, for now not needed chose N Do you want to upload your website using Rackspace Cloud Files? (y/N) Again the default N , we are not using Rackspace. Do you want to upload your website using GitHub Pages? (y/N) We can choose y here, but we will try another mechanism, for now choose the default N If you had chosen y in this option you will get this sub option. Is this your personal page (username.github.io)? (y/N) Choose y , After this we will get this message in either case. Done. Your new project is available at /home/username/myWork/mySampleBlog Our blogs boilerplate is available. Here is the folder structure. We have still not seen how the blog will look like, we will divulge into this in the next post, with all the pelican commands which is extremely important to get the full juice out of pelican. References How I setup Pelican List of tz database time zones List of ISO 639-1 codes pelican-quickstart.py","tags":"Pelican","title":"Pelican HelloWorld using pelican-quickstart"},{"url":"articles/pelican/python-setup-for-pelican-blog.html","text":"Installing Pelican Pelican is a python package, so we can have multiple option to install pelican. There can be 3 option which I can think of. Direct Installation If we have only one python installation on the system, and we do not have any issue if we screw up this installation just use pip to install pelican. Installation using VirtualEnv. This approach is already mentioned in official documentation of pelican Installation using Conda. By now you could have understood that we will use Conda to install pelican. This is because Anaconda is already a prepackaged installation of very well know python package in both version 2 and 3. In future, I will update this page if I wrote about Anaconda installation, for now refer any documents on the google search for installation. Configure Anaconda for Pelican Blog The first thing we have to do is to create an environment using the python version 2. This can be done by this command. conda create -n pelican1 python=2 Once we have executed the above command we will have pelican1 as an environment. We can see the list of environment in the system by using. conda info --envs Which will provide, an output like this. pelican1 /home/username/anaconda3/envs/pelican1 py27 /home/username/anaconda3/envs/py27 py35 /home/username/anaconda3/envs/py35 root * /home/username/anaconda3 This shows all the available environment. We can activate the pelican1 by using this command. source activate pelican1 Now we have an environment which we can use for pelican development. The reason for this environment creation is to have a separate environment for experimentation with pelican, if anything goes wrong we do not disturb already existing programs. Configure Pelican Environment for Blog Once we have the environment, we have to install few packages in this environment. The first is to install PiP to install other package. Install Pip by using. conda install pip With the completion of installing pip , the first and foremost package to install is pelican, with this command. pip install pelican Since we will be using Markdown to write our blogs we need the markdown package, which we can install using. pip install Markdown There are some plugin and themes in pelican which might need some additional packages, we will install these 2. pip install Fabric pip install beautifulsoup4 Freeze the Requirement When we have all our installation complete, we should save our package history into a requirement.txt . We can use this requirement.txt to install all the above mentioned packages with same version in one go. We can freeze the details by using. pip freeze > requirements.txt Dependencies If we check the requirement.txt generated in the above step, we will see a lot of packages already installed apart from pelican , markdown , Fabric and beautifulsoup4 . These extra packages are dependencies for running pelican. feedgenerator: to generate the Atom feeds jinja2: for templating support pygments: for syntax highlighting docutils: for supporting reStructuredText as an input format pytz: for timezone definitions blinker: an object-to-object and broadcast signaling system unidecode: for ASCII transliterations of Unicode text six: for Python 2 and 3 compatibility utilities MarkupSafe: for a markup safe string implementation python-dateutil: to read the date metadata We have completed 2 important steps of our own blog publishing. Reference Installing Pelican Managing Python","tags":"Pelican","title":"How to setup Anaconda Python environment for Pelican Blog."},{"url":"articles/pelican/cost-effective-blogging-with-Pelican-and-Github.html","text":"This is a series of blog post to help set up a static blog at minimal cost and integrating with all the popular tools such as Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog. I am a novice blogger and this blog would act as a journal, which will document my approach towards blogging, software development. The idea is to generate some revenues out of this blog in the long run. We all might have read about so many blogs which are able to generate good amount of traffic but in none one of those we have never read how do they achieve it. I may fail in my attempt, which might work as a guidance for someone to not follow this path and try another path for the same goal. The background theme to support this is to minimize my cost to the bare minimum so that the failure does not hurt me financially. Why Static Blog? There are already a lot of literature present behind this, just wanted to summarize those:- Cost:- This was the deciding factor for me, because of using a static website, this complete website can be hosted and deployed by just registering a domain name with a provider. I do not have to go for any hosting services etc. Easy of Writing Content:- I wanted to write my content using just Markdown , as i have grown comfortable writing in markdown. With using a static blog this was possible. Hosting:- We can serve these static HTML pages practically from any place, be it Github , Amazon S3 , Dropbox or any other place which can serve static HTML pages. I have chosen Github just to save the cost. Easy workflow:- The work flow is very simple when deploying with static blogs, just right you content in markdown, generate HTML, push your changes to github and that's it. Your content is not available online. You can even go crazy you cam automate the whole thing other than writing content. The above three are the main reason for choosing static blogs, but there could be many more valid reason for choosing static blogs. Most of the reason for me was personal in nature so you can also choose accordingly. Why Pelican? Once the approach to make this blog as static was finalized, the next big question came was which technology to choose, Pelican or Jekyll . There as already many comparison already available among these, but the only reason for me to choose pelican was because it uses python and jinja. In some near future I want to fully customize my blog with the knowledge of these two. Why Github? The final decision to be taken before starting this blog was to finalize the hosting provider. We have already mentioned some popular choice are Github Amazon S3 Dropbox I chose Github, for its near zero cost, it may cost you if you want to keep your repository private else it is completely free were as Amazon S3 would have required to shell out some money though less, with some extra benefits, but for the time being when I am just measuring the water it made sense to keep my cost down. Once all the above 3 moral questions were answered, setting up the blogs was easy and which will be documented in the future. Collated Blog post. How to set up Anaconda Python environment for Pelican Blog. Pelican HelloWorld using pelican-quickstart Pelican Folder Structure Pelican commands to generate the first blog. Understanding the Pelican Settings files Publishing your blog to github pages Configuring Github pages with Custom Domain Customizing Pelican blog with the help of Plugin and themes Expressing the content with Pelican Themes Problem Faced when integrating with Elegant Themes Home Page feature for Elegant Theme Integrating 3rd party services with Pelican Blog. Tips to improve work flow in pelican blog. Reference Making a Static Blog with Pelican This above blog explains why a static blog generator is good. Moving Blogs to Pelican This blog has a terrific explanation for pelican vs jekyll. Amazon S3 Vs Github Pages This explains the benefits of Amazon S3 over Github Pages, kindly check if you are affected because of this.","tags":"Pelican","title":"Cost effective blogging with Pelican and Github"}]}