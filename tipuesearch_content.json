{"pages":[{"url":"pages/about.html","text":"The About Page for Archer Imagine.","tags":"pages","loc":"pages/about.html","title":"About"},{"url":"articles/pelican-commands-to-generate-first-pelican-blog-post.html","text":"We have our boilerplate pelican blog available, now we have still not seen the magic of pelican. In this post we will see our blog coming to life. First Pelican Blog We have see the folder structure here Now we will first execute some commands and see what happens with this boilerplate. Remember to be in the pelican1 environment. We can do this by. source activate pelican1 Once we are in pelican1 environment, we have all the pelican commands at our disposal. Kindly execute this command. pelican content The above command we are passing content as a parameter, which is nothing but one of the directory of the folder structure. The output will be WARNING: No valid files found in content. Done: Processed 0 articles, 0 drafts, 0 pages and 0 hidden pages in 0 .12 seconds. It clearly warn us about no valid files found in content , as we have not added any post to the directory. If you see inside the output folder, we will see some content in that namely these files archives.html authors.html categories.html index.html tags.html theme #directory which contains some predefined images and css. Now let us see what the blog looks like. Just execute these commands. cd output/ python -m pelican.server Once you execute the above commands we can see the output on browser on this path localhost:8000 and it will look something like this Nothing fancy here, but we will some content with some link and a default theme. It is petty good for being a boilerplate. The first post. Now we are ready for our first post, we will do the sample hello world which is the de-facto standard in programming languages first program. We will write the first post in Markdown . Create a file named HelloWorld.md in this directory content . Title: Hello World Date: 2017-04-29 11:01 Category: Pelican Hello World to Pelican Once create and saved this file, just run this command. pelican content This will have the following output. Done: Processed 1 article, 0 drafts, 0 pages and 0 hidden pages in 0 .27 seconds. This time it clearly states that we have 1 article. Then follow the other commands as discussed. cd output/ python -m pelican.server Again check the output on the browser at localhost:8000 . Now this time the output is different and it look like this. The area surrounded in ellipse are new. This shows us the power of pelican, we do not have to bother how the content is presented on screen, we have to only concentrate on writing content. Reference Pelican Doc Quickstart","tags":"Pelican","loc":"articles/pelican-commands-to-generate-first-pelican-blog-post.html","title":"Pelican commands to generate the first blog."},{"url":"articles/pelican-folder-structure.html","text":"When will be able to extract the full juice of pelican once we understand the building blocks of the pelican blog. Folder structure and some of the files form the basic of this. We will understand some of this files and folder use in this post. After the first blog post if we give make clean command we will see a folder structure just like this. This will have a empty output folder. We will understand the use of these folder and a proper way of managing your content. content folder This is the folder where all the magic happens. This is the root folder for our all content, we can use this folder for these purposes. Writing content Saving the images references in the content Static Pages (ex: about, contact etc) folder for storing our favicon.ico and apple icon Writing Content In traditional wordpress or most of the bloging platform the content is stored in this format /2015/05/24/my-content/ now this may be what some people might be happy with and you can also do the same, but this impacts the SEO ranking as the path becomes long and the date when the content was created has no significance to the actual content but is occupying space on the url. In my opinion we can better organize ourself with some meaning full structure. What we can do is we can create a folder in side content named articles and the sub folders inside articles for each category which you want to write or if you want to have a flat system you can place all your content inside articles . I prefer the sub folder approach as we can derive the category name just from the folder name. So go ahead for beginning create a folder inside content name articles cd content/ mkdir articles Now create your second post inside this and publish the content based on the command we learned on the previous post. Now if you launch the localhost:8000 , and click on the article title, you will see no difference but if you see on the url bar, we still see that our post is without the article folder structure. We did not wanted this. Have a look In order to get the proper URL in the address bar we have to change somethings in the pelicanconf.py , we will explain what is the purpose of this file in a short file for not just add these 3 line into that config. ARTICLE_PATHS = [ 'articles' ,] ARTICLE_URL = 'articles/{slug}.html' ARTICLE_SAVE_AS = 'articles/{slug}.html' With is configuration in the config folder, just generate the blog with the commands already learned and then check the localhost:8000 . It should look like this. Now we have a proper folder structure. Static Pages Most often then not we will want some pages which will rarely change, like an About and a Contact pages. These type of static pages is also supported in the pelican blog. Just create a folder named pages inside content folder like this. cd content/ mkdir pages Now we are ready to make our sample About.md and Contact.md inside pages directory. Title: About Date: 2017-04-14 22:30 Modified: 2017-04-14 22:30 Slug: About Author: username Summary: This is a sample blog. The About Page for the blog. and Contact.md Title: Contact Date: 2017-04-14 22:30 Modified: 2017-04-14 22:30 Slug: Contact Author: username Summary: This is a sample blog contact page. The Contact Page for the blog. We again generate the blog and check it on localhost:8000 . When we see the output of pelican content command we will see this. Done: Processed 1 article, 0 drafts, 2 pages and 0 hidden pages in 0 .20 seconds. Which means that the pages are generated. When we launch the localhost:8000 . we will see that the About and Contact menu like this We can modify these pages with the information which you want to furnish. Static Images Most often then not we will use images to link in our blogs, we can store all these images inside the content folder, having a directory called images . Do this by following these commands. cd content/ mkdir images Now we can copy any image inside this folder and try to link it into one of our blog. Just copy any image in this folder and copy the file name. Now create a link to this file inside the already existing blog post by the help of link of markdown, here is a sample. ![ Hello World 1 ]( {filename}../images/helloWorldPelicanPost.png \"Hello World 2\" ) We should understand some details about the above piece of code. Hello World 1 The alt text is good if there is a browser which block image, this alt text is displayed, showing an information about what this images was supposed to do. \"Hello World 2\" This is the title of the image, which is shown as a tool tip once we hover over the image. {filename} This is a special syntax which is used by pelican to generate links, so be it url or images, when using relative urls kindly use this format. We have covered most of the folder structure inside article we will see the configuration files in the next blog post. Reference Pages Linking to internal content","tags":"Pelican","loc":"articles/pelican-folder-structure.html","title":"Pelican Folder Structure"},{"url":"articles/helloworld-pelican-quickstart.html","text":"Pelican makes it very easy to make the ground rolling ASAP. Pelican provides a great command pelican-quickstart , which asks a few questions to you and makes a boilerplate blog ready in a few seconds. We will go through the entire process explaining each option is details. Activate Python environment We had setup a separate python anaconda environment in our previous post now is the time to active the environment, we can do that by using a simple command. source activate pelican1 It will activate the pelican1 environment, and we can identify it by check the terminal prompt which will change to (pelican1) . Once the work is done we can deactivate the same with a simple command. source deactivate pelican1 All the above command will work for linux and Mac, kindly check the windows equivalent of the same. pelican-quickstart Now we are ready to divulge in the world of pelican. Pelican has a ready to bake command to setup the basic boilerplate for the blog. The command is called Before executing the below commands just create a directory where you want your blog files to be stored. mkdir ~/myBlogDirectory cd ~/myBlogDirectory pelican-quickstart Just execute this commands and it asks you these series of questions, which we will talk in details. pelican-quickstart options The options shown after executing the pelican-quickstart are as below. We will discuss each and every options and there usage, we can always choose the default shown in capital letter, {Y|n} . Where do you want to create your new Web site ? [.] Most probably we will keep the default as we are already in that directory, if not you can specify the path /home/pathtomyblog What will be the title of the blog? Provide a suitable title to your blog, do not worry even if you want to change it latter we can change it. Who will be the author of this Web site ? Just provide any name you want whose name should be present as a author on the blog post, it can be your name also. What will be the default language of this Web site ? [en] The default choice is english , else you can give any language format mentioned in ISO 639-1 Language Codes, the list can be found ISO Language codes Do you want to specify a URL prefix? e.g., http://example.com (Y/n) If you already have purchased a domain give the domain name as shown in the example, else continue with n , we can later fill the domain name. Do you want to enable article pagination? (Y/n) We can go with the default of having pagination, which means how many post of a the blogs will be displayed in one page, the choice of this is in the next question. How many articles per page do you want? [10] The default choice is 10 , for the time being keep it that way. What is your time zone? [Europe/Paris] To change the time zone, we should be aware that these are tz database time zone, to exactly get the time zone codes for your country visit List of tz database time zones , give the code without the [] . Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) There are multiple ways to automate the blog publishing process, makefile and fabic comes to our help, just chose the default and we will decide on this later. This creates two files in the directory, fabfile.py and Makefile Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) We have the help of auto-reload commands to automatically generates the preview as soon as we change anything in the themes, we might not require it initially, so keep it false. Do you want to upload your website using FTP? (y/N) If we had an FTP site where we could upload, just choose the default and say n Do you want to upload your website using SSH? (y/N) If your hosting uses SSH, for our use case we will choose N , which is the default. Do you want to upload your website using Dropbox? (y/N) We can also use dropbox to upload out static files, but for this, we will try some other time, for now choose the default which is N . Do you want to upload your website using S3? (y/N) We also have the facility of choosing amazon S3 for our site hosting, for now not needed chose N Do you want to upload your website using Rackspace Cloud Files? (y/N) Again the default N , we are not using Rackspace. Do you want to upload your website using GitHub Pages? (y/N) We can choose y here, but we will try another mechanism, for now choose the default N If you had chosen y in this option you will get this sub option. Is this your personal page (username.github.io)? (y/N) Choose y , After this we will get this message in either case. Done. Your new project is available at /home/username/myWork/mySampleBlog Our blogs boilerplate is available. Here is the folder structure. We have still not seen how the blog will look like, we will divulge into this in the next post, with all the pelican commands which is extremely important to get the full juice out of pelican. References How I setup Pelican List of tz database time zones List of ISO 639-1 codes pelican-quickstart.py","tags":"Pelican","loc":"articles/helloworld-pelican-quickstart.html","title":"Pelican HelloWorld using pelican-quickstart"},{"url":"articles/python-setup-for-pelican-blog.html","text":"Installing Pelican Pelican is a python package, so we can have multiple option to install pelican. There can be 3 option which I can think of. Direct Installation If we have only one python installation on the system, and we do not have any issue if we screw up this installation just use pip to install pelican. Installation using VirtualEnv. This approach is already mentioned in official documentation of pelican Installation using Conda. By now you could have understood that we will use Conda to install pelican. This is because Anaconda is already a pre-packaged installation of very well know python package in both version 2 and 3. In future I will will update this page if I wrote about Anaconda installation, for now refer any documents on the google search for installation. Configure Anaconda for Pelican Blog The first thing we have to do is to create a environment using the python version 2. This can be done by this command. conda create -n pelican1 python=2 Once we have executed the above command we will have pelican1 as an environment. We can see the list of environment in the system by using. conda info --envs Which will provide an output like this. pelican1 /home/username/anaconda3/envs/pelican1 py27 /home/username/anaconda3/envs/py27 py35 /home/username/anaconda3/envs/py35 root * /home/username/anaconda3 This shows all the available environment. We can activate the pelican1 by using this command. source activate pelican1 Now we have an environment which we can used for pelican development. The reason for this environment creation is to have a separate environment for experimentation with pelican, if anything goes wrong we do not disturb already existing programs. Configure Pelican Environment for Blog Once we have the environment we have install few packages in this environment. The first is to install PiP to install other package. Install Pip by using. conda install pip With the completion of installing pip , the first and foremost package to install is pelican, with this command. pip install pelican Since we will be using Markdown to write our blogs we need the markdown package, which we can install using. pip install Markdown There are some plugin and themes in pelican which might need some additional packages, we will install these 2. pip install Fabric pip install beautifulsoup4 Freeze the Requirement When we have all our installation complete, we should save our package history into a requirement.txt . We can use this requirement.txt to install all the above mentioned packages with same version in one go. We can freeze the details by using. pip freeze > requirements.txt Dependencies If we check the requirement.txt generated in the above step, we will see a lot of packages already installed apart from pelican , markdown , Fabric and beautifulsoup4 . These extra packages are dependencies for running pelican. feedgenerator: to generate the Atom feeds jinja2: for templating support pygments: for syntax highlighting docutils: for supporting reStructuredText as an input format pytz: for timezone definitions blinker: an object-to-object and broadcast signaling system unidecode: for ASCII transliterations of Unicode text six: for Python 2 and 3 compatibility utilities MarkupSafe: for a markup safe string implementation python-dateutil: to read the date metadata We have completed 2 important steps of our own blog publishing. Reference Installing Pelican Managing Python","tags":"Pelican","loc":"articles/python-setup-for-pelican-blog.html","title":"How to setup Anaconda Python environment for Pelican Blog."},{"url":"articles/cost-effective-blogging-with-Pelican-and-Github.html","text":"This is a series of blog post to help set up a static blog at minimal cost and integrating with all the popular tools such as Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog. I am a novice blogger and this blog would act as a journal, which will document my approach towards bloging, software development. The idea is to generate some revenue out of this blog in the long run. We all might have read about so many blogs which are able to generate good amount of traffic but in none one of those we have never read how do they achieve it. I may fail in my attempt, which might work as a guidance for someone to not follow this path and try another path for the same goal. The background theme to support this is to minimize my cost to the bare minimum so that the failure does not hurt me financially. Why Static Blog? There are already a lot of literature present behind this, just wanted to summarize those:- Cost:- This was the deciding factor for me, because of using a static website, this complete website can be hosted and deployed by just registering a domain name with a provider. I do not have to go for any hosting services etc. Easy of Writing Content:- I wanted to write my content using just Markdown , as i have grown comfortable writing in markdown. With using a static blog this was possible. Hosting:- We can serve these static html pages practically from any place, be it Github , Amazon S3 , Dropbox or any other place which can serve static html pages. I have chosen Github just to save the cost. Easy workFlow:- The work flow is very simple when deploying with static blogs, just right you content in markdown, generate html, push your changes to github and that's it. Your content is not available online. If you want to even go crazy you cam automate the whole thing other than writing content. The above three are the main reason for choosing static blogs, but there could be many more valid reason for choosing static blogs. Most of the reason for me was personal in nature so you can also choose accordingly. Why Pelican? Once the approach to make this blog as static was finalized, the next big question came was which technology to choose, Pelican or Jerkll . There as already many comparison already available among these, but the only reason for me to choose pelican was because it uses python and jinja. In some near future I want to fully customize my blog with the knowledge of these two. Why Github? The final decision to be taken before starting this blog was to finalize the hosting provider. We have already mentioned some of the popular choice are Github Amazon S3 Dropbox I chose Github, for its near zero cost, it may cost you if you want to keep your repository private else it is completely free were as Amazon S3 would have required to shell out some money though less, with some extra benefits, but for the time being when I am just measuring the water it made sense to keep my cost down. Once all the above 3 moral questions were answered, setting up the blogs was easy and which will be documented in future. Collated Blog post. How to setup Anaconda Python environment for Pelican Blog. Reference Making a Static Blog with Pelican This above blog explains why a static blog generator is good. Moving Blogs to Pelican This blog has a terrific explanation for pelican vs jekyll. Amazon S3 Vs Github Pages This explains the benefits of Amazon S3 over Github Pages, kindly check if you are affected because of this.","tags":"Pelican","loc":"articles/cost-effective-blogging-with-Pelican-and-Github.html","title":"Cost effective blogging with Pelican and Github"},{"url":"articles/LaunchingSite.html","text":"I have mentioned some of the links in references, have visited all of the below and few more, but the configuration is much simpler. The process can be broken into 2 broad steps. Configure your Github repo Configure the DNS at GoDaddy Configure your Github repo The prequsite is that we have a github pages of like this archeranimesh.github.io , if not kindly visit this link for generating one. The first thing we would like to do is to configure a CNAME in the above repo. There are two ways to do this. Local Repo Directly on Github. Local Repo Create a local file in the repo with the name CNAME. Just have one line in the file. example.com , where example.com is your domain you have bought from GoDaddy . Push the changes to Github Directly on GitHub On the repository in Github , you will see something like this. In the above Click on the Settings , Scroll down you will see something like this. Enter the domain you have purchased from GoDaddy . These are the only changes required to be done in GitHub. Configure the DNS at GoDaddy The most easiest of the all the below references is Configuring a Godaddy domain name with github pages . The real issue is all of the links shows the old UI of GoDaddy , so some things get confusing. Go to the account setting page, which mostly will like in this link . The link will look like this. Click on the + Symbols in Front of Domain, and Click on the Manage DNS Link The link will show a lot of Records , go to the end of the Records , and click on the link ADD From the above option we have to add 3 entries. These is how all the 3 would look like after adding. Now you can launch and check your desired domain. Kindly wait 48 hrs for these changes to reflect, do not try to configure multiple times, if it does not work even after 48 hours kindly search for help, till then take a coffee break and have a nice time out of this screen. The domain XYX is no longer parked by godaddy When we are doing the above process, even after 24 hours, when you launch your website, we find one of these error. The domain XYX is no longer parked by godaddy It is detected as a Malware in the office network. The website might launch for some times and sometimes you might get any one of the above 2 errors. kindly check this in the Manage DNS page. We had added two A Names pointing to the GitHub URL as shown below. Check if you have any other A Names in addition to the above two, if you have, kindly delete that. The detailed issue can be read GoDaddy domain (randomly) not resolving to GitHub Pages References Setting Up a GoDaddy Domain Name With GitHub Configuring a Godaddy domain name with github pages Using a custom domain with GitHub Pages Using GitHub Pages To Host Your Website GoDaddy domain (randomly) not resolving to GitHub Pages [Help]: How to correctly connect my github pages blog to a custom domain? Redirecting GitHub Page to a custom domain Kindly read the above site, to understand what is the use of CNAME and A Record. Great introduction.","tags":"Pelican","loc":"articles/LaunchingSite.html","title":"Configuring Github pages with Custom Domain"}]}