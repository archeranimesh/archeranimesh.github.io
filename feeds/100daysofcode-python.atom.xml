<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Archer Imagine - #100DaysOfCode, python</title><link href="http://archerimagine.com/" rel="alternate"></link><link href="http://archerimagine.com/feeds/100daysofcode-python.atom.xml" rel="self"></link><id>http://archerimagine.com/</id><updated>2019-06-25T23:08:16+05:30</updated><entry><title>100Days of Code Log File 3rd Attempt</title><link href="http://archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_3_0.html" rel="alternate"></link><published>2019-06-05T22:29:49+05:30</published><updated>2019-06-25T23:08:16+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-06-05:/articles/100daysofcode-python/100Days-of-code-log-file_V_3_0.html</id><summary type="html">&lt;p&gt;This is 3rd attempt at completing the #100DaysOfCode. Hope to be consistent longer this time.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="http://archerimagine.com/images/100DaysOfCode/quote_fancy_01.jpg" title="If we fail, let us try again and again until we succeed, by Joseph Chamberlain"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic third coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="http://archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html" title="Second attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Selected the resource in advance, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/python/"&gt;FrontEndMasters | Python Fundamentals | Nina Zakharenko &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete first 21 Days first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-17-tuesday-june-252019"&gt;Day 17 | Tuesday June 25,2019&lt;a class="headerlink" href="#day-17-tuesday-june-252019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finally crossed the last attempts days.&lt;/li&gt;
&lt;li&gt;Learned about mutability.&lt;/li&gt;
&lt;li&gt;Basic data type are immutable.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Containers data type are divided&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt; are mutable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple&lt;/code&gt; is immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-monday-june-242019"&gt;Day 16 | Monday June 24,2019&lt;a class="headerlink" href="#day-16-monday-june-242019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Adding/Accessing dictionary elements.&lt;ul&gt;
&lt;li&gt;add new key/Value pair.   &lt;code&gt;nums["four"] = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are no duplicate key in Dictionaries.&lt;/li&gt;
&lt;li&gt;If new value is assigned to same key, it will override the old value.&lt;/li&gt;
&lt;li&gt;Existence of a key in Dictionaries. &lt;code&gt;"one" in nums&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.update()&lt;/code&gt;: Combine two list.&lt;/li&gt;
&lt;li&gt;3 important functions on Dictionaries&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.keys()&lt;/code&gt;: returns special list called dict keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;: returns a special list called dict values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.item()&lt;/code&gt;: returns a list of tuple, called dict items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dictionaries Operation " src="http://archerimagine.com/images/100DaysOfCode/dict_02.png" title="Dictionaries Operation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1143211092597825536"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-sunday-june-232019"&gt;Day 15 | Sunday June 23,2019&lt;a class="headerlink" href="#day-15-sunday-june-232019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started learning about dictionaries.&lt;/li&gt;
&lt;li&gt;Dictionaries store &lt;code&gt;key:value&lt;/code&gt; pair.&lt;/li&gt;
&lt;li&gt;Dictionaries are mutable but the &lt;code&gt;keys&lt;/code&gt; are immutable.&lt;/li&gt;
&lt;li&gt;The search is very fast, just like &lt;code&gt;sets&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Retrieve the value with index as the &lt;code&gt;key&lt;/code&gt; &lt;code&gt;a["one"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt; method can be used when we do not want an error while retrieving a value.&lt;ul&gt;
&lt;li&gt;Its returns a default value if the key is not present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dictionaries Basics " src="http://archerimagine.com/images/100DaysOfCode/dict_01.png" title="Dictionaries Basics"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1142836839323095040"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-saturday-june-222019"&gt;Day 14 | Saturday June 22,2019&lt;a class="headerlink" href="#day-14-saturday-june-222019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Important set operation.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union()&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; : Returns the union of two sets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection()&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;: Returns the intersection of two sets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference()&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;: present in 1 set but not in other.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set Operation " src="http://archerimagine.com/images/100DaysOfCode/set_03.png" title="Set Operation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1142493860150439936"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-thursday-june-202019"&gt;Day 13 | Thursday June 20,2019&lt;a class="headerlink" href="#day-13-thursday-june-202019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Updated my RAM with set operation for CRUD.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add()&lt;/code&gt; - Adds item to the set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;discard()&lt;/code&gt; - Removes item from the set, if not present, gives no error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove()&lt;/code&gt; - Removes item from the set, if not present. gives &lt;code&gt;KeyError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update()&lt;/code&gt; - Adds item from a sequence into a set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set crud " src="http://archerimagine.com/images/100DaysOfCode/set_02.png" title="Set CRUD"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141757313604173824"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-june-192019"&gt;Day 12 | Wednesday June 19,2019&lt;a class="headerlink" href="#day-12-wednesday-june-192019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the basic premise around sets.&lt;ul&gt;
&lt;li&gt;Empty sets can only be created using &lt;code&gt;set()&lt;/code&gt; function, empty &lt;code&gt;{}&lt;/code&gt; creates a dict.&lt;/li&gt;
&lt;li&gt;Sets stores only immutable data type which can give a &lt;code&gt;hash()&lt;/code&gt; value.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = {"a", (1, 2, 3), [1, 2, 3]}&lt;/code&gt; &lt;code&gt;# TypeError: unhashable type: 'list'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sets are used to remove duplicates from List.&lt;/li&gt;
&lt;li&gt;Sets searching is very fast.&lt;/li&gt;
&lt;li&gt;Sets do not have a indexing order.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set creation " src="http://archerimagine.com/images/100DaysOfCode/set_01.png" title="Set creation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141395988881367040"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-june-182019"&gt;Day 11 | Tuesday June 18,2019&lt;a class="headerlink" href="#day-11-tuesday-june-182019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explored the different ways to create a &lt;code&gt;tuple&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Create a empty tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = tuple()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;b = ()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a single item tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = (1,)&lt;/code&gt; and not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = (1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brackets are not mandatory for tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b = 1, 2, 3, 4, 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;indexing in tuple, same as list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tuple creation " src="http://archerimagine.com/images/100DaysOfCode/tuple_01.png" title="tuple creation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141031483282317312"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-june-172019"&gt;Day 10 | Monday June 17,2019&lt;a class="headerlink" href="#day-10-monday-june-172019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Established some basic understanding on list operations&lt;/li&gt;
&lt;li&gt;Operations to add item to the list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append()&lt;/code&gt;: add an item to end of the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert(2, "bbbb")&lt;/code&gt;: insert at an index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend()&lt;/code&gt;: concatenates two list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operation on list look-up, which is very slow, almost linear.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index(value)&lt;/code&gt;: returns first index of value&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ValueError:&lt;/code&gt; if the value is not present in list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(value)&lt;/code&gt;: returns the no of times a value is present.&lt;ul&gt;
&lt;li&gt;return's &lt;code&gt;0&lt;/code&gt; is the value is not present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operation to remove item from list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;remove(value)&lt;/code&gt;: removes the value from the list, if not present does not throw error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt;: remove and returns the last element of the list or the index.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List are heterogeneous.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Heterogeneous list. " src="http://archerimagine.com/images/100DaysOfCode/list_03.png" title="Heterogeneous list."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1140663343528599554"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-sunday-june-162019"&gt;Day 09 | Sunday June 16,2019&lt;a class="headerlink" href="#day-09-sunday-june-162019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the list's sort and the built-in sorted function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted()&lt;/code&gt; returns a list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.sort()&lt;/code&gt; or &lt;code&gt;list.reverse()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="sorted() and built-in sort " src="http://archerimagine.com/images/100DaysOfCode/list_02.png" title="sorted() and built-in sort"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1140304997944401920"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-saturday-june-152019"&gt;Day 08 | Saturday June 15,2019&lt;a class="headerlink" href="#day-08-saturday-june-152019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started after a gap of 1 cheat day.&lt;/li&gt;
&lt;li&gt;List was the focus today.&lt;ul&gt;
&lt;li&gt;list can be created using &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list is a ordered collection.&lt;/li&gt;
&lt;li&gt;list is a heterogeneous collection.&lt;/li&gt;
&lt;li&gt;list elements can be accessed using index start at &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List has 1 efficient way of declaring.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"XXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"YYY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"ZZZ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# unlike json, we can have comma at the last element, &lt;/span&gt;
            &lt;span class="c1"&gt;# it helps with git diff&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Multi Line list declaration." src="http://archerimagine.com/images/100DaysOfCode/list_01.png" title="Multi Line list declaration."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1139956001749123072"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-thursday-june-132019"&gt;Day 07 | Thursday June 13,2019&lt;a class="headerlink" href="#day-07-thursday-june-132019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function scope is little confusing without practice.&lt;ul&gt;
&lt;li&gt;There is a global scope and a local scope to a function.&lt;/li&gt;
&lt;li&gt;If same variable name is same, local scope gets preference.&lt;ul&gt;
&lt;li&gt;Global variable cannot be modified even thought it share the same name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This code will work.
&lt;img alt="Function Scope Working case." src="http://archerimagine.com/images/100DaysOfCode/functions_scope_01.png" title="Function Scope Working case."/&gt;&lt;/li&gt;
&lt;li&gt;But this code will not work, gives &lt;code&gt;UnboundLocalError:&lt;/code&gt;.
&lt;img alt="Function Scope Not Working case." src="http://archerimagine.com/images/100DaysOfCode/functions_scope_error.png" title="Function Scope Not Working case."/&gt;&lt;/li&gt;
&lt;li&gt;The explanation is mentioned in the Python &lt;a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"&gt;Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1139222966279892992"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-wednesday-june-122019"&gt;Day 06 | Wednesday June 12,2019&lt;a class="headerlink" href="#day-06-wednesday-june-122019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="List as a function argument." src="http://archerimagine.com/images/100DaysOfCode/functions_03_01.png" title="List as a function argument."/&gt;
&lt;img alt="List as a function argument." src="http://archerimagine.com/images/100DaysOfCode/functions_03_02.png" title="List as a function argument."/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List or any other mutable data type should not be used as the default arguments.&lt;ul&gt;
&lt;li&gt;The list is initialized when the function is called the 1st time, and then it modifies the same list. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138870851497934848"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-5-tuesday-june-112019"&gt;Day 5 | Tuesday June 11,2019&lt;a class="headerlink" href="#day-5-tuesday-june-112019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Functions Arguments" src="http://archerimagine.com/images/100DaysOfCode/functions_02.png" title="Function Arguments"/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started with the &lt;em&gt;Function's Arguments&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Positional arguments must be passed to functions.&lt;/li&gt;
&lt;li&gt;Default arguments are always provide at the end of function's argument list.&lt;/li&gt;
&lt;li&gt;We can give &lt;em&gt;none&lt;/em&gt;, &lt;em&gt;one&lt;/em&gt;, &lt;em&gt;all&lt;/em&gt; arguments to a function with only default arguments list.&lt;/li&gt;
&lt;li&gt;Labeled arguments can be passed in any order to a function. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138501823415951360"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-monday-june-102019"&gt;Day 04 | Monday June 10,2019&lt;a class="headerlink" href="#day-04-monday-june-102019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Functions" src="http://archerimagine.com/images/100DaysOfCode/functions_01.png" title="Different return type of functions."/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the &lt;code&gt;functions&lt;/code&gt; section of the lecture.&lt;/li&gt;
&lt;li&gt;This lesson, teaches about different function type.&lt;ul&gt;
&lt;li&gt;Function with no arguments and no return type&lt;/li&gt;
&lt;li&gt;Function with no arguments and a return type&lt;/li&gt;
&lt;li&gt;Function with 2 arguments and a return type&lt;/li&gt;
&lt;li&gt;Function with multi-line function body.&lt;/li&gt;
&lt;li&gt;return is always optional in function, it returns &lt;code&gt;&amp;lt;class 'NoneType'&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The function returning &lt;code&gt;&amp;lt;class 'NoneType'&amp;gt;&lt;/code&gt; was a eye opener.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138147827287187457"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-sunday-june-92019"&gt;Day 03 | Sunday June 9,2019&lt;a class="headerlink" href="#day-03-sunday-june-92019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the Data Type chapter in the FrontEnd Master's Python fundamentals.&lt;/li&gt;
&lt;li&gt;This chapter introduces some nice concept about data types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;45j&lt;/code&gt;  is a complex data type &lt;code&gt;&amp;lt;class 'complex'&amp;gt;&lt;/code&gt; but not &lt;code&gt;45i&lt;/code&gt;, so &lt;code&gt;j&lt;/code&gt; is the identifier for complex number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new_name f"Hello, {name}"&lt;/code&gt; is a format string, &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;{}&lt;/code&gt; is the variable name which will be replaced.&lt;/li&gt;
&lt;li&gt;Same variable can be used to store number, or strings.&lt;/li&gt;
&lt;li&gt;String can be created by both &lt;code&gt;'string 1 '&lt;/code&gt; or &lt;code&gt;" String 2 "&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integer division gives the result in floating point &lt;code&gt;3/2 = 1.5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python Data types have lot of power inside them with very less ambiguity.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137766857312616453"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-saturday-june-82019"&gt;Day 02 | Saturday June 8,2019&lt;a class="headerlink" href="#day-02-saturday-june-82019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_15"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the VSCode basic settings, got help from a great tutorial by &lt;a href="https://www.youtube.com/watch?v=06I63_p-2A4"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The tutorials talks about these topics&lt;ul&gt;
&lt;li&gt;Change the way settings is displayed as JSON, in place of UI.&lt;/li&gt;
&lt;li&gt;Select virtual environment.&lt;/li&gt;
&lt;li&gt;Change color theme.&lt;/li&gt;
&lt;li&gt;Change file icons.&lt;/li&gt;
&lt;li&gt;Set the global python path - &lt;code&gt;"python.pythonPath": "&amp;lt;Path&amp;gt;"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set a global python file formatter, we are using Black for this. &lt;code&gt;"python.formatting.provider": "black",&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Also change the option to run the formatter on saving the file. &lt;code&gt;"editor.formatOnSave": true,&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable Linting.&lt;/li&gt;
&lt;li&gt;Git Integration.&lt;/li&gt;
&lt;li&gt;Unit Testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VScode has lot of power, lets see how much I learn from it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137427179573092353"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-friday-june-72019"&gt;Day 01 |  Friday June 7,2019&lt;a class="headerlink" href="#day-01-friday-june-72019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_16"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_16" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Python Fundamentals course by Nina Zakharenko.&lt;/li&gt;
&lt;li&gt;Today's main focus was setting my these things.&lt;ul&gt;
&lt;li&gt;Virtual environment.&lt;/li&gt;
&lt;li&gt;VScode setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Faced few issues, which &lt;a href="https://stackoverflow.com/questions/41687841/there-is-no-activate-when-i-am-trying-to-run-my-virtual-env"&gt;stackoverflow &lt;/a&gt; helped in solving&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="issues-and-solutions"&gt;Issues and Solutions&lt;a class="headerlink" href="#issues-and-solutions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was no activate script when the virtual environment was created by using the command &lt;code&gt;python -m venv .env&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;On doing Google for the problem found that running the same command again solves the issue, so ran &lt;code&gt;python -m venv env&lt;/code&gt; again and viola the activate script appeared.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VScode was not recognizing the virtual environment created inside a sub folder in the project.&lt;ul&gt;
&lt;li&gt;Deleted the pre-existing environment and created a new virtual environment at the project root.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_16"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_16" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Programming is just efficient Google technique.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137047401137549312"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/1733403/Joseph-Chamberlain-If-we-fail-let-us-try-again-and-again-until-we-succeed"&gt;QuoteFancy | Image Source &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nealschaffer.com/tweet-link-preview-image-twitter/"&gt;Create a Tweet With image Preview for Free &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/python/"&gt;FrontEndMasters | Python Fundamentals | Nina Zakharenko &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=06I63_p-2A4"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry><entry><title>100Days of Code Log File 2nd Attempt</title><link href="http://archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html" rel="alternate"></link><published>2019-02-15T22:42:30+05:30</published><updated>2019-03-21T22:49:10+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-02-15:/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html</id><summary type="html">&lt;p&gt;Hello World!, You are about the witness the second coming of an epic 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="http://archerimagine.com/images/100DaysOfCode/100DaysCode_Quotefancy.jpg" title="life always offers you a second chance. is called tomorrow, by Dylan Thomas"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic second coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="http://archerimagine.com/articles/100daysofcode/100Days-of-code-log-file.html" title="First attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selected the resource in advance, &lt;ul&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice the 100Daysofcode for a month before committing fully.&lt;/li&gt;
&lt;li&gt;Create a time table and sticking to it.&lt;/li&gt;
&lt;li&gt;Studying at the same time everyday, brains craves for learning python in that hour of the day.&lt;/li&gt;
&lt;li&gt;Missing few (~5) days is acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed few regular expression tutorials from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Negation&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[^abc]&lt;/code&gt; - A set that will not match any char of these characters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.IGNORECASE&lt;/code&gt;, &lt;code&gt;re.I&lt;/code&gt; - Flag to ignore case while searching&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.VERBOSE&lt;/code&gt;, &lt;code&gt;re.X&lt;/code&gt; - Flag that allows regular expression to span multiple lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Groups&lt;ul&gt;
&lt;li&gt;&lt;code&gt;([abc])&lt;/code&gt; - create a group, that contains a set of letters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(P&amp;lt;name&amp;gt;[abc])&lt;/code&gt; - creates a named group, member can be accessed using &lt;code&gt;group('name')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.MULTILINE&lt;/code&gt;, &lt;code&gt;re.M&lt;/code&gt; - flag to make a pattern having lines.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - Beginning of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; - End of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780013992796163"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today did not get much work done, solved few exercises in solo learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432674560069633"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed few regular expression tutorials from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about counts in regular expressions.&lt;/li&gt;
&lt;li&gt;We can create expressions like these&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w{3}&lt;/code&gt; - Match any 3 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{,3}&lt;/code&gt; - Match 0,1,2 or 3 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{3,}&lt;/code&gt; - Match 3 or more char, no upper limit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{3,5}&lt;/code&gt; - Match 3,4 or 5 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w?&lt;/code&gt; - Match 0 or 1 char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w*&lt;/code&gt; - Match 0 or more&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w+&lt;/code&gt; - Match 1 or more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can also pass a variable in regular expression string.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"\w{%s}" %count&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt; - for string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; - for decimal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; - for float&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sets basic was also checked.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt; - set of char a,b,c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z][A-Z][a-zA-Z]&lt;/code&gt; - Char ranges&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt; - digit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^2]&lt;/code&gt; - Not 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063107849564161"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Chapter 01 from Head First Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about 2 types of &lt;code&gt;import&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learned about these module, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107684592805396480"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practiced some of the learning from Regular Expression from previous Day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297400236986370"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Module of Regular Expression from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about File read and write operations like&lt;ul&gt;
&lt;li&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In addition to these explored&lt;ul&gt;
&lt;li&gt;&lt;code&gt;re.match()&lt;/code&gt; - Matches against the beginning of text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.search()&lt;/code&gt; - returns the first match location anywhere in the text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Few escape sequence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt; - Matches Unicode word char including numbers but excluding special character.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\W&lt;/code&gt; - Matches anything which is &lt;strong&gt; NOT &lt;/strong&gt; Unicode word or numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt; - Matches all white spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt; - Matches anything which is &lt;strong&gt; NOT &lt;/strong&gt; white spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; - Matches numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; - Matches &lt;strong&gt; NOT &lt;/strong&gt; numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt; - Matches word boundary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\B&lt;/code&gt; - Matches &lt;strong&gt; NOT &lt;/strong&gt; word boundary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297400236986370"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read the first chapter of Head first Python.&lt;/li&gt;
&lt;li&gt;Wrote few code from the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about the &lt;code&gt;datetime&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105167915958063105"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-tuesday-05-march-2019"&gt;Day 09 | Tuesday 05 March 2019&lt;a class="headerlink" href="#day-09-tuesday-05-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the module of Quiz Game in the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Earned the Dates and Times badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Dates and Times Badge " src="http://archerimagine.com/images/100DaysOfCode/python_date_time.png" title="Python Dates and Times Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about timezone.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a very difficult to handle without &lt;a href="https://pypi.org/project/pytz/"&gt;pytz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1102918666625130499"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-friday-01-march-2019"&gt;Day 08 | Friday 01 March 2019&lt;a class="headerlink" href="#day-08-friday-01-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the module of Quiz Game in the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Earned the build timed quiz App badge.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Timed Quiz Badge " src="http://archerimagine.com/images/100DaysOfCode/python_time.png" title="Python Timed Quiz Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some concepts of games were very good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101526314564141057"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-thursday-28-february-2019"&gt;Day 07 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-07-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Received the badge Date and time Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Date and Time Badge " src="http://archerimagine.com/images/100DaysOfCode/python_time.png" title="Python Date and Time Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about &lt;code&gt;strftime()&lt;/code&gt; and &lt;code&gt;strptime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Made a script to create a link for wikipedia.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101173226271592449"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-wednesday-27-february-2019"&gt;Day 06 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-06-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I just watched the second lecture from MIT OCW's &lt;a href="https://www.youtube.com/watch?v=SLvTCHhu5SE&amp;amp;index=2&amp;amp;list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this lecture we discuss about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of objects.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expression&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100802868599234563"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-tuesday-26-february-2019"&gt;Day 05 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-05-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was a gap of 3 days.&lt;/li&gt;
&lt;li&gt;Started the &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;Date and Time&lt;/a&gt; module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This course teaches about the date and time module of Python.&lt;/li&gt;
&lt;li&gt;Major modules in &lt;code&gt;datetime&lt;/code&gt; are&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;timedelta&lt;/code&gt;, &lt;code&gt;timezone&lt;/code&gt;, &lt;code&gt;tzinfo&lt;/code&gt;- which is rarely used directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learned about &lt;code&gt;.today()&lt;/code&gt;, &lt;code&gt;.combine()&lt;/code&gt;, &lt;code&gt;.timestamp()&lt;/code&gt; -  which returns the epoch time.&lt;/li&gt;
&lt;li&gt;We can format the time with help from &lt;code&gt;strftime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can create time with string format &lt;code&gt;strptime()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100450089930276864"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-friday-22-february-2019"&gt;Day 04 | Friday 22 February 2019&lt;a class="headerlink" href="#day-04-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the course &lt;a href="https://teamtreehouse.com/library/write-better-python"&gt;TreeHouse | Write Better python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Received the badge Clean Code Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Clean Code Badge " src="http://archerimagine.com/images/100DaysOfCode/python_cleancode.png" title="Python Clean Code Badge"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In addition completed the Write Better python Course of the Learn Python track.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Write Better Python " src="http://archerimagine.com/images/100DaysOfCode/writeBetterPython.png" title="Write Better Python"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This course taught about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PEP-8 Coding style guide.&lt;/li&gt;
&lt;li&gt;PEP-20 which is the Zen of python, can be accessed using &lt;code&gt;import this&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;PEP-257 for docstrings&lt;ul&gt;
&lt;li&gt;DocString which can fit one line should.&lt;/li&gt;
&lt;li&gt;DocString that cannot, put the closing triple quote on their own line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging Module of python&lt;ul&gt;
&lt;li&gt;6 Logs levels, &lt;code&gt;CRITICAL&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;NOTSET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Debugger &lt;code&gt;pdb&lt;/code&gt;, can be invoked by calling &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098994918071156737"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-thursday-21-february-2019"&gt;Day 03 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-03-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I completed the &lt;a href="https://teamtreehouse.com/library/objectoriented-python-2"&gt;Object Oriented Python course &lt;/a&gt;. With this I have also received the badge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Object Oriented Python Badge." src="http://archerimagine.com/images/100DaysOfCode/OOPython.png" title="Object Oriented Python Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today completed the project Dice Roller.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am still not confident in some part of Object Oriented Python, will soon polish it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098633238963240961"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-wednesday-20-february-2019"&gt;Day 02 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-02-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I just watched the first lecture from MIT OCW's &lt;a href="https://www.youtube.com/watch?v=bX3jvD7XFPs&amp;amp;list=PLB2BE3D6CA77BB8F7&amp;amp;index=2&amp;amp;t=0s"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a great lecture by &lt;a href="https://people.csail.mit.edu/guttag/"&gt;John Guttag &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am alternating between &lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?reload=9&amp;amp;list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lecture 1 of MIT 6.00SC Introduction to Computer Science and Programming taught me about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declarative and Imperative Knowledge.&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Fixed program and stored program computers&lt;/li&gt;
&lt;li&gt;Programming Language&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Static Semantics&lt;/li&gt;
&lt;li&gt;Semantics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types of errors&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiled Vs Interpreted Language &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098272030032572416"&gt;Link To Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-tuesday-19-february-2019"&gt;Day 01 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-01-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_15"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am learning Python from the learn python track of &lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;TreeHouse&lt;/a&gt;. I started this course, some days back, from now, will post regularly on behalf of #100DaysOfCode.&lt;/p&gt;
&lt;p&gt;Today I have completed the Advanced Object Badge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Advance Object TreeHouse Badge." src="http://archerimagine.com/images/100DaysOfCode/python.png" title="Advance Object TreeHouse Badge."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@property&lt;/code&gt; : This decorator is used to convert a class method into a class property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@property.setter&lt;/code&gt; : This decorator is used to make the method set a class property.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@classmethod&lt;/code&gt; : This is a decorator which takes a function as input works on it and returns another function as output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097923646327345153"&gt;Link to Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/970132/Dylan-Thomas-Life-always-offers-you-a-second-chance-is-called-tomorrow"&gt;QuoteFancy | Image Source &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nealschaffer.com/tweet-link-preview-image-twitter/"&gt;Create a Tweet With image Preview for Free &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry></feed>