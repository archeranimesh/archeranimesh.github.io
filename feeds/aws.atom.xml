<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Archer Imagine - aws</title><link href="https://www.archerimagine.com/" rel="alternate"></link><link href="https://www.archerimagine.com/feeds/aws.atom.xml" rel="self"></link><id>https://www.archerimagine.com/</id><updated>2021-03-27T10:12:42+05:30</updated><subtitle>Anyone can do my job, but no one can be me. Harvey</subtitle><entry><title>Doing AWS STS the right way.</title><link href="https://www.archerimagine.com/articles/aws/aws-sts.html" rel="alternate"></link><published>2021-03-20T16:20:58+05:30</published><updated>2021-03-27T10:12:42+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-20:/articles/aws/aws-sts.html</id><summary type="html">&lt;p&gt;AWS STS or Security Token Service, provides temporary access credentials to access any AWS resource. This temporary access can be requested by other AWS account, or a federated user in case of hybrid cloud environment who can be authenticated using SAML 2.0, Web identity provider. AWS STS works very closely with IAM Roles.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Security Token Service " src="https://www.archerimagine.com/images/aws/IAM/05-AWS-STS.png" title="AWS Made Easy | AWS STS, Security Token Service"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have seen in the previous topic on &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt;, some users and resource can assume a role, moreover an IAM Roles are like a hat which anyone can wear and gets its power. One important part of this should bother you, how does AWS authenticate such users, if the user is a genuine or not.&lt;/p&gt;
&lt;p&gt;AWS STS of Security token service plays an important part in enabling &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt;. When you are using a cross account resource or any federated users, you can also use AWS STS to provide temporary user credentials.&lt;/p&gt;
&lt;p&gt;AWS STS though can be used to support mobile application using AWS resources, but it is advised to use AWS cognitio, which will be discussed in the future.&lt;/p&gt;
&lt;p&gt;You will learn what is AWS STS, what are its benefits, when to use it. You will also learn to use a specific Action/API called &lt;code&gt;assumerole&lt;/code&gt; to get access to an AWS resource for an AWS cross account.&lt;/p&gt;
&lt;h2 id="aws-sts"&gt;AWS STS&lt;a class="headerlink" href="#aws-sts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS STS (Security token service) as the name suggest, provides a security token for accessing a AWS resources. You may think AWS STS as the provider of temporary access. &lt;/p&gt;
&lt;p&gt;AWS STS has these specific properties when assigning temporary access&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can range from few minutes to a few hours.&lt;/li&gt;
&lt;li&gt;Once the AWS STS provided temporary token expires, it cannot be reused at any point.&lt;/li&gt;
&lt;li&gt;You can invoke AWS STS only through AWS SDKs or AWS CLIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Properties " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-properties.png" title="AWS Made Easy | AWS STS, Properties"/&gt;&lt;/p&gt;
&lt;h3 id="benefits-of-aws-sts"&gt;Benefits of AWS STS&lt;a class="headerlink" href="#benefits-of-aws-sts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS STS solves a very specific problem for you, when you want someone to temporarily access your AWS resource without having concerns of revoking the permission.&lt;/p&gt;
&lt;p&gt;AWS STS provides a way to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should not embedded long term AWS security credentials into an application.&lt;/li&gt;
&lt;li&gt;You should not create extra IAM identities, using IAM roles with AWS STS is enough to satisfy the temporary access requirement.&lt;/li&gt;
&lt;li&gt;You do not have to worry about deactivating the AWS STS credentials, 36 hours is the maximum you can set the AWS STS expiry time depending on the API invoked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Benefits " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-Benefits.png" title="AWS Made Easy | AWS STS, Benefits"/&gt;&lt;/p&gt;
&lt;h3 id="when-to-use-aws-sts"&gt;When to use AWS STS&lt;a class="headerlink" href="#when-to-use-aws-sts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have now understood what is AWS STS, also what are the benefits of AWS STS. You might also have guessed the use cases for using AWS STS. Here if a breakdown for this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Hybrid Cloud setup, where you have to give access to the non AWS account holder. These methods are generally used for giving access to 3rd party&lt;ul&gt;
&lt;li&gt;SAML 2.0 Identity federation.&lt;/li&gt;
&lt;li&gt;Web Identity Federation. (Facebook, Github, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross Account roles, when you have to give your developer account a temporary access to your production account.&lt;/li&gt;
&lt;li&gt;IAM roles for AWS services.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, UseCase " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-UseCase.png" title="AWS Made Easy | AWS STS, UseCase"/&gt;&lt;/p&gt;
&lt;h3 id="aws-sts-actions"&gt;AWS STS Actions&lt;a class="headerlink" href="#aws-sts-actions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should learn about these five common AWS STS Actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssumeRole&lt;/code&gt; : This is used for getting cross account access.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; : This is using any 3rd party web IDP like Google or Facebook.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; : This is for hybrid cloud, where you have an entity with SAML 2.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetFederationToken&lt;/code&gt; : This is used by the AWS root account or any IAM user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetSessionToken&lt;/code&gt; : This is used by the AWS root account or any IAM user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a comparison for you on the above APIs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, API Comparison " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-API-Comparision.png" title="AWS Made Easy | AWS STS, API Comparison."/&gt;&lt;/p&gt;
&lt;h2 id="aws-sts-assumerole-action"&gt;AWS STS | AssumeRole Action&lt;a class="headerlink" href="#aws-sts-assumerole-action" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have the basic understanding of the different Action provided by AWS STS. Let's now try to use &lt;code&gt;AssumeRole&lt;/code&gt; API to understand how this works.&lt;/p&gt;
&lt;p&gt;Here is what you are going to try, or what we call a problem definition.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will have a user with no permission on the AWS Account. Now create an IAM Role, with AmazonS3FullAccess permission. Once you have the Role, edit the trust relationship to give ARN of the user which does not have any permission. Now using AWS Boto3 SDK you will make the user connect to AWS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A pictorial representation of the step to help you understand.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Cross Account AssumeRole" src="https://www.archerimagine.com/images/aws/IAM/Cross-Account-Role.png" title="AWS Made Easy | AWS STS, Cross Account AssumeRole"/&gt;&lt;/p&gt;
&lt;h3 id="aws-sts-create-role"&gt;AWS STS | Create Role&lt;a class="headerlink" href="#aws-sts-create-role" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have to follow all the steps mentioned in the article, &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html#how-to-create-an-aws-iam-role"&gt;IAM Roles&lt;/a&gt;. Once change would be this time we should select the &lt;strong&gt;Another AWS account&lt;/strong&gt; option. You may need to give the 12 digit account number.&lt;/p&gt;
&lt;p&gt;The above steps are the same we will use for cross account access. The steps will not change.&lt;/p&gt;
&lt;h3 id="aws-sts-change-the-trust-relationship"&gt;AWS STS | Change the trust relationship&lt;a class="headerlink" href="#aws-sts-change-the-trust-relationship" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you create the role like it is mentioned in the previous step, by default it will always point to the account root user, you have to change it to the ARN of the user you want to do a &lt;code&gt;AssumeRole&lt;/code&gt;. Here is how you can do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the role.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Trust Relationship&lt;/strong&gt; options, and select the &lt;em&gt;Edit trust relationship&lt;/em&gt; button.&lt;ul&gt;
&lt;li&gt;&lt;img alt="AWS Made Easy | AWS STS, STS | Edit Trust Relationship " src="https://www.archerimagine.com/images/aws/IAM/edit-trust-relationship.png" title="AWS Made Easy | AWS STS, Edit Trust Relationship"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This will open a JSON Editor and edit the JSON for this particular user shown below, esp. the Principal, AWS option.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"AWS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"arn:aws:iam::123456789012:user/Test"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"sts:AssumeRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"Condition"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might be thinking, if we have to edit this option every time we have to assign to a new user, then how is this scalable? &lt;/p&gt;
&lt;p&gt;The answer is, most of the time we will add a particular group with the IAM role attached and the required user is added or removed from the group to control the access.&lt;/p&gt;
&lt;h3 id="aws-sts-boto3-code-to-assumerole"&gt;AWS STS | BOTO3 code to  AssumeRole&lt;a class="headerlink" href="#aws-sts-boto3-code-to-assumerole" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now you have to write using the BOTO3 SDK provide for Python, the sample code to &lt;code&gt;AssumeRole&lt;/code&gt;. Here is the sample code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto3.session&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;

&lt;span class="c1"&gt;# Below is the ARN of the role.&lt;/span&gt;
&lt;span class="n"&gt;arn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"arn:aws:iam::123456789012:role/account-s3-full-access"&lt;/span&gt;
&lt;span class="n"&gt;session_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"example-role"&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sts"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;account_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_caller_identity&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;"Account"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Assume role takes the roles ARN and a sample session name&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assume_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RoleArn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;arn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoleSessionName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create an S3 resource that can access the account with the temporary credentials.&lt;/span&gt;
&lt;span class="n"&gt;temp_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Credentials"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Access the S3 as a resource passing the temporary credentials received from STS.&lt;/span&gt;
&lt;span class="n"&gt;s3_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"s3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"AccessKeyId"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"SecretAccessKey"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;aws_session_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"SessionToken"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Listing buckets for the assumed role's account:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s3_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you run the above code, you should be getting the list of S3 buckets in your account. Though the user did not have access initially.&lt;/p&gt;
&lt;h3 id="aws-sts-assumerole-return-parameters"&gt;AWS STS | AssumeRole | Return Parameters&lt;a class="headerlink" href="#aws-sts-assumerole-return-parameters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should be thinking what is returned by STS, here is the JSON response returned by calling &lt;code&gt;assume_role&lt;/code&gt; BOTO3 API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;"AssumedRoleUser"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;"Arn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:sts::123456789012:assumed-role/acc-s3-full-access/example-role"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"AssumedRoleId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"AROAUXRIFYXT7BG3ENQGE:example-role"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nt"&gt;"Credentials"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;"AccessKeyId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"ASIAUXRIFYXTUVPIQWFL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"Expiration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;datetime.datetime(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;3,20,9,24,27,&lt;/span&gt;&lt;span class="nt"&gt;"tzinfo=tzutc())"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"SecretAccessKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"BsXYZCGNuemA8wevm6CnYVfZtNgdGaoOCJ4VwXnf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"SessionToken"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"FwoGZXIvYXdzEEoaDFAVerghnmasN971Z76yKwAfJgq3tccU72Gj6Xl28zJwJIUS/UEEMtwYmxUDsplTKg0if/keQ9z1BdoPFdLsmDtUiWDnfvIkICUbCeVk+DKI4c9LtdIAXmhpssg4IAMncYFsmh+ylOdbbcud134TOkDkCtuZMkfKuUbIMG3lTq10k93DsiUFAoH5pqyLAa9IyqHUbKUxwwde0UAcUU1lNFMO/sTZI8kAIQNM4cpGMxdyPsYZaX5M1IGWqr2gPNLqLtKLvi1oIGMi33r+lP9GWX5W+Ich1MHUAfUfhgqIjXHjpmDQY5S0e/WOTBwrPLoorgXQlHMak="&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nt"&gt;"ResponseMetadata"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;"HTTPHeaders"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
         &lt;span class="nt"&gt;"content-length"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"1057"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"text/xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sat, 20 Mar 2021 08:24:27 GMT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;"x-amzn-requestid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"72f38158-1d90-4619-a431-5a2fcf460a31"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;"HTTPStatusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"RequestId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"72f38158-1d90-4619-a431-5a2fcf460a31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"RetryAttempts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should really be concerned about the &lt;code&gt;Credentials&lt;/code&gt; parameters which is returned. It basically provides 4 information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AccessKeyId : The access key id, which is always required for programmatic access.&lt;/li&gt;
&lt;li&gt;Expiration : Generally it is 15 min, but can vary depending on the type of API being called.&lt;/li&gt;
&lt;li&gt;SecretAccessKey : The secret access key, which is also generated only once.&lt;/li&gt;
&lt;li&gt;SessionToken : As the name suggests, a unique way of identifying the session.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might have now understood that &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt; and AWS STS have a symbiotic relationship. AWS STS is required when you need to provide these range of access.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cross account use case, ex. the developer account my need a temporary access to the production system.&lt;/li&gt;
&lt;li&gt;The Hybrid cloud use case, ex. On premise user, authenticated using SAML may need access to AWS resources.&lt;/li&gt;
&lt;li&gt;In Hybrid cloud use case and cross account use case, ex. Authenticating the user using the web identity providers.&lt;/li&gt;
&lt;li&gt;Sometimes IAM Services may need permission to another service, ex EC2 wants to write to a S3 bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above access is provided to you using the AWS STS because.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS STS provides short term credentials, which lives from a few minutes to some hours.&lt;/li&gt;
&lt;li&gt;We should not be bothered to revoke the access as you cannot reuse the expired access.&lt;/li&gt;
&lt;li&gt;AWS STS can be provided using the AWS SDKs or CLIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The real benefits of AWS STS are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need to embed long term credentials to the application.&lt;/li&gt;
&lt;li&gt;No need to create multiple identities for each access request.&lt;/li&gt;
&lt;li&gt;No need to revoke the access, as it expires automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The various actions provided by AWS STS are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssumeRole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetFederationToken&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetSessionToken&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we discussed &lt;code&gt;AssumeRole&lt;/code&gt; Action uses the cross account example, where you created an IAM role, edited the trust relationship and then the user assuming the role, by using the Boto3 SDKs. By doing this the IAM user from another account could access AWS resources for a short period of time.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AssumeRole&lt;/code&gt; returns these parameters when a call is made it &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AccessKeyId &lt;/li&gt;
&lt;li&gt;Expiration &lt;/li&gt;
&lt;li&gt;SecretAccessKey &lt;/li&gt;
&lt;li&gt;SessionToken &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might recognize it returns all the parameters created for IAM user having programmatic access, i.e. AccessKeyId and SecretAccessKey. In addition, we get the SessionToken and an expiration time.&lt;/p&gt;
&lt;p&gt;Please provide you feedback if you have any other use case for AWS STS.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/security/how-to-use-a-single-iam-user-to-easily-access-all-your-accounts-by-using-the-aws-cli/"&gt;How to Use a Single IAM User to Easily Access All Your Accounts by Using the AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devopslearning.medium.com/introduction-to-aws-security-token-service-sts-b3049aade3c1"&gt;Introduction to AWS Security Token Service(STS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-api.html"&gt;Switching to an IAM role (AWS API)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_aws-accounts.html"&gt;Providing access to an IAM user in another AWS account that you own &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html"&gt;Requesting temporary security credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-console.html"&gt;Switching to a role (console)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/DaisukeMiyamoto/2d9ed49dc7625adc41835beab7aad58e"&gt;Boto3 Python Gist &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>A foolproof guide to AWS IAM Roles</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html" rel="alternate"></link><published>2021-03-18T09:49:34+05:30</published><updated>2021-03-20T08:29:38+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-18:/articles/aws/aws-iam-roles.html</id><summary type="html">&lt;p&gt;When to create a IAM role and when to use a IAM User is always a confusing topic to master. You will learn through this piece the answer to this dilemma. You will learn when to create a IAM Roles, how to use the IAM Role, Uses of IAM roles. After learning this you will never be scratching your head for using IAM Roles.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Roles " src="https://www.archerimagine.com/images/aws/IAM/04-IAM-Roles.png" title="AWS Made Easy | IAM Roles"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The FaceLess Men in GoT (Games of Thrones), hope you remember this character, or Raven/Mystique in X-Men. They both share a common power, what would that be? &lt;/p&gt;
&lt;p&gt;The power to change identity as they wish to accomplish the task at hand. This is what IAM Roles do in a very broad sense.&lt;/p&gt;
&lt;p&gt;You can also think of IAM roles as the Invisibility Cloak in Harry Potter, who ever acquires it becomes invisible. &lt;/p&gt;
&lt;p&gt;IAM Roles are just like a hat, which anyone within AWS can wear, and get the powers presented by the hat, and loses the powers as soon as the hat is removed. The hat does not discriminate between real users or hardware like EC2, anyone can wear this hat.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | A Magical Hat " src="https://www.archerimagine.com/images/aws/IAM/laura-thonne-unsplash.jpg" title="AWS Made Easy | A Magical Hat"/&gt;&lt;/p&gt;
&lt;p&gt;You will also see how IAM Roles can be used, how it is created and attached. You will also see how IAM user is a different concept than IAM Role.&lt;/p&gt;
&lt;h2 id="iam-roles"&gt;IAM Roles&lt;a class="headerlink" href="#iam-roles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An IAM role is an identity that you can create having very specific permissions. The only difference being you are not associating this policy to any particular user or services at the time of creation. This IAM role can be assumed by anyone who needs it, be it a user or an AWS resource.&lt;/p&gt;
&lt;p&gt;You might be thinking, which problem does IAM role solve which a normal IAM user or a new IAM policy cannot solve. So lets understand why we need the use of IAM Role.&lt;/p&gt;
&lt;h3 id="iam-roles-for-user"&gt;IAM Roles for user&lt;a class="headerlink" href="#iam-roles-for-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you are creating a user in your own account, you cannot give them all the permission as explained in &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-introduction.html"&gt;IAM Introduction &lt;/a&gt;, the principle of least privileges. You cannot have one or multiple users will super user permissions, you cannot have Batman in every city, only Gotham. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | Batman " src="https://www.archerimagine.com/images/aws/IAM/ali-kokab-unsplash.jpg" title="AWS Made Easy | BatMan"/&gt;&lt;/p&gt;
&lt;p&gt;In addition, we can also have non AWS accounts, like cross account want to access your AWS services, or the federated user, who may also need access to the AWS services in case of Hybrid Cloud.&lt;/p&gt;
&lt;p&gt;You have to consider many other use-case along with the above two, for understanding we cannot keep on creating IAM Users to address such diverse range of permission request.&lt;/p&gt;
&lt;h3 id="iam-roles-for-aws-services"&gt;IAM Roles for AWS Services&lt;a class="headerlink" href="#iam-roles-for-aws-services" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might have already read about &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html"&gt;IAM Policy&lt;/a&gt;, AWS resources cannot have IAM policy attach directly. There is another good policy, AWS credentials should not be stored on EC2 instances.&lt;/p&gt;
&lt;p&gt;If you consider the above two guidelines, it will not be possible for any AWS services to communicate with other AWS services / resources to complete the work.&lt;/p&gt;
&lt;h3 id="iam-roles-to-the-rescue"&gt;IAM Roles to the rescue&lt;a class="headerlink" href="#iam-roles-to-the-rescue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you consider both the limitation of IAM User and AWS services, you can think we need some type of magic hat, which gives the sufficient power to both User or Service to execute the task it is elevated for. This is where magic happens with IAM Roles. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | Magic " src="https://www.archerimagine.com/images/aws/IAM/almos-bechtold-unsplash.jpg" title="AWS Made Easy | Magic"/&gt;&lt;/p&gt;
&lt;p&gt;You can use IAM Roles for:- &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One AWS service have to access another AWS service.&lt;ul&gt;
&lt;li&gt;Example: Application running on EC2 may need to access S3.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When you have a Hybrid Cloud implementation&lt;ul&gt;
&lt;li&gt;User from On Premise may want to access AWS Cloud infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EC2 can assume a role only at the time of creation, but once it has a role attached, you can modify it using APIs, CLIs or console at any time. You can attach only 1 role to EC2 at any given time.&lt;/p&gt;
&lt;h3 id="benefits-of-iam-role"&gt;Benefits of IAM Role&lt;a class="headerlink" href="#benefits-of-iam-role" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You may need people from Hybrid cloud implementation to access the AWS account, you may need IAM Roles to be attached once these users are authorized to use SAML or Active directory.&lt;/li&gt;
&lt;li&gt;You may have production and development account in AWS, and your development team may be required to be elevated to access a production account to fix a bug. This can be done using IAM Roles.&lt;/li&gt;
&lt;li&gt;You have an application running on an EC2 instance, It needs access to S3, this can be achieved using IAM Role.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-create-an-aws-iam-role"&gt;How to create an AWS IAM Role&lt;a class="headerlink" href="#how-to-create-an-aws-iam-role" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS IAM Role creation is a three step process.&lt;/p&gt;
&lt;h3 id="step-1-select-the-trusted-entity"&gt;Step 1 | Select the trusted entity&lt;a class="headerlink" href="#step-1-select-the-trusted-entity" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 1" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-01.png" title="AWS Made Easy | IAM Roles Creation | Step 1"/&gt;&lt;/p&gt;
&lt;p&gt;The first step guides you choose which services or identities can assume the role, your options are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Services&lt;ul&gt;
&lt;li&gt;The EC2 instance, lambda etc which needs access to other services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Another AWS account&lt;ul&gt;
&lt;li&gt;This is a cross account access, like a developer taking a production access etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Identity&lt;ul&gt;
&lt;li&gt;Using OIDC to validate user, like the mobile phone apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SAML 2.0 Federation&lt;ul&gt;
&lt;li&gt;Using office resources as authentication parameters, like using service Active Directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can select &lt;strong&gt;AWS Services&lt;/strong&gt; for this experimentation, You can attach this to an EC2 instance, so that it can access the S3.&lt;/p&gt;
&lt;h3 id="step-2-attach-permission-policy"&gt;Step 2 | Attach permission policy&lt;a class="headerlink" href="#step-2-attach-permission-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 2" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-02.png" title="AWS Made Easy | IAM Roles Creation | Step 2"/&gt; &lt;/p&gt;
&lt;p&gt;You can now select policy required to be attached, this step is same as the explained in &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html"&gt;IAM Policy&lt;/a&gt;. You have basically chosen from one of these 2 type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom policy, created using the visual editor or JSON editor.&lt;/li&gt;
&lt;li&gt;AWS managed Policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can select the &lt;strong&gt;AmazonS3ReadOnlyAccess&lt;/strong&gt; for attaching to EC2 instance as agreed in Step 1.&lt;/p&gt;
&lt;h3 id="step-3-review"&gt;Step 3 |  Review&lt;a class="headerlink" href="#step-3-review" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 3" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-03.png" title="AWS Made Easy | IAM Roles Creation | Step 3"/&gt; &lt;/p&gt;
&lt;p&gt;You have to provide these details to complete the IAM Role Creation process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Role Name&lt;ul&gt;
&lt;li&gt;An explicit name, which can be used to attached to the EC2 instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role description&lt;ul&gt;
&lt;li&gt;A description about the role.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trusted Entities&lt;ul&gt;
&lt;li&gt;This is the service selected from &lt;strong&gt;Step 1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Policies&lt;ul&gt;
&lt;li&gt;The policies attached, in this case &lt;strong&gt;AmazonS3ReadOnlyAccess&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-does-the-iam-roles-looks-after-creation"&gt;How does the IAM roles looks after creation?&lt;a class="headerlink" href="#how-does-the-iam-roles-looks-after-creation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 4" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-04.png" title="AWS Made Easy | IAM Roles Creation | Step 4"/&gt; &lt;/p&gt;
&lt;p&gt;You can see above, this is how an IAM Role looks like after creation. The policy document looks exactly same as an &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html"&gt;IAM Policy&lt;/a&gt;. This you can also assume as a baton in a relay race, the service or the user can run with the permission as soon as it gets the policy in the form of an IAM Role.&lt;/p&gt;
&lt;h2 id="iam-roles-vs-iam-users"&gt;IAM Roles Vs IAM Users&lt;a class="headerlink" href="#iam-roles-vs-iam-users" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Roles Vs User " src="https://www.archerimagine.com/images/aws/IAM/IAM-User-Vs-Role.png" title="AWS Made Easy | IAM Roles Vs User"/&gt;&lt;/p&gt;
&lt;p&gt;You should see &lt;a href="https://www.youtube.com/watch?v=VclOgMtBXN4"&gt;this &lt;/a&gt; video tutorial on YouTube. This video explains much better, also the flow chart shown above should also clear your doubts&lt;/p&gt;
&lt;p&gt;You can see the logic is elementary,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have a non living things, like EC2 etc., it gets an IAM Roles. No question asked.&lt;/li&gt;
&lt;li&gt;If it is a living thing, like a person, we have to ask two questions.&lt;ul&gt;
&lt;li&gt;If the permission is temporary then he gets an IAM Roles, else he is an IAM User.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope this clears your mind about the difference between two confusing terms.&lt;/p&gt;
&lt;h2 id="iam-roles-vs-iam-policy"&gt;IAM Roles Vs IAM Policy&lt;a class="headerlink" href="#iam-roles-vs-iam-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM Roles and IAM Policy both have a JSON document identifying the rule. The only difference is the mention of &lt;strong&gt;Trusted Entities&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might now be relieved by understanding the concept of IAM roles, as discussed we use IAM Roles for mainly three purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One AWS service using another service, like EC2 instance, wants to read from S3.&lt;/li&gt;
&lt;li&gt;In the hybrid environment, a non AWS user might need access to AWS resources temporarily.&lt;/li&gt;
&lt;li&gt;Cross account access, where a developer may need access to production account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should also think of an IAM Roles as a hat, which a person or services wears and it magically gets the permission and when it drops the hat, it comes back to original state.&lt;/p&gt;
&lt;p&gt;You also should think about EC2 instance, it should not store the IAM User credentials, they should be using the IAM Roles instead. The IAM Roles can be attached to an EC2 instance, during creation, and can be changed afterwards, but not attached after creation. You can attach only one IAM role to an EC2 instance and not multiple.&lt;/p&gt;
&lt;p&gt;You learned that IAM Role creation is a 3 step process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the trusted entity&lt;/li&gt;
&lt;li&gt;Attach permission policy&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The IAM Role has been just like IAM Policy document, a JSON document having statements.&lt;/p&gt;
&lt;p&gt;You can be confused with IAM Role and IAM User, we can simplify it, saying, if it is a resource we use an IAM Roles. If a physical user needs temporary access, it uses IAM Roles, otherwise it is an IAM User.&lt;/p&gt;
&lt;p&gt;You can comment and let me know if the IAM user is different than IAM Role.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Laura Thonne &lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@_alikokab_"&gt;Ali Kokab &lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@almosbech"&gt;Almos Bechtold &lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VclOgMtBXN4"&gt;AWS IAM Overview - It’s Surprisingly Simple - Users vs Roles &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>Global Infrastructure comparison of AWS, GCP and Azure. Updated 2020</title><link href="https://www.archerimagine.com/articles/aws/aws-global-Infrastructure.html" rel="alternate"></link><published>2021-03-17T11:05:44+05:30</published><updated>2021-03-17T20:06:58+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-17:/articles/aws/aws-global-Infrastructure.html</id><summary type="html">&lt;p&gt;Azure, AWS, and GCP are the front runner in providing Cloud technologies. As per 2020 Gartner Magic Quadrant for Cloud Infrastructure and Platform Services, AWS is the leader from last 10 years. How much is the difference between these service providers. How big is the reach of these? Do they differ between each other drastically or the difference is minuscule?&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Global Infrastructure |  AWS VS GCP VS Azure " src="https://www.archerimagine.com/images/aws/IAM/Global-Infrastructure-Comparision-01.png" title="Global Infrastructure"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS, Azure, GCP are the three largest cloud infrastructure providers. These three are already a big name within the technological space. These enterprises have a greater understanding of the technological space.&lt;/p&gt;
&lt;p&gt;You may be wondering what is the difference between these companies that offer cloud infrastructure?, what really sets these player apart? Can they not simply replicate in order to provide similar infrastructure and services?&lt;/p&gt;
&lt;p&gt;Let's us compare these Cloud Infrastructure provider with respect to just the infrastructure point of view, we will compare these on five broad terms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region&lt;/li&gt;
&lt;li&gt;Availability Zone&lt;/li&gt;
&lt;li&gt;Countries Served.&lt;/li&gt;
&lt;li&gt;Connecting to On Premise&lt;/li&gt;
&lt;li&gt;CDNs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data used for these comparisons are collected from the individual cloud provider's documentation. AWS and GCP had their data presented in straightforward fashion, Azure was little indirect, but tried consolidating the data for you in the best possible manner.&lt;/p&gt;
&lt;h2 id="region"&gt;Region&lt;a class="headerlink" href="#region" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the major Cloud Providers have their data centers, which host their core services across the planet to help you get the best reach. The region is a big differentiator for a lot of business to choose a Cloud Provider.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Region " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-Region.png" title="Global Infrastructure | Region"/&gt;&lt;/p&gt;
&lt;p&gt;The above picture depicts that Azure is a clear winner with almost double the number of regions from both its competitors. This decision to make Azure a clear winner is little in the Grey area.&lt;/p&gt;
&lt;p&gt;For example, if you have to run a dedicated cloud server out of China, you only have AWS and Azure as your option other than the local vendors. GCP won't be an option for you in China. &lt;/p&gt;
&lt;p&gt;Similarly for cloud operation in South Africa again, you are out of luck with Google.&lt;/p&gt;
&lt;p&gt;Azure has the highest density of the region among cloud providers, this helps in failover switching in case of a complete region going down, this is explained very beautifully for you in this &lt;a href="https://www.smikar.com/azure-vs-aws-iaas-resilience/"&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="availability-zone"&gt;Availability zone&lt;a class="headerlink" href="#availability-zone" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you are through the region, the number of actual physical data centers available in a region, called as Availability Zone, is your next decision making point.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Availability Zone " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-AZs.png" title="Global Infrastructure | Availability Zone"/&gt;&lt;/p&gt;
&lt;p&gt;The above graphs, clearly depicts that AWS and GCP are head to head and Azure is lagging behind. This will be the truth if you consider the above graph individually. &lt;/p&gt;
&lt;p&gt;When you see this data point along with the region data points, you can argue that all the cloud vendors are pretty tied up in these regards.&lt;/p&gt;
&lt;p&gt;Azure did announce its beta of AZs only in 2017, with that in mind it still has to catch-up, but till this point you will agree that the decision to opt for a particular cloud vendor based on geography is still not decisive.  &lt;/p&gt;
&lt;h2 id="countries-served"&gt;Countries Served&lt;a class="headerlink" href="#countries-served" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Counties served individually by the cloud vendors may not be a such great differentiator for the service, but if you reside or your customer resides in any such location then you are out of luck.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Countries " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-Countries.png" title="Global Infrastructure | Countries"/&gt;&lt;/p&gt;
&lt;p&gt;The above graph, clearly shows AWS as the winner, but even the others will be catching up. AWS will not have any more countries left to expand and these other vendors can easily catch-up if their intent to do so.&lt;/p&gt;
&lt;h2 id="direct-connect-vs-expressroute-vs-dedicated-interconnect"&gt;Direct Connect Vs ExpressRoute Vs Dedicated Interconnect&lt;a class="headerlink" href="#direct-connect-vs-expressroute-vs-dedicated-interconnect" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Direct Connect or Azure ExpressRoute or GCP's dedicated interconnect, is a way for you to connect your on-premise data center to AWS. This helps in reducing the cost to you and also avoids the open Internet for your private data. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Direct Connect " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-DirectConnect.png" title="Global Infrastructure | Direct Connect"/&gt;&lt;/p&gt;
&lt;p&gt;The above graphs shows Google as the winner, but as discussed there is not much difference with the other vendors. &lt;/p&gt;
&lt;p&gt;The above graphs also only considers the Direct Connect run by the vendors individually and not the partner data centers. When you consider the partners, then maybe the horizon may change.&lt;/p&gt;
&lt;h2 id="edgelocation-vs-edgezone"&gt;EdgeLocation Vs EdgeZone&lt;a class="headerlink" href="#edgelocation-vs-edgezone" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The CDNs, for making the content available to the user as close to his point of contact is a very important decision to make while choosing a cloud vendor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Edge Location " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-EdgeLocation.png" title="Global Infrastructure | Edge Location"/&gt;&lt;/p&gt;
&lt;p&gt;AWS is the winner again and that too with a big difference. This graph again considers only the vendor owned CDNs, the number may vary greatly if you include the partner's location.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The above depiction of five key infrastructure variable may not pursue you to a particular cloud vendor. &lt;/p&gt;
&lt;p&gt;Region and AZs can be a deciding factor, depending on where you want to run your data centers, but also you need to think that all regions are not created equals. As described in this &lt;a href="https://www.bmc.com/blogs/cloud-availability-regions-zones/"&gt;blog&lt;/a&gt;, there is a hardware difference between region. When you are deciding between vendors, check these parameters before deciding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geographic limitation for operations.&lt;/li&gt;
&lt;li&gt;Hardware type as per the region.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Countries Served is not a very important parameter to differentiate between the cloud vendors, as in the near future these may not be very important factor.&lt;/p&gt;
&lt;p&gt;Direct Connect and CDNs also cannot make an important factor if you consider the partner networks. &lt;/p&gt;
&lt;p&gt;This way you can be sure that just infrastructure cannot be the differentiator while choosing a Cloud vendors, until it is not because of geographic location of the server.&lt;/p&gt;
&lt;p&gt;There are other factors which come to play when you are deciding on a particular cloud provider, like the services provided, the pricing, ease of deployment, support provided and also expertise availability in your region. &lt;/p&gt;
&lt;p&gt;You have to take the holistic view while deciding on a particular cloud provider, even nowadays where the difference between cloud providers' services also matches, you can also opt for a multi cloud solution, choosing what is best from a particular cloud provider. &lt;/p&gt;
&lt;h2 id="info-graphics"&gt;Info graphics&lt;a class="headerlink" href="#info-graphics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Info Graphics " src="https://www.archerimagine.com/images/aws/IAM/Global Infrastructure-01.png" title="Global Infrastructure | Info Graphics"/&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.bmc.com/blogs/cloud-availability-regions-zones/"&gt;Availability Regions and Zones for AWS, Azure &amp;amp; GCP &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tutorialsdojo.com/google-cloud-global-infrastructure/"&gt;Google Cloud Global Infrastructure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://k21academy.com/microsoft-azure/az-104/az-104-region-availability-zone-availability-sets-and-fault-domainupdate-domain-in-microsoft-azure/"&gt;[AZ-104] Region, Availability Zone, Availability Sets and Fault Domain,Update Domain In Microsoft Azure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://build5nines.com/map-azure-regions/"&gt;Azure Regions Interactive Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smikar.com/azure-vs-aws-iaas-resilience/"&gt;IaaS Resilience, which cloud platform is better? Azure or AWS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt;Global Infrastructure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/about/locations"&gt;Google Cloud locations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/blog/introducing-azure-availability-zones-for-resiliency-and-high-availability/"&gt;Introducing Azure Availability Zones for resiliency and high availability &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we have discussion on the region, AZs, countries, direct connect and edge location above, what will you think is important factor when you are deciding on the cloud vendors, comment below and let me know? &lt;/p&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS Made Easy | IAM Users</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-users.html" rel="alternate"></link><published>2021-03-06T23:26:46+05:30</published><updated>2021-03-11T18:32:58+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-06:/articles/aws/aws-iam-users.html</id><summary type="html">&lt;p&gt;We have learned about IAM policy and its basics. We will apply those to a specific user here. We will also learn the various way s IAM users can get access to the AWS resources and also how can an IAM user rotate password.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users " src="https://www.archerimagine.com/images/aws/IAM/03-IAM-Users.png" title="AWS Made Easy | IAM Users"/&gt;&lt;/p&gt;
&lt;h2 id="iam-users"&gt;IAM Users&lt;a class="headerlink" href="#iam-users" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM users are an important AWS resources. This is the identity given to a physical user or application when he logs into AWS.&lt;/p&gt;
&lt;p&gt;AWS identifies an IAM user with these identifiers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Friendly user name: We provide an identifiable user name.&lt;/li&gt;
&lt;li&gt;ARN: An amazon resource name (ARN), &lt;/li&gt;
&lt;li&gt;Access ID: A unique identifier which is returned when working with SDKs or CLIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-users-user-permission"&gt;IAM Users | User Permission&lt;a class="headerlink" href="#iam-users-user-permission" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The default IAM User permission is &lt;strong&gt;non-explicit deny&lt;/strong&gt; for all AWS services. To provide the user access we can be provided explicit permission in one of these ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding a user to a group.&lt;/li&gt;
&lt;li&gt;Copying permission from another user.&lt;/li&gt;
&lt;li&gt;Attaching a policy directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-users-groups"&gt;IAM Users | Groups&lt;a class="headerlink" href="#iam-users-groups" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In an organization, it makes sense to group each department into a group and the assign users to these groups.&lt;/p&gt;
&lt;h3 id="iam-users-arn"&gt;IAM Users | ARN&lt;a class="headerlink" href="#iam-users-arn" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ARN (Amazon resource name), is specified in this format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;arn:aws:iam:&amp;lt;region&amp;gt;:&amp;lt;account_id&amp;gt;:user/admin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the IAM user ARN is like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;arn:aws:iam::&amp;lt;account_id&amp;gt;:user/admin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;region&amp;gt;&lt;/code&gt; is missing in a IAM user ARN, as IAM is a global service.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;user/admin&lt;/code&gt; defines the actual resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="iam-users-create-a-new-user"&gt;IAM Users | Create a new user.&lt;a class="headerlink" href="#iam-users-create-a-new-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM user creation is a 5 step process.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps" src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps.png" title="AWS Made Easy | IAM Users creation steps"/&gt;&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-1-add-user"&gt;IAM Users | Creation | Step 1 | Add user&lt;a class="headerlink" href="#iam-users-creation-step-1-add-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first step in the IAM User creation process is: Add user.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, add user" src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-01-add-user.png" title="AWS Made Easy | IAM Users creation steps, add user"/&gt;&lt;/p&gt;
&lt;p&gt;We have to fill a few of the fields. Lets understand these fields.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set user details &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We should provide the user name for the IAM user, mostly a friendly name.&lt;/li&gt;
&lt;li&gt;We can add multiple user in this step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select AWS access type: There are two ways for the user to access AWS resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programmatic Access : This is to generate the access key ID and secret access key for AWS CLIs, SDKs and other development tools.&lt;/li&gt;
&lt;li&gt;AWS management console access : Creates a user who can log into the AWS console using a password.&lt;ul&gt;
&lt;li&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, programmatic access" src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-02-console-access.png" title="AWS Made Easy | IAM Users creation steps, programmatic access"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can mix and match the programmatic access and also management console access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-users-creation-step-2-set-permissions"&gt;IAM Users | Creation | Step 2 | Set Permissions&lt;a class="headerlink" href="#iam-users-creation-step-2-set-permissions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step in user creation is to set permissions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, set permissions " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-03-set-permissions.png" title="AWS Made Easy | IAM Users creation steps, set permissions"/&gt;&lt;/p&gt;
&lt;p&gt;There are 3 ways to add permissions to a user.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add user to a group.&lt;ul&gt;
&lt;li&gt;Add the new user to a group based on the job function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy permission from existing users.&lt;ul&gt;
&lt;li&gt;If we have existing user, we can copy policy for that user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attach existing policies directly.&lt;ul&gt;
&lt;li&gt;We can singularly attach a multiple policy to a user directly, both AWS managed and customer managed. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most efficient way to add permission to a group of user is to add the user to a group.&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-3-add-tags"&gt;IAM Users | Creation | Step 3 | Add Tags&lt;a class="headerlink" href="#iam-users-creation-step-3-add-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, add tags " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-04-add-tags.png" title="AWS Made Easy | IAM Users creation steps, add tags"/&gt;&lt;/p&gt;
&lt;p&gt;Tags are an important component in all service creation. We can assign a key/value pair to manage user efficiently.&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-4-review"&gt;IAM Users | Creation | Step 4 | Review&lt;a class="headerlink" href="#iam-users-creation-step-4-review" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, review " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-05-review.png" title="AWS Made Easy | IAM Users creation steps, review"/&gt;&lt;/p&gt;
&lt;p&gt;The penultimate steps of user creation is to review the configuration we have provided. As show in the screen shot above, it displays all the configuration selected till now based on which the user will be created.&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-5-success"&gt;IAM Users | Creation | Step 5 | Success&lt;a class="headerlink" href="#iam-users-creation-step-5-success" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, success " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-06-success.png" title="AWS Made Easy | IAM Users creation steps, success"/&gt;&lt;/p&gt;
&lt;p&gt;In the last step of user creation it has given these options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download csv&lt;ul&gt;
&lt;li&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, download csv  " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-07-download-csv.png" title="AWS Made Easy | IAM Users creation steps, download csv"/&gt;&lt;/li&gt;
&lt;li&gt;This CSV gives these details&lt;ul&gt;
&lt;li&gt;User Name&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;Access Key ID&lt;/li&gt;
&lt;li&gt;Secret access key&lt;ul&gt;
&lt;li&gt;These two are provided when we have the programmatic access enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Console login link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This is the only time we get the Secret access key along with the access key ID, there is no way to recreate the same secret access key again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We also got the some of the above information displayed accordingly the way the user was created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="iam-user-properties"&gt;IAM User Properties&lt;a class="headerlink" href="#iam-user-properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lets see a few of the properties displayed for the user in the AWS IAM dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users summary  " src="https://www.archerimagine.com/images/aws/IAM/iam-user-summary-01.png" title="AWS Made Easy | IAM Users summary"/&gt;&lt;/p&gt;
&lt;p&gt;The above screen shot shows that the IAM user summary / property can be grouped into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permissions&lt;/li&gt;
&lt;li&gt;Groups&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Security Credentials&lt;/li&gt;
&lt;li&gt;Access Advisor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the above group, the most important to consider is Security credentials.&lt;/p&gt;
&lt;h3 id="permissions"&gt;Permissions&lt;a class="headerlink" href="#permissions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above screen shot clearly depicts, this property displays the permission present to the user. In the above case, the user gets 2 IAM policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attached directly.&lt;ul&gt;
&lt;li&gt;The IAMUserChangePassword is the policy applied directly to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attached from group.&lt;ul&gt;
&lt;li&gt;The Administrator access is attached via the Group.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="groups-tags"&gt;Groups &amp;amp; Tags&lt;a class="headerlink" href="#groups-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This property depicts the groups and the tags associated with the user.&lt;/p&gt;
&lt;h3 id="access-advisor"&gt;Access Advisor&lt;a class="headerlink" href="#access-advisor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users Access Advisor " src="https://www.archerimagine.com/images/aws/IAM/iam-user-summary-02.png" title="AWS Made Easy | IAM Users Access Advisor"/&gt;&lt;/p&gt;
&lt;p&gt;There is always a need as an administrator to review user behavior in AWS like the number of services used, the frequency in which it is used. In the Access Advisor tab, IAM provides this information about the user, and helps in identifying the unused permissions.&lt;/p&gt;
&lt;h3 id="security-credentials"&gt;Security Credentials&lt;a class="headerlink" href="#security-credentials" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users security credentials " src="https://www.archerimagine.com/images/aws/IAM/iam-user-summary-03.png" title="AWS Made Easy | IAM Users security credentials"/&gt;&lt;/p&gt;
&lt;p&gt;The major section of security credentials are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sign-in credentials&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Provides with link to console sign-in link&lt;/li&gt;
&lt;li&gt;Console password: is it enabled or not&lt;/li&gt;
&lt;li&gt;Assigned MFA device: Is the device assigned or not&lt;/li&gt;
&lt;li&gt;Signing certificate: We can upload any specific X.509 certificate for use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Keys&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The keys to make programmatic calls to AWS by CLI, SDKs, API calls.&lt;/li&gt;
&lt;li&gt;We can even create an access key from here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH Keys for AWS code commit&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;SSH public key to access AWS code commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTPS Git credentials for AWS code commit&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;User name and password to access AWS code commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credentials for Amazon keyspaces.&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;User name and password to access Amazon Keyspaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The AWS IAM user is anybody who will use the login credentials or the programmatic access to AWS. Each IAM user can easily be identified using a friendly name, or a unique ARN or an Access ID. The IAM user can get permission by getting itself attached to a group, or having the policy attached directly or copying from an existing user. Providing permission by adding them to a group is the best IAM policy.&lt;/p&gt;
&lt;p&gt;AWS IAM user creation is a 5 step process, but the important steps are only 2, the first one has given a user name to the user, along with the type of access it needs. This is followed by, adding permission to the user, which can be done by attaching it to a group or copying from an existing user or by attaching the policy directly.&lt;/p&gt;
&lt;p&gt;The AWS IAM user has specific properties like permission which it has and from where it got the permission, like attached directly or received it from a group. There is a specific property called Access Advisor, which an administrator can use to review if the user is regularly using the permissions or not and depending on that can review to keep the permission or remove it. AWS IAM users also have a property called security credentials, which tells if the user has a password or not and also if MFA is enabled or not, we can also see the access ID but not the key, and we can add the ssh keys for code commit.&lt;/p&gt;
&lt;p&gt;Each action done on AWS is done by some type of user. &lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.amazonaws.cn/en_us/IAM/latest/UserGuide/introduction.html"&gt;AWS Docs | What is IAM? &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS Made Easy | IAM Policy</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html" rel="alternate"></link><published>2021-03-03T10:31:40+05:30</published><updated>2021-03-08T09:40:24+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-03:/articles/aws/aws-iam-policy.html</id><summary type="html">&lt;p&gt;When we want to give access to various resources to AWS, how do we do it, how do we define the various ways a user can get access. These are parameters are defined in a JSON document called IAM Policy. We will learn about this in this blog.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Policy " src="https://www.archerimagine.com/images/aws/IAM/02-IAM-Policy.png" title="AWS Made Easy | IAM Policy"/&gt;&lt;/p&gt;
&lt;h2 id="iam-policy"&gt;IAM Policy&lt;a class="headerlink" href="#iam-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A document which provides the details of the permission granted to access any AWS resources is called an &lt;strong&gt;IAM Policy.&lt;/strong&gt; The default policy applied to all AWS users is &lt;strong&gt;non explicit deny&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;The IAM Policy takes effect as soon it is attached to a user or group, there is no delay in its application. 
The User &amp;amp; Groups can have more than 1 policy attached at any given time. 
Roles are utilized because we cannot attach policy directly to AWS resources.&lt;/p&gt;
&lt;h3 id="iam-policy-document"&gt;IAM Policy Document&lt;a class="headerlink" href="#iam-policy-document" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How does an IAM Policy look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above is an example of an IAM Policy&lt;/p&gt;
&lt;p&gt;If we observe closely, these are the various important points to note about the IAM Policy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statement&lt;ul&gt;
&lt;li&gt;Each IAM policy is composed of &lt;strong&gt;statements&lt;/strong&gt;. Policy can have one or more statements. In the above example, there is only 1 statement, composed of&lt;/li&gt;
&lt;li&gt;Effect&lt;ul&gt;
&lt;li&gt;It tells if the impact is allowed or deny. It takes these 2 values. In the above example, it is &lt;strong&gt;Allow&lt;/strong&gt; for all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Action&lt;ul&gt;
&lt;li&gt;What type of action is allowed or denied. We can drill it down to single API also, which we will see later. In the above example, it is allowing all actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource&lt;ul&gt;
&lt;li&gt;Which resource are being accessed using the policy. Like in case of S3, it can mention the resource is a S3 bucket, not the full S3. In the above example, all the resources are being granted access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="explicit-allow-explicit-deny"&gt;Explicit Allow &amp;amp; Explicit deny&lt;a class="headerlink" href="#explicit-allow-explicit-deny" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When granting access explicitly we have 2 categories of IAM Policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicit Allow&lt;/li&gt;
&lt;li&gt;Explicit Deny&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a user has both explicit allow and explicit deny, then the explicit deny always take precedence. In all cases just remember deny is the best way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example of explicit allow&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Example of explicit deny&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Deny"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="iam-policy-templates"&gt;IAM Policy Templates&lt;a class="headerlink" href="#iam-policy-templates" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can have an IAM policy in two ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre-Built Policy&lt;/li&gt;
&lt;li&gt;Custom Policy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pre-built-policy"&gt;Pre-Built Policy&lt;a class="headerlink" href="#pre-built-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;These are the policies provided by AWS to all the users. We can just pick and use which ever we like.&lt;/li&gt;
&lt;li&gt;These policies are identified with an Amazon logo just next to them.
&lt;img alt="AWS Made Easy | AWS managed IAM Policy " src="https://www.archerimagine.com/images/aws/IAM/02-aws-managed-policy.png" title="AWS Made Easy | AWS managed IAM Policy"/&gt;&lt;ul&gt;
&lt;li&gt;Most commonly used pre-build polices are  &lt;ul&gt;
&lt;li&gt;Administrator Access&lt;/li&gt;
&lt;li&gt;Power User Access&lt;/li&gt;
&lt;li&gt;Read-Only Access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="administrator-access"&gt;Administrator Access&lt;a class="headerlink" href="#administrator-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Administrator Access: Full Access to all AWS resources.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="power-user-access"&gt;Power User Access&lt;a class="headerlink" href="#power-user-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Admin Access, except it does not allow user-group management. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"NotAction"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"organizations:*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"account:*"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:CreateServiceLinkedRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:DeleteServiceLinkedRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:ListRoles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"organizations:DescribeOrganization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"account:ListRegions"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="read-only-access"&gt;Read-Only Access&lt;a class="headerlink" href="#read-only-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Only View AWS resources. This policy is very big, please search for it in AWS.
    - The AWS managed policies cannot be edited, they are read only.&lt;/p&gt;
&lt;h3 id="custom-policy"&gt;Custom Policy&lt;a class="headerlink" href="#custom-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some time the requirements of a policy cannot be fulfilled from an AWS managed policy. We have to use a custom policy in those cases. &lt;/li&gt;
&lt;li&gt;We can import the pre-built policy into our own, and then modify them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="custom-iam-policy-generation"&gt;Custom IAM Policy Generation&lt;a class="headerlink" href="#custom-iam-policy-generation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to AWS provided policy, user can also create custom policy. We have 2 methods to create custom policy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Editor&lt;/li&gt;
&lt;li&gt;JSON Editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-editor"&gt;Visual Editor&lt;a class="headerlink" href="#visual-editor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The are 4 selections, we have to do for creating a policy, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS create IAM Policy " src="https://www.archerimagine.com/images/aws/IAM/02-create-policy.png" title="AWS Made Easy | AWS create IAM Policy"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service&lt;ul&gt;
&lt;li&gt;Choose a service like, IAM, S3, EC2 on which the policy is applicable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actions&lt;ul&gt;
&lt;li&gt;Based on the service selected, we can choose the Actions, which can be associated with it.&lt;/li&gt;
&lt;li&gt;Primarily the actions are&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Read&lt;/li&gt;
&lt;li&gt;Tagging&lt;/li&gt;
&lt;li&gt;Write&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Certain service have certain extra Actions associated with itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resources&lt;ul&gt;
&lt;li&gt;We can restrict the Actions allowed on Services selected to specific resources. &lt;/li&gt;
&lt;li&gt;We may not have to provide the full access.&lt;/li&gt;
&lt;li&gt;The access can be restricted to even a particular ARN.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Request Conditions&lt;ul&gt;
&lt;li&gt;The policy can also specify if the &lt;ul&gt;
&lt;li&gt;MFA is required for the access&lt;/li&gt;
&lt;li&gt;Only a particular public IP should be &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We also restrict using the time or the day and various other parameters.&lt;/li&gt;
&lt;li&gt;All the conditions if selected is &lt;strong&gt;AND&lt;/strong&gt;ed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also take a easy way out, by &lt;strong&gt;"Import Managed Policy"&lt;/strong&gt; and then modifying it to our need.&lt;/p&gt;
&lt;p&gt;After selecting the above information we are only left with providing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tags &lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="json-editor"&gt;JSON Editor&lt;a class="headerlink" href="#json-editor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can use JSON editor if we understand the JSON syntax, and the format in which AWS wants the KEY/Value pairs. We can also import an existing policy and then edit the JSON.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To summarize, IAM policy is a document representing the permission encapsulated inside for a USER or a Role. &lt;/p&gt;
&lt;p&gt;The default policy on IAM is non explicit deny, but though IAM we can give either an explicit deny or an explicit allow. The explicit deny always takes precedence over any explicit allow.&lt;/p&gt;
&lt;p&gt;IAM policy are categorized into either managed by AWS, or user created. There are many AWS managed policy and the most useful once are Administrator policy, Power user policy and Read Only Policy.&lt;/p&gt;
&lt;p&gt;The IAM policy is a JSON statement, and having these 3 statement at the minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Effect&lt;/li&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IAM policy can be created by using the custom visual editor or the IAM JSON editor. Generally for new users the visual editor is beneficial once the user becomes comfortable, we can change to JSON editor.&lt;/p&gt;
&lt;p&gt;Multiple policy can be applied to Groups and Users. Roles are used for AWS resources.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create-console.html#access_policies_create-visual-editor"&gt;Creating IAM policies (console)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS Made Easy | IAM Introduction</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-introduction.html" rel="alternate"></link><published>2021-02-17T00:25:36+05:30</published><updated>2021-03-02T10:13:09+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-02-17:/articles/aws/aws-iam-introduction.html</id><summary type="html">&lt;p&gt;In this blog let us understand the basics of IAM, Identity and access Management. This is service which is used to control access to all the resource in AWS. The key component of IAM are User, Groups, Policy, Roles, API keys.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Introduction " src="https://www.archerimagine.com/images/aws/IAM/AWS-made-easy-iam.png" title="AWS Made Easy | IAM Introduction"/&gt;&lt;/p&gt;
&lt;h2 id="iam-introduction"&gt;IAM Introduction&lt;a class="headerlink" href="#iam-introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM provides the interface to join the great world of AWS. Its major goal is to provide both human and computer, who are the consumers of AWS services a way to access them.&lt;/p&gt;
&lt;h3 id="iam-components"&gt;IAM Components&lt;a class="headerlink" href="#iam-components" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;IAM service have five(5) components:- &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User - The user of AWS resource, can be a person or a machine  &lt;/li&gt;
&lt;li&gt;Groups - The above user can be grouped together  &lt;/li&gt;
&lt;li&gt;Policy - It defines the permission of the IAM identity.  &lt;/li&gt;
&lt;li&gt;Roles - A roles are just a policy, but not associated with the Users directly.  &lt;/li&gt;
&lt;li&gt;API Keys - The keys used to programmatically accessing the AWS console.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-property"&gt;IAM property&lt;a class="headerlink" href="#iam-property" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS works on two very important principles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Principle of least privilege.  &lt;ul&gt;
&lt;li&gt;Any user, group must be granted minimum permission to complete the activity.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non explicit deny rule.  &lt;ul&gt;
&lt;li&gt;We are new user have no explicit allow rule for a resource, AWS assumes it to be access denied.  &lt;/li&gt;
&lt;li&gt;Only an explicit allow can override a non explicit deny rule.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="admin-vs-root-user"&gt;Admin Vs root User&lt;a class="headerlink" href="#admin-vs-root-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="root-user"&gt;root user&lt;a class="headerlink" href="#root-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the very first user which is created when we sign-up for AWS using our emailID. This user has god like access and is not under the control of IAM.&lt;/p&gt;
&lt;p&gt;This login must never be used for daily activities within AWS.&lt;/p&gt;
&lt;p&gt;These 5 steps should be done as soon as we login to AWS root account.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delete the root access keys.&lt;/li&gt;
&lt;li&gt;Enable MFA&lt;/li&gt;
&lt;li&gt;Create user&lt;/li&gt;
&lt;li&gt;Create groups and assign user to groups&lt;/li&gt;
&lt;li&gt;Apply an IAM password policy&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="admin-user"&gt;Admin user&lt;a class="headerlink" href="#admin-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can create a copy of the root user with complete admin access. This is the &lt;em&gt;Admin&lt;/em&gt; user. This is user comes under the purview of IAM and should be used as a daily driver in AWS.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we login to the AWS console for the first time we create the &lt;em&gt;root&lt;/em&gt; user, this is the god like user which has all the access and have no control via the IAM policies. This user is not supposed to be used for day to day activity, in place we should be using another user called &lt;em&gt;admin&lt;/em&gt; which has all the policies similar to &lt;em&gt;root&lt;/em&gt; user but is controlled via IAM.&lt;/p&gt;
&lt;p&gt;There are a few important steps to perform as soon as we login to the AWS console for the first time, which is to delete the programmatic access key for the root user followed by creation of users and groups. The policy to be attached to groups and user can be part of groups. There also should be a password policy specified for the users.&lt;/p&gt;
&lt;p&gt;AWS works on 2 important principle, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Principle of least privilege &lt;/li&gt;
&lt;li&gt;Non explicit deny rule&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that, all the user should be provided the bare minimum of the access required to get the job done, and if not specified, by default the user does not have access to any resources on AWS.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS - Shared Responsibility &amp; Global Infrastructure.</title><link href="https://www.archerimagine.com/articles/aws/general-aws.html" rel="alternate"></link><published>2021-02-12T21:19:02+05:30</published><updated>2021-03-15T00:13:49+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-02-12:/articles/aws/general-aws.html</id><summary type="html">&lt;p&gt;AWS is very vast in its present form, understanding it would be very challenging. We will being this journey at the epicenter of AWS, the Shared responsibility model and its global infrastructure.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS made easy | IAM " src="https://www.archerimagine.com/images/aws/IAM/AWS-made-easy-iam.png" title="AWS made easy | IAM"/&gt;&lt;/p&gt;
&lt;h2 id="aws-global-infrastructure"&gt;AWS - Global Infrastructure&lt;a class="headerlink" href="#aws-global-infrastructure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS is a cloud infrastructure provider, it's a pioneer in this field. Cloud and AWS have become synonyms, it would be difficult for a developer today to be unaware of AWS or cloud in general. This blog is an effort of mine to present this vast and ever expanding concept into very easy and fun method.&lt;/p&gt;
&lt;p&gt;Learning new concepts in their 40's is very difficult, would try to make it as easy as possible for anyone want to embark on this journey.&lt;/p&gt;
&lt;p&gt;AWS/Cloud has become an indispensable part of the Software industry due to a few of these important properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Global Deployment&lt;/li&gt;
&lt;li&gt;Millisecond Latency &lt;/li&gt;
&lt;li&gt;Commission and decommission at will&lt;/li&gt;
&lt;li&gt;Pay as you use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if core AWS services are not available in certain location, it still uses different non AWS services to enable developer to relax and focus on developing great software.&lt;/p&gt;
&lt;h3 id="user-type"&gt;User Type&lt;a class="headerlink" href="#user-type" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are 2 types of AWS users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root user&lt;ul&gt;
&lt;li&gt;The user which is created when we first become an AWS consumer by signing in.&lt;/li&gt;
&lt;li&gt;This user has God like permission, and is not governed by IAM rules.&lt;/li&gt;
&lt;li&gt;It is not safe to use this user for day to day activity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Administrator user &lt;ul&gt;
&lt;li&gt;This is the user which is created though the IAM.&lt;/li&gt;
&lt;li&gt;This controls the management of other user.&lt;/li&gt;
&lt;li&gt;This is the user which should be used for daily activity.&lt;/li&gt;
&lt;li&gt;It has all the access just like root user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="best-practices"&gt;Best Practices&lt;a class="headerlink" href="#best-practices" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Always enable MFA for all users.&lt;/li&gt;
&lt;li&gt;Have an explicit password policy. i.e. expiry of password.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="connection-type"&gt;Connection Type&lt;a class="headerlink" href="#connection-type" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are 3 ways to connect to AWS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Console&lt;ul&gt;
&lt;li&gt;The default mode, which we all use.&lt;/li&gt;
&lt;li&gt;This is the website for AWS, which can do pretty much all the stuff possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS SDKs &lt;ul&gt;
&lt;li&gt;These are  developers to make use of all the AWS resources while developing the application.&lt;/li&gt;
&lt;li&gt;Major programming languages are supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS CLIs&lt;ul&gt;
&lt;li&gt;This use command line interface to control the AWS infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="service-location"&gt;Service Location&lt;a class="headerlink" href="#service-location" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS hosts its service in two types of location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Edge Location&lt;ul&gt;
&lt;li&gt;These does not host any specific AWS service.&lt;/li&gt;
&lt;li&gt;These hosts only CDN or CloudFront.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS region&lt;ul&gt;
&lt;li&gt;These are the real AWS data centers, which host all AWS services.&lt;/li&gt;
&lt;li&gt;Each region is further divided into an Availability Zone (AZs).&lt;/li&gt;
&lt;li&gt;AZs are created to provide fault tolerance and high availability.&lt;/li&gt;
&lt;li&gt;Most services are region specific, which means all the AZs will have that service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="aws-shared-responsibility-model"&gt;AWS - Shared Responsibility Model&lt;a class="headerlink" href="#aws-shared-responsibility-model" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS provides us with the bare metal infrastructure for running our application on their server. This does not imply that outside our application code, we can rely only on AWS.&lt;/p&gt;
&lt;p&gt;AWS and us as a user work in a shared responsibility model, wherein, we have a certain responsibility and AWS has certain, and AWS is willing to shoulder certain responsibility with increased cost.&lt;/p&gt;
&lt;p&gt;AWS's responsibility is broadly related to the physical server's like, physical security, personnel security, discarding the storage devices, DDoS protection, and hyper visor isolation.&lt;/p&gt;
&lt;p&gt;User's responsibility is mostly towards their application like, proper security groups, IAM, MFA, OS patches and VPCs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Shared Responsibility Model " src="https://www.archerimagine.com/images/aws/IAM/Shared_Responsibility_Model_V2.jpg" title="AWS Shared Responsibility Model"/&gt;&lt;/p&gt;
&lt;h3 id="compute-services"&gt;Compute Services&lt;a class="headerlink" href="#compute-services" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The major compute services provided by AWS are.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elastic Compute Cloud (EC2)&lt;/li&gt;
&lt;li&gt;Elastic Container service (ECS)&lt;/li&gt;
&lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;li&gt;Elastic BeanStalk&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the above 4, the user has the maximum control of configuration on EC2 as its bare metal server, with some services running. Lambda and Beanstalk provide the minimum configuration  user and most of them are managed by AWS.&lt;/p&gt;
&lt;h3 id="storage-service"&gt;Storage Service&lt;a class="headerlink" href="#storage-service" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just like computer the major storage service provided by AWS are
* RDS
    - SQL database.
* DynamoDB
    - No SQL database
* RedShift
    - Data Warehousing
* ElastiCache
    - In memory Cache.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS is a global infrastructure, it has to serve both its developer and consumer with great efficiency and low latency. This is the reason the AWS has its core services spread across the globe called the AWS region. It also has its edge location spread across the globe to serve the consumer.&lt;/p&gt;
&lt;p&gt;AWS region is subdivided into availability zones (AZs), which helps to provide high reliability and are connected to each other via a very low latency fiber optic. When an AWS service is mentioned to be region specific, it implies that it is available in all the AZs.&lt;/p&gt;
&lt;p&gt;There are two types of an Administrator user of AWS service. The first is the &lt;em&gt;root&lt;/em&gt; user which has infinite God like permission and is not controlled via the IAM. There is also a &lt;em&gt;admin&lt;/em&gt; user which we create from IAM. The &lt;em&gt;admin&lt;/em&gt; user have all the permission like the &lt;em&gt;root&lt;/em&gt; user, its is just that it was created by IAM.&lt;/p&gt;
&lt;p&gt;The user &lt;em&gt;admin&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; both should have MFA enabled and also have a password policy associated with it.&lt;/p&gt;
&lt;p&gt;The AWS services can be accessed using 3 methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Console&lt;/li&gt;
&lt;li&gt;AWS SDKs&lt;/li&gt;
&lt;li&gt;AWS CLIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the above will use the AWS APIs to connect with the core services. AWS Console is what every start using first and once becoming comfortable they rely on only SDKs or the CLIs.&lt;/p&gt;
&lt;p&gt;AWS has a shared responsibility with the users, where AWS manages most of the physical security and the server management like DDoS protection and HyperVisor isolation, the user is entrusted with the responsibility of managing the software securities like IAM, MFA, OS Patches, Security groups etc.&lt;/p&gt;
&lt;h2 id="what-is-the-difference-between-the-aws-region-and-aws-edge-location"&gt;What is the difference between the AWS Region and AWS Edge Location?&lt;a class="headerlink" href="#what-is-the-difference-between-the-aws-region-and-aws-edge-location" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When explaining the AWS Global Infrastructure these 3 Keywords are often used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region&lt;/li&gt;
&lt;li&gt;Availability Zone (AZs)&lt;/li&gt;
&lt;li&gt;Edge Location&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the above are key pieces of the AWS Infrastructure, but to understand the fundamental difference we have seen these with a different perspective.&lt;/p&gt;
&lt;p&gt;The above are divided based on&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User of the content present &lt;strong&gt;on&lt;/strong&gt; AWS (End User)&lt;/li&gt;
&lt;li&gt;User of the content provider &lt;strong&gt;to&lt;/strong&gt; AWS (Developer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Region and AZs as already explained are Developer focused, as a result, they are very few and have to adhere to the highest standard of scrutiny.
Edge Location on the other hand, are User focused, Like CDN, Global Accelerator etc., their job is to make the content reach to and fro from the user faster, reduce the latency. As a result are far too many and spread across the world where it can serve its user better.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@eberhardgross"&gt;Eberhard Grossgasteiger &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/cloud-technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt; Global Infrastructure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/compliance/shared-responsibility-model/"&gt;Shared Responsibility Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="info-graphics"&gt;Info-graphics&lt;a class="headerlink" href="#info-graphics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Global Infrastructure " src="https://www.archerimagine.com/images/aws/IAM/AWS-Global-Infra-01.png" title="AWS Global Infrastructure"/&gt;&lt;/p&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry></feed>