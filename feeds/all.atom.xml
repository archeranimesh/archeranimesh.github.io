<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Archer Imagine</title><link href="http://archerimagine.com/" rel="alternate"></link><link href="http://archerimagine.com/feeds/all.atom.xml" rel="self"></link><id>http://archerimagine.com/</id><updated>2019-06-26T22:57:19+05:30</updated><entry><title>100Days of Code Log File 3rd Attempt</title><link href="http://archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_3_0.html" rel="alternate"></link><published>2019-06-05T22:29:49+05:30</published><updated>2019-06-26T22:57:19+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-06-05:/articles/100daysofcode-python/100Days-of-code-log-file_V_3_0.html</id><summary type="html">&lt;p&gt;This is 3rd attempt at completing the #100DaysOfCode. Hope to be consistent longer this time.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="http://archerimagine.com/images/100DaysOfCode/quote_fancy_01.jpg" title="If we fail, let us try again and again until we succeed, by Joseph Chamberlain"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic third coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="http://archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html" title="Second attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Selected the resource in advance, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/python/"&gt;FrontEndMasters | Python Fundamentals | Nina Zakharenko &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete first 21 Days first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-18-wednesday-june-262019"&gt;Day 18 | Wednesday June 26,2019&lt;a class="headerlink" href="#day-18-wednesday-june-262019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about the list slice.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;my_list[0:3&lt;/code&gt; : Returns 0 - 2nd index&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_list[:]&lt;/code&gt; : clone the entire list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_list[-1]&lt;/code&gt; : Special way to get the last item.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="List Slice. " src="http://archerimagine.com/images/100DaysOfCode/list_04.png" title="List Slice"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-17-tuesday-june-252019"&gt;Day 17 | Tuesday June 25,2019&lt;a class="headerlink" href="#day-17-tuesday-june-252019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finally crossed the last attempts days.&lt;/li&gt;
&lt;li&gt;Learned about mutability.&lt;/li&gt;
&lt;li&gt;Basic data type are immutable.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Containers data type are divided&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt; are mutable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple&lt;/code&gt; is immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-monday-june-242019"&gt;Day 16 | Monday June 24,2019&lt;a class="headerlink" href="#day-16-monday-june-242019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Adding/Accessing dictionary elements.&lt;ul&gt;
&lt;li&gt;add new key/Value pair.   &lt;code&gt;nums["four"] = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are no duplicate key in Dictionaries.&lt;/li&gt;
&lt;li&gt;If new value is assigned to same key, it will override the old value.&lt;/li&gt;
&lt;li&gt;Existence of a key in Dictionaries. &lt;code&gt;"one" in nums&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.update()&lt;/code&gt;: Combine two list.&lt;/li&gt;
&lt;li&gt;3 important functions on Dictionaries&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.keys()&lt;/code&gt;: returns special list called dict keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;: returns a special list called dict values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.item()&lt;/code&gt;: returns a list of tuple, called dict items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dictionaries Operation " src="http://archerimagine.com/images/100DaysOfCode/dict_02.png" title="Dictionaries Operation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1143211092597825536"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-sunday-june-232019"&gt;Day 15 | Sunday June 23,2019&lt;a class="headerlink" href="#day-15-sunday-june-232019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started learning about dictionaries.&lt;/li&gt;
&lt;li&gt;Dictionaries store &lt;code&gt;key:value&lt;/code&gt; pair.&lt;/li&gt;
&lt;li&gt;Dictionaries are mutable but the &lt;code&gt;keys&lt;/code&gt; are immutable.&lt;/li&gt;
&lt;li&gt;The search is very fast, just like &lt;code&gt;sets&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Retrieve the value with index as the &lt;code&gt;key&lt;/code&gt; &lt;code&gt;a["one"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt; method can be used when we do not want an error while retrieving a value.&lt;ul&gt;
&lt;li&gt;Its returns a default value if the key is not present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dictionaries Basics " src="http://archerimagine.com/images/100DaysOfCode/dict_01.png" title="Dictionaries Basics"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1142836839323095040"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-saturday-june-222019"&gt;Day 14 | Saturday June 22,2019&lt;a class="headerlink" href="#day-14-saturday-june-222019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Important set operation.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union()&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; : Returns the union of two sets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection()&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;: Returns the intersection of two sets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference()&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;: present in 1 set but not in other.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set Operation " src="http://archerimagine.com/images/100DaysOfCode/set_03.png" title="Set Operation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1142493860150439936"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-thursday-june-202019"&gt;Day 13 | Thursday June 20,2019&lt;a class="headerlink" href="#day-13-thursday-june-202019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Updated my RAM with set operation for CRUD.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add()&lt;/code&gt; - Adds item to the set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;discard()&lt;/code&gt; - Removes item from the set, if not present, gives no error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove()&lt;/code&gt; - Removes item from the set, if not present. gives &lt;code&gt;KeyError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update()&lt;/code&gt; - Adds item from a sequence into a set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set crud " src="http://archerimagine.com/images/100DaysOfCode/set_02.png" title="Set CRUD"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141757313604173824"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-june-192019"&gt;Day 12 | Wednesday June 19,2019&lt;a class="headerlink" href="#day-12-wednesday-june-192019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the basic premise around sets.&lt;ul&gt;
&lt;li&gt;Empty sets can only be created using &lt;code&gt;set()&lt;/code&gt; function, empty &lt;code&gt;{}&lt;/code&gt; creates a dict.&lt;/li&gt;
&lt;li&gt;Sets stores only immutable data type which can give a &lt;code&gt;hash()&lt;/code&gt; value.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = {"a", (1, 2, 3), [1, 2, 3]}&lt;/code&gt; &lt;code&gt;# TypeError: unhashable type: 'list'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sets are used to remove duplicates from List.&lt;/li&gt;
&lt;li&gt;Sets searching is very fast.&lt;/li&gt;
&lt;li&gt;Sets do not have a indexing order.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set creation " src="http://archerimagine.com/images/100DaysOfCode/set_01.png" title="Set creation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141395988881367040"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-june-182019"&gt;Day 11 | Tuesday June 18,2019&lt;a class="headerlink" href="#day-11-tuesday-june-182019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explored the different ways to create a &lt;code&gt;tuple&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Create a empty tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = tuple()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;b = ()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a single item tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = (1,)&lt;/code&gt; and not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = (1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brackets are not mandatory for tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b = 1, 2, 3, 4, 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;indexing in tuple, same as list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tuple creation " src="http://archerimagine.com/images/100DaysOfCode/tuple_01.png" title="tuple creation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141031483282317312"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-june-172019"&gt;Day 10 | Monday June 17,2019&lt;a class="headerlink" href="#day-10-monday-june-172019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Established some basic understanding on list operations&lt;/li&gt;
&lt;li&gt;Operations to add item to the list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append()&lt;/code&gt;: add an item to end of the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert(2, "bbbb")&lt;/code&gt;: insert at an index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend()&lt;/code&gt;: concatenates two list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operation on list look-up, which is very slow, almost linear.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index(value)&lt;/code&gt;: returns first index of value&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ValueError:&lt;/code&gt; if the value is not present in list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(value)&lt;/code&gt;: returns the no of times a value is present.&lt;ul&gt;
&lt;li&gt;return's &lt;code&gt;0&lt;/code&gt; is the value is not present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operation to remove item from list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;remove(value)&lt;/code&gt;: removes the value from the list, if not present does not throw error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt;: remove and returns the last element of the list or the index.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List are heterogeneous.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Heterogeneous list. " src="http://archerimagine.com/images/100DaysOfCode/list_03.png" title="Heterogeneous list."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1140663343528599554"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-sunday-june-162019"&gt;Day 09 | Sunday June 16,2019&lt;a class="headerlink" href="#day-09-sunday-june-162019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the list's sort and the built-in sorted function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted()&lt;/code&gt; returns a list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.sort()&lt;/code&gt; or &lt;code&gt;list.reverse()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="sorted() and built-in sort " src="http://archerimagine.com/images/100DaysOfCode/list_02.png" title="sorted() and built-in sort"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1140304997944401920"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-saturday-june-152019"&gt;Day 08 | Saturday June 15,2019&lt;a class="headerlink" href="#day-08-saturday-june-152019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started after a gap of 1 cheat day.&lt;/li&gt;
&lt;li&gt;List was the focus today.&lt;ul&gt;
&lt;li&gt;list can be created using &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list is a ordered collection.&lt;/li&gt;
&lt;li&gt;list is a heterogeneous collection.&lt;/li&gt;
&lt;li&gt;list elements can be accessed using index start at &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List has 1 efficient way of declaring.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"XXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"YYY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"ZZZ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# unlike json, we can have comma at the last element, &lt;/span&gt;
            &lt;span class="c1"&gt;# it helps with git diff&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Multi Line list declaration." src="http://archerimagine.com/images/100DaysOfCode/list_01.png" title="Multi Line list declaration."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1139956001749123072"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-thursday-june-132019"&gt;Day 07 | Thursday June 13,2019&lt;a class="headerlink" href="#day-07-thursday-june-132019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function scope is little confusing without practice.&lt;ul&gt;
&lt;li&gt;There is a global scope and a local scope to a function.&lt;/li&gt;
&lt;li&gt;If same variable name is same, local scope gets preference.&lt;ul&gt;
&lt;li&gt;Global variable cannot be modified even thought it share the same name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This code will work.
&lt;img alt="Function Scope Working case." src="http://archerimagine.com/images/100DaysOfCode/functions_scope_01.png" title="Function Scope Working case."/&gt;&lt;/li&gt;
&lt;li&gt;But this code will not work, gives &lt;code&gt;UnboundLocalError:&lt;/code&gt;.
&lt;img alt="Function Scope Not Working case." src="http://archerimagine.com/images/100DaysOfCode/functions_scope_error.png" title="Function Scope Not Working case."/&gt;&lt;/li&gt;
&lt;li&gt;The explanation is mentioned in the Python &lt;a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"&gt;Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1139222966279892992"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-wednesday-june-122019"&gt;Day 06 | Wednesday June 12,2019&lt;a class="headerlink" href="#day-06-wednesday-june-122019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="List as a function argument." src="http://archerimagine.com/images/100DaysOfCode/functions_03_01.png" title="List as a function argument."/&gt;
&lt;img alt="List as a function argument." src="http://archerimagine.com/images/100DaysOfCode/functions_03_02.png" title="List as a function argument."/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List or any other mutable data type should not be used as the default arguments.&lt;ul&gt;
&lt;li&gt;The list is initialized when the function is called the 1st time, and then it modifies the same list. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138870851497934848"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-5-tuesday-june-112019"&gt;Day 5 | Tuesday June 11,2019&lt;a class="headerlink" href="#day-5-tuesday-june-112019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Functions Arguments" src="http://archerimagine.com/images/100DaysOfCode/functions_02.png" title="Function Arguments"/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started with the &lt;em&gt;Function's Arguments&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Positional arguments must be passed to functions.&lt;/li&gt;
&lt;li&gt;Default arguments are always provide at the end of function's argument list.&lt;/li&gt;
&lt;li&gt;We can give &lt;em&gt;none&lt;/em&gt;, &lt;em&gt;one&lt;/em&gt;, &lt;em&gt;all&lt;/em&gt; arguments to a function with only default arguments list.&lt;/li&gt;
&lt;li&gt;Labeled arguments can be passed in any order to a function. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138501823415951360"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-monday-june-102019"&gt;Day 04 | Monday June 10,2019&lt;a class="headerlink" href="#day-04-monday-june-102019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Functions" src="http://archerimagine.com/images/100DaysOfCode/functions_01.png" title="Different return type of functions."/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the &lt;code&gt;functions&lt;/code&gt; section of the lecture.&lt;/li&gt;
&lt;li&gt;This lesson, teaches about different function type.&lt;ul&gt;
&lt;li&gt;Function with no arguments and no return type&lt;/li&gt;
&lt;li&gt;Function with no arguments and a return type&lt;/li&gt;
&lt;li&gt;Function with 2 arguments and a return type&lt;/li&gt;
&lt;li&gt;Function with multi-line function body.&lt;/li&gt;
&lt;li&gt;return is always optional in function, it returns &lt;code&gt;&amp;lt;class 'NoneType'&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The function returning &lt;code&gt;&amp;lt;class 'NoneType'&amp;gt;&lt;/code&gt; was a eye opener.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138147827287187457"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-sunday-june-92019"&gt;Day 03 | Sunday June 9,2019&lt;a class="headerlink" href="#day-03-sunday-june-92019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_15"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the Data Type chapter in the FrontEnd Master's Python fundamentals.&lt;/li&gt;
&lt;li&gt;This chapter introduces some nice concept about data types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;45j&lt;/code&gt;  is a complex data type &lt;code&gt;&amp;lt;class 'complex'&amp;gt;&lt;/code&gt; but not &lt;code&gt;45i&lt;/code&gt;, so &lt;code&gt;j&lt;/code&gt; is the identifier for complex number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new_name f"Hello, {name}"&lt;/code&gt; is a format string, &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;{}&lt;/code&gt; is the variable name which will be replaced.&lt;/li&gt;
&lt;li&gt;Same variable can be used to store number, or strings.&lt;/li&gt;
&lt;li&gt;String can be created by both &lt;code&gt;'string 1 '&lt;/code&gt; or &lt;code&gt;" String 2 "&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integer division gives the result in floating point &lt;code&gt;3/2 = 1.5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python Data types have lot of power inside them with very less ambiguity.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137766857312616453"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-saturday-june-82019"&gt;Day 02 | Saturday June 8,2019&lt;a class="headerlink" href="#day-02-saturday-june-82019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_16"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_16" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the VSCode basic settings, got help from a great tutorial by &lt;a href="https://www.youtube.com/watch?v=06I63_p-2A4"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The tutorials talks about these topics&lt;ul&gt;
&lt;li&gt;Change the way settings is displayed as JSON, in place of UI.&lt;/li&gt;
&lt;li&gt;Select virtual environment.&lt;/li&gt;
&lt;li&gt;Change color theme.&lt;/li&gt;
&lt;li&gt;Change file icons.&lt;/li&gt;
&lt;li&gt;Set the global python path - &lt;code&gt;"python.pythonPath": "&amp;lt;Path&amp;gt;"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set a global python file formatter, we are using Black for this. &lt;code&gt;"python.formatting.provider": "black",&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Also change the option to run the formatter on saving the file. &lt;code&gt;"editor.formatOnSave": true,&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable Linting.&lt;/li&gt;
&lt;li&gt;Git Integration.&lt;/li&gt;
&lt;li&gt;Unit Testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_16"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_16" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VScode has lot of power, lets see how much I learn from it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137427179573092353"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-friday-june-72019"&gt;Day 01 |  Friday June 7,2019&lt;a class="headerlink" href="#day-01-friday-june-72019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_17"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_17" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Python Fundamentals course by Nina Zakharenko.&lt;/li&gt;
&lt;li&gt;Today's main focus was setting my these things.&lt;ul&gt;
&lt;li&gt;Virtual environment.&lt;/li&gt;
&lt;li&gt;VScode setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Faced few issues, which &lt;a href="https://stackoverflow.com/questions/41687841/there-is-no-activate-when-i-am-trying-to-run-my-virtual-env"&gt;stackoverflow &lt;/a&gt; helped in solving&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="issues-and-solutions"&gt;Issues and Solutions&lt;a class="headerlink" href="#issues-and-solutions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was no activate script when the virtual environment was created by using the command &lt;code&gt;python -m venv .env&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;On doing Google for the problem found that running the same command again solves the issue, so ran &lt;code&gt;python -m venv env&lt;/code&gt; again and viola the activate script appeared.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VScode was not recognizing the virtual environment created inside a sub folder in the project.&lt;ul&gt;
&lt;li&gt;Deleted the pre-existing environment and created a new virtual environment at the project root.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_17"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_17" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Programming is just efficient Google technique.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137047401137549312"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/1733403/Joseph-Chamberlain-If-we-fail-let-us-try-again-and-again-until-we-succeed"&gt;QuoteFancy | Image Source &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nealschaffer.com/tweet-link-preview-image-twitter/"&gt;Create a Tweet With image Preview for Free &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/python/"&gt;FrontEndMasters | Python Fundamentals | Nina Zakharenko &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=06I63_p-2A4"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry><entry><title>100 Days of Discrete Maths.</title><link href="http://archerimagine.com/articles/100daysofdiscretemath/100Days-of-DiscreteMath-log-file.html" rel="alternate"></link><published>2019-02-17T22:46:40+05:30</published><updated>2019-03-21T22:52:00+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-02-17:/articles/100daysofdiscretemath/100Days-of-DiscreteMath-log-file.html</id><summary type="html">&lt;p&gt;Discrete Maths is a study of things which are discrete, which means things which can be counted. Discrete Maths forms the basis of a lot of concepts in algorithms and Computer science in general. I am starting this #100DaysOfX which Discrete Maths, to have a sufficient understanding of the concepts. I am using resources from NPTEL, MIT OCW, and ArsDigita University.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="http://archerimagine.com/images/discreteMaths/100DaysDiscreteMaths.jpg" title="To the wise, life is a problem, to the fool, a solution."/&gt;&lt;/p&gt;
&lt;p&gt;Discrete Maths is a study of things which are discrete, which means things which can be counted. Discrete Maths forms the basis of a lot of concepts in algorithms and Computer science in general. I am starting this #100DaysOfX which Discrete Maths, to have a sufficient understanding of the concepts. I am using resources from NPTEL, MIT OCW, and ArsDigita University.&lt;/p&gt;
&lt;p&gt;The plan is to follow the 3 lectures mentioned in the references and the Rosen book on Discrete math. &lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just a revision of implication, exclusive OR.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780407548530690"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the logical inference lecture from NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=kZ6UqFm8lnw&amp;amp;list=PL0862D1A947252D20&amp;amp;index=5"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logical inference for propositional calculus&lt;ul&gt;
&lt;li&gt;Fallacy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logical inference for Quantifiers&lt;/li&gt;
&lt;li&gt;Normal Forms&lt;ul&gt;
&lt;li&gt;CNF&lt;/li&gt;
&lt;li&gt;DNF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432148091076610"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Revision of Preposition calculus from Rosen Book. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Books are easier to understand once, the concept is understood.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063385629966336"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Revision of lecture 4 from NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned that Implication and Equivalence are not the same.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understood about logical relationship involving quantifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107683968730779649"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Revision of lecture 4 from NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Now learned properly about Predicates and Quantifiers.&lt;/li&gt;
&lt;li&gt;Scope of Quantifiers.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Valid&lt;/code&gt;, &lt;code&gt;Satisfiable&lt;/code&gt; and &lt;code&gt;unsatisfiable&lt;/code&gt; predicates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107298216075243521"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Again listened to the 4th lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about Logical Inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107298216075243521"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Listened to the 4th lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learned a little about logical inference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Still confusion over Predicate and Quantifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105168631971889154"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-thursday-28-february-2019"&gt;Day 09 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-09-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reading and listening to explanation on how to negate a quantifiers.&lt;/li&gt;
&lt;li&gt;Learning about scope of a quantifiers. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Still have doubts on these topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101174243029590023"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-wednesday-27-february-2019"&gt;Day 08 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-08-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In between the 4th Lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Great lecture on predicate logic&lt;/li&gt;
&lt;li&gt;Learned about:-&lt;ul&gt;
&lt;li&gt;Valid Expression&lt;/li&gt;
&lt;li&gt;Satisfiable Expression&lt;/li&gt;
&lt;li&gt;Unsatisfiable Expression&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These addition video's also helped.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GJpezCUMOxA"&gt;Universal and Existential Quantifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gyoqX0W-NH4"&gt;[Discrete Math 1] Predicate Logic and Negating Quantifiers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100803453591400448"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-tuesday-26-february-2019"&gt;Day 07 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-07-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Listened to the 2nd lecture of MIT 6.042J YouTube &lt;a href="https://www.youtube.com/watch?v=z8HKWUWS-lA&amp;amp;index=2&amp;amp;list=PLB7540DEDD482705B"&gt;play-list&lt;/a&gt; &lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This lecture discusses about &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proof by Contradiction&lt;/li&gt;
&lt;li&gt;Introduces to the concept of Induction proof.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100451208240734215"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-monday-25-february-2019"&gt;Day 06 | Monday 25 February 2019&lt;a class="headerlink" href="#day-06-monday-25-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Completed the 3rd Lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=DmCltf8ypks&amp;amp;list=PL0862D1A947252D20"&gt;Maths&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Predicate and Quantifiers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predicate&lt;ul&gt;
&lt;li&gt;Predicate Logic&lt;/li&gt;
&lt;li&gt;n-ary predicate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Quantifiers&lt;ul&gt;
&lt;li&gt;Universal&lt;/li&gt;
&lt;li&gt;Existential&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding Variables&lt;/li&gt;
&lt;li&gt;Logical equivalence involving quantifiers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100451208240734215"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-friday-22-february-2019"&gt;Day 05 | Friday 22 February 2019&lt;a class="headerlink" href="#day-05-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Today was a rest day for Discrete Maths.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-thursday-21-february-2019"&gt;Day 04 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-04-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Listened to the 2nd lecture of MIT 6.042J YouTube &lt;a href="https://www.youtube.com/watch?v=z8HKWUWS-lA&amp;amp;index=2&amp;amp;list=PLB7540DEDD482705B"&gt;play-list&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;This lecture discusses about &lt;ul&gt;
&lt;li&gt;Proof by Contradiction&lt;/li&gt;
&lt;li&gt;Introduces to the concept of Induction proof.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Today was focused on listening to the lecture, so have not taken detailed notes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098632243373924353"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-wednesday-20-february-2019"&gt;Day 03 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-03-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Completed the 2nd Lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=0uTE24o3q-o&amp;amp;list=PL0862D1A947252D20"&gt;Maths&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proving implication without drawing all possible rows of truth table.&lt;/li&gt;
&lt;li&gt;Proved that implication is not associative.&lt;/li&gt;
&lt;li&gt;Learned about logical identities.&lt;/li&gt;
&lt;li&gt;Simplified complex compound propositions.&lt;/li&gt;
&lt;li&gt;Conversion between English to logic and vice versa.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rules of inference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modus Ponens&lt;/li&gt;
&lt;li&gt;Modus Tollens&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098270228784574466"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-tuesday-19-february-2019"&gt;Day 02 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-02-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the First lecture of MIT 6.042J YouTube play &lt;a href="https://www.youtube.com/watch?v=L3LMbpZIKhQ&amp;amp;list=PLB7540DEDD482705B&amp;amp;index=2&amp;amp;t=0s"&gt;list &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I have not taken any notes, but the lecture was mostly focused on methods of proof, propositions and connectives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097924977976844289"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-monday-18-february-2019"&gt;Day 01 | Monday 18 February 2019&lt;a class="headerlink" href="#day-01-monday-18-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the First lecture of NPTEL's YouTube play &lt;a href="https://www.youtube.com/watch?v=xlUFkMKSB3Y&amp;amp;list=PL0862D1A947252D20&amp;amp;index=2&amp;amp;t=0s"&gt;list &lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This lecture covers these topics:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logic&lt;/li&gt;
&lt;li&gt;Propositions&lt;/li&gt;
&lt;li&gt;Logical Connectives (&lt;span class="math"&gt;\(\&amp;amp;\)&lt;/span&gt;, &lt;span class="math"&gt;\(|\)&lt;/span&gt;, &lt;span class="math"&gt;\(\sim\)&lt;/span&gt;) and its truth tables&lt;/li&gt;
&lt;li&gt;Implication. (&lt;span class="math"&gt;\(\Rightarrow\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Equivalence. (&lt;span class="math"&gt;\(\Leftrightarrow\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Tautology, Contradiction &amp;amp; Contingency.&lt;/li&gt;
&lt;li&gt;Logical Identities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Understanding Equivalence and Implication was little tough.&lt;/p&gt;
&lt;p&gt;These 2 video's provided the additional help.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LSm4P6ywxoA"&gt;Rachel's Discrete Math Course - Implications (Lecture 5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hICRgMz2LG8"&gt;Propositional logic | first order predicate logic| Propositional calculus | gate | net - part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097558663814893569"&gt;Link to Tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL0862D1A947252D20"&gt;NPTEL | Computer Sc - Discrete Mathematical Structures | Prof. Kamala Krithivasan &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLUpS0WwSvA3e7HtgzNHMivo0T8V0etX_Z"&gt;ArsDigita | Discrete Mathematics and Its Applications | Rosen | Shai Simonson &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB7540DEDD482705B"&gt;MIT 6.042J | Mathematics for Computer Science, Fall 2010 | Tom Leighton, Marten van Dijk &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Discrete-Mathematics-Its-Applications-SIE/dp/0070681880/"&gt;Amazon | Discrete Mathematics and Its Applications (SIE) | Kenneth Rosen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.put.poznan.pl/ksiek/latexmath.html"&gt;Latex | Math Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nosferalatu.com/Pelican.html"&gt;Pelican and Math Equations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="#100DaysOfX"></category><category term="#100DaysOfDiscreteMath"></category></entry><entry><title>100Days of Vim Log File</title><link href="http://archerimagine.com/articles/100daysofvim/100Days-of-vim-log-file-V-2-0.html" rel="alternate"></link><published>2019-02-16T23:28:02+05:30</published><updated>2019-03-21T22:51:42+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-02-16:/articles/100daysofvim/100Days-of-vim-log-file-V-2-0.html</id><summary type="html">&lt;p&gt;Vim is really hard to learn, time and again I have failed to use it consistently. I understand the basics of vim and can get some work done with VIM. I am targeting to become efficient at this. Hopefully the 100DaysOfVim will help me to be consistent.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Vim Help Screen " src="http://archerimagine.com/images/100DaysOfVim/vimHelp.png" title="Vim Help Screen"/&gt;&lt;/p&gt;
&lt;p&gt;I am starting this new journey into the world of VIM, with a hope that this time the mistakes of my past attempts will be rectified. This journey's goal is pre-decided so that there is no deviation from the plan of learning VIM. &lt;/p&gt;
&lt;p&gt;In the last attempt of learning VIM, I was doing the classic mistakes of learning vim as described by Mr. Bram Moolenaar in &lt;a href="https://www.youtube.com/watch?v=p6K4iIMlouI"&gt;this&lt;/a&gt; video, that is, &lt;strong&gt;Learn every feature the editor offers and use the most efficient command all the time.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The approach this time will be learning a little bit of commands in VIM and apply it daily for a few days, as it becomes part of the muscle memory move to the next set. In addition, I have also set my goals for this 100 Days to have a razor sharp focus and not deviating.&lt;/p&gt;
&lt;p&gt;The goal of this &lt;strong&gt;100DaysofVim&lt;/strong&gt; are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit text effectively.&lt;/li&gt;
&lt;li&gt;Scroll and move in a file quickly.&lt;/li&gt;
&lt;li&gt;Navigate source code with ctags and key board shortcuts.&lt;/li&gt;
&lt;li&gt;Edit multiple files using buffers.&lt;/li&gt;
&lt;li&gt;No use of any vim plugins.&lt;/li&gt;
&lt;li&gt;Read and understand the vim help system.&lt;/li&gt;
&lt;li&gt;Integrate debugging with source code navigation in VIM.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Editing a file&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/running-vim-within-irb/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nothing significant progress today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780661358411776"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Starting Vim&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/spell-checking/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood about the default spell checking mechanism of VIM.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Will post the key bindings soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432461615243265"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Special Ex characters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/formatting-text-with-par/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Most of the Special EX char, can be used with the &lt;code&gt;:edit&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Vimcast from wrapping and this completely went over the head, will revisit again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063720264122376"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Ranges&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/hard-wrapping-text/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Understanding Wrapping is little difficult in VIM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107683433843703810"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Command-line editing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/soft-wrapping-text/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297853284732934"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Various commands&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/the-file-explorer/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Configured the &lt;code&gt;netrw&lt;/code&gt; to behave like a File Explorer.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Took help from these links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shapeshed.com/vim-netrw/"&gt;Vim: you don't need NERDtree or (maybe) netrw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kgrz.io/editing-files-over-network.html"&gt;Magic of netrw in Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="link"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Quickfix commands&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/the-edit-command/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quickfix commands&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;We need a arguments called &lt;code&gt;makeprg&lt;/code&gt; to be configured.&lt;/li&gt;
&lt;li&gt;C program's by default have &lt;code&gt;make&lt;/code&gt; as the &lt;code&gt;makeprg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Python program can configure &lt;code&gt;makeprg&lt;/code&gt; as &lt;code&gt;pyflakes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can even configure this pased on the &lt;code&gt;ftplugin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VimCast&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to change directory while editing a file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105169141072363521"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-thursday-28-february-2019"&gt;Day 09 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-09-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/modal-editing-undo-redo-and-repeat/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; : = &lt;code&gt;xi&lt;/code&gt; : delete a char and insert mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; := &lt;code&gt;^C&lt;/code&gt; : delete line and insert mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the &lt;strong&gt;Options&lt;/strong&gt; help, did not understand and word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101175253693358082"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-wednesday-27-february-2019"&gt;Day 08 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-08-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/using-the-changelist-and-jumplist/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt; : Navigate the change list in forward and backward direction.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + 0&lt;/code&gt;, &lt;code&gt;CTRL + I&lt;/code&gt;: Navigate the jump list in forward and backward direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100802343728308226"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-tuesday-26-february-2019"&gt;Day 07 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-07-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/creating-the-vimcasts-logo-as-ascii-art/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about session when reading the &lt;strong&gt; Key Mapping&lt;/strong&gt; section of vim help.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mksession hello.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim -S hello.vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100449588861956101"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-monday-25-february-2019"&gt;Day 06 | Monday 25 February 2019&lt;a class="headerlink" href="#day-06-monday-25-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/how-to-use-tabs/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100449588861956101"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-friday-22-february-2019"&gt;Day 05 | Friday 22 February 2019&lt;a class="headerlink" href="#day-05-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/working-with-tabs/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completed the course &lt;a href="https://www.udemy.com/vim-commands-cheat-sheet/"&gt;Udemy | Vim MasterClass | Jason Cannon &lt;/a&gt; &lt;ul&gt;
&lt;li&gt;Received the course completion certificate.
&lt;img alt="Vim Master Class Certificate " src="http://archerimagine.com/images/100DaysOfVim/vimMasterClass.jpg" title="Vim Master Class Certificate"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about the gVIM clipboard buffers &lt;code&gt;"+&lt;/code&gt; and &lt;code&gt;"*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tab's command&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:tabe&lt;/code&gt; : open a tab with file name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-W T&lt;/code&gt;: move current split into a tab.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabc&lt;/code&gt; : close current tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabo[nly]&lt;/code&gt;: one 1 tab open.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gT&lt;/code&gt; and &lt;code&gt;gt&lt;/code&gt;: to switch between tabs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabmove&lt;/code&gt;: move tabs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completed these help topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; Visual Mode &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; Text Object &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098996430537142274"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-thursday-21-february-2019"&gt;Day 04 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-04-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Lecture on buffers from &lt;a href="https://www.udemy.com/vim-commands-cheat-sheet/"&gt;Udemy | Vim MasterClass | Jason Cannon &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/working-with-windows/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about the various windows commands.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL +w s&lt;/code&gt; or :sp `: horizontal split&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL +w v&lt;/code&gt; &lt;code&gt;:vsp&lt;/code&gt;: vertical split&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only&lt;/code&gt;: closes all window except the active one&lt;/li&gt;
&lt;li&gt;Navigation is done by &lt;code&gt;CTRL + w w&lt;/code&gt;, &lt;code&gt;CTRL + w h&lt;/code&gt;, &lt;code&gt;CTRL + w j&lt;/code&gt;, &lt;code&gt;CTRL + w k&lt;/code&gt;, &lt;code&gt;CTRL + w l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resize windows&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL + w +&lt;/code&gt;, &lt;code&gt;CTRL + w -&lt;/code&gt;, increase or decrease the size by 1 line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + W _&lt;/code&gt;, &lt;code&gt;CTRL + w |&lt;/code&gt;, increase size of current window in height and width &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Moving window is done by &lt;code&gt;CTRL + w R&lt;/code&gt;, &lt;code&gt;CTRL + w H&lt;/code&gt;, &lt;code&gt;CTRL + w J&lt;/code&gt;, &lt;code&gt;CTRL + w K&lt;/code&gt;, &lt;code&gt;CTRL + w L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;like &lt;code&gt;bufdo&lt;/code&gt; we have a command &lt;code&gt;windo&lt;/code&gt; which works only on opened window.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Studied the &lt;strong&gt;Complex Changes&lt;/strong&gt; from vim helps, did not understood much from this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098634646991065089"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-wednesday-20-february-2019"&gt;Day 03 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-03-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Vim Help Screen for changing text " src="http://archerimagine.com/images/100DaysOfVim/vim_changingText.png" title="Vim Help Screen for changing text"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Lecture on buffers from &lt;a href="https://www.udemy.com/vim-commands-cheat-sheet/"&gt;Udemy | Vim MasterClass | Jason Cannon &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about these buffers commands.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:buffers&lt;/code&gt; or &lt;code&gt;:ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;/code&gt; or &lt;code&gt;:bnext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bp&lt;/code&gt; or &lt;code&gt;:bprevious&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bf&lt;/code&gt; or &lt;code&gt;:bfirst&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bl&lt;/code&gt; or &lt;code&gt;:blast&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + ^&lt;/code&gt; : last open buffers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set hidden&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:qall!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wall!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:badd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bufdo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:Explore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Studied the &lt;strong&gt;Changing Text&lt;/strong&gt; from Vim help.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cc&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; all work on line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + A&lt;/code&gt; and &lt;code&gt;CTRL + X&lt;/code&gt; has a very nice implementation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:ce&lt;/code&gt;, &lt;code&gt;:le&lt;/code&gt; &amp;amp; &lt;code&gt;:ri&lt;/code&gt; changes the alignment of line, center, left and right.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098270900154236928"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-2-tuesday-19-february-2019"&gt;Day 2 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-2-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_1"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Studied the &lt;strong&gt;Copying and Moving text.&lt;/strong&gt; section of vim help.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; behaves the same as &lt;code&gt;^&lt;/code&gt; without a count preceding it. When count is preceding it, this behaves as &lt;code&gt;j&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/155926/what-does-the-underscore-motion-do-in-vim"&gt;What does the underscore motion do in vim?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While learning about vim help file, I found that all the commands which are similar are generally kept together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097924386038915072"&gt;Link To Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-1-monday-18-february-2019"&gt;Day 1 | Monday 18 February 2019&lt;a class="headerlink" href="#day-1-monday-18-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_2"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Few commands which was very good.&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;C&lt;/code&gt; to change the text from the cursor till end of line.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;D&lt;/code&gt; to delete the text from the cursor till end of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Few Insert Mode commands.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; : insert one shiftwidth of indent in front of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-D&lt;/code&gt; : deletes one shiftwidth of indent in front of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097560432850685954"&gt;Link to Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@peterxjang/how-to-learn-vim-a-four-week-plan-cd8b376a9b85"&gt;How To Learn Vim: A Four Week Plan &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://100daysofx.com/"&gt;100daysOfX&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p6K4iIMlouI"&gt;YouTube | 7 Habits For Effective Text Editing 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/episodes/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="#100DaysOfVim"></category><category term="#100DaysOfX"></category></entry><entry><title>100Days of Code Log File 2nd Attempt</title><link href="http://archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html" rel="alternate"></link><published>2019-02-15T22:42:30+05:30</published><updated>2019-03-21T22:49:10+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-02-15:/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html</id><summary type="html">&lt;p&gt;Hello World!, You are about the witness the second coming of an epic 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="http://archerimagine.com/images/100DaysOfCode/100DaysCode_Quotefancy.jpg" title="life always offers you a second chance. is called tomorrow, by Dylan Thomas"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic second coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="http://archerimagine.com/articles/100daysofcode/100Days-of-code-log-file.html" title="First attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selected the resource in advance, &lt;ul&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice the 100Daysofcode for a month before committing fully.&lt;/li&gt;
&lt;li&gt;Create a time table and sticking to it.&lt;/li&gt;
&lt;li&gt;Studying at the same time everyday, brains craves for learning python in that hour of the day.&lt;/li&gt;
&lt;li&gt;Missing few (~5) days is acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed few regular expression tutorials from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Negation&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[^abc]&lt;/code&gt; - A set that will not match any char of these characters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.IGNORECASE&lt;/code&gt;, &lt;code&gt;re.I&lt;/code&gt; - Flag to ignore case while searching&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.VERBOSE&lt;/code&gt;, &lt;code&gt;re.X&lt;/code&gt; - Flag that allows regular expression to span multiple lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Groups&lt;ul&gt;
&lt;li&gt;&lt;code&gt;([abc])&lt;/code&gt; - create a group, that contains a set of letters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(P&amp;lt;name&amp;gt;[abc])&lt;/code&gt; - creates a named group, member can be accessed using &lt;code&gt;group('name')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.MULTILINE&lt;/code&gt;, &lt;code&gt;re.M&lt;/code&gt; - flag to make a pattern having lines.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - Beginning of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; - End of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780013992796163"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today did not get much work done, solved few exercises in solo learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432674560069633"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed few regular expression tutorials from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about counts in regular expressions.&lt;/li&gt;
&lt;li&gt;We can create expressions like these&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w{3}&lt;/code&gt; - Match any 3 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{,3}&lt;/code&gt; - Match 0,1,2 or 3 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{3,}&lt;/code&gt; - Match 3 or more char, no upper limit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{3,5}&lt;/code&gt; - Match 3,4 or 5 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w?&lt;/code&gt; - Match 0 or 1 char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w*&lt;/code&gt; - Match 0 or more&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w+&lt;/code&gt; - Match 1 or more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can also pass a variable in regular expression string.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"\w{%s}" %count&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt; - for string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; - for decimal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; - for float&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sets basic was also checked.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt; - set of char a,b,c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z][A-Z][a-zA-Z]&lt;/code&gt; - Char ranges&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt; - digit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^2]&lt;/code&gt; - Not 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063107849564161"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Chapter 01 from Head First Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about 2 types of &lt;code&gt;import&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learned about these module, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107684592805396480"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practiced some of the learning from Regular Expression from previous Day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297400236986370"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Module of Regular Expression from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about File read and write operations like&lt;ul&gt;
&lt;li&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In addition to these explored&lt;ul&gt;
&lt;li&gt;&lt;code&gt;re.match()&lt;/code&gt; - Matches against the beginning of text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.search()&lt;/code&gt; - returns the first match location anywhere in the text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Few escape sequence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt; - Matches Unicode word char including numbers but excluding special character.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\W&lt;/code&gt; - Matches anything which is &lt;strong&gt; NOT &lt;/strong&gt; Unicode word or numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt; - Matches all white spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt; - Matches anything which is &lt;strong&gt; NOT &lt;/strong&gt; white spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; - Matches numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; - Matches &lt;strong&gt; NOT &lt;/strong&gt; numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt; - Matches word boundary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\B&lt;/code&gt; - Matches &lt;strong&gt; NOT &lt;/strong&gt; word boundary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297400236986370"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read the first chapter of Head first Python.&lt;/li&gt;
&lt;li&gt;Wrote few code from the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about the &lt;code&gt;datetime&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105167915958063105"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-tuesday-05-march-2019"&gt;Day 09 | Tuesday 05 March 2019&lt;a class="headerlink" href="#day-09-tuesday-05-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the module of Quiz Game in the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Earned the Dates and Times badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Dates and Times Badge " src="http://archerimagine.com/images/100DaysOfCode/python_date_time.png" title="Python Dates and Times Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about timezone.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a very difficult to handle without &lt;a href="https://pypi.org/project/pytz/"&gt;pytz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1102918666625130499"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-friday-01-march-2019"&gt;Day 08 | Friday 01 March 2019&lt;a class="headerlink" href="#day-08-friday-01-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the module of Quiz Game in the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Earned the build timed quiz App badge.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Timed Quiz Badge " src="http://archerimagine.com/images/100DaysOfCode/python_time.png" title="Python Timed Quiz Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some concepts of games were very good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101526314564141057"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-thursday-28-february-2019"&gt;Day 07 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-07-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Received the badge Date and time Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Date and Time Badge " src="http://archerimagine.com/images/100DaysOfCode/python_time.png" title="Python Date and Time Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about &lt;code&gt;strftime()&lt;/code&gt; and &lt;code&gt;strptime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Made a script to create a link for wikipedia.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101173226271592449"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-wednesday-27-february-2019"&gt;Day 06 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-06-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I just watched the second lecture from MIT OCW's &lt;a href="https://www.youtube.com/watch?v=SLvTCHhu5SE&amp;amp;index=2&amp;amp;list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this lecture we discuss about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of objects.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expression&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100802868599234563"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-tuesday-26-february-2019"&gt;Day 05 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-05-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was a gap of 3 days.&lt;/li&gt;
&lt;li&gt;Started the &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;Date and Time&lt;/a&gt; module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This course teaches about the date and time module of Python.&lt;/li&gt;
&lt;li&gt;Major modules in &lt;code&gt;datetime&lt;/code&gt; are&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;timedelta&lt;/code&gt;, &lt;code&gt;timezone&lt;/code&gt;, &lt;code&gt;tzinfo&lt;/code&gt;- which is rarely used directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learned about &lt;code&gt;.today()&lt;/code&gt;, &lt;code&gt;.combine()&lt;/code&gt;, &lt;code&gt;.timestamp()&lt;/code&gt; -  which returns the epoch time.&lt;/li&gt;
&lt;li&gt;We can format the time with help from &lt;code&gt;strftime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can create time with string format &lt;code&gt;strptime()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100450089930276864"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-friday-22-february-2019"&gt;Day 04 | Friday 22 February 2019&lt;a class="headerlink" href="#day-04-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the course &lt;a href="https://teamtreehouse.com/library/write-better-python"&gt;TreeHouse | Write Better python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Received the badge Clean Code Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Clean Code Badge " src="http://archerimagine.com/images/100DaysOfCode/python_cleancode.png" title="Python Clean Code Badge"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In addition completed the Write Better python Course of the Learn Python track.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Write Better Python " src="http://archerimagine.com/images/100DaysOfCode/writeBetterPython.png" title="Write Better Python"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This course taught about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PEP-8 Coding style guide.&lt;/li&gt;
&lt;li&gt;PEP-20 which is the Zen of python, can be accessed using &lt;code&gt;import this&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;PEP-257 for docstrings&lt;ul&gt;
&lt;li&gt;DocString which can fit one line should.&lt;/li&gt;
&lt;li&gt;DocString that cannot, put the closing triple quote on their own line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging Module of python&lt;ul&gt;
&lt;li&gt;6 Logs levels, &lt;code&gt;CRITICAL&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;NOTSET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Debugger &lt;code&gt;pdb&lt;/code&gt;, can be invoked by calling &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098994918071156737"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-thursday-21-february-2019"&gt;Day 03 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-03-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I completed the &lt;a href="https://teamtreehouse.com/library/objectoriented-python-2"&gt;Object Oriented Python course &lt;/a&gt;. With this I have also received the badge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Object Oriented Python Badge." src="http://archerimagine.com/images/100DaysOfCode/OOPython.png" title="Object Oriented Python Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today completed the project Dice Roller.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am still not confident in some part of Object Oriented Python, will soon polish it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098633238963240961"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-wednesday-20-february-2019"&gt;Day 02 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-02-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I just watched the first lecture from MIT OCW's &lt;a href="https://www.youtube.com/watch?v=bX3jvD7XFPs&amp;amp;list=PLB2BE3D6CA77BB8F7&amp;amp;index=2&amp;amp;t=0s"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a great lecture by &lt;a href="https://people.csail.mit.edu/guttag/"&gt;John Guttag &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am alternating between &lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?reload=9&amp;amp;list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lecture 1 of MIT 6.00SC Introduction to Computer Science and Programming taught me about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declarative and Imperative Knowledge.&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Fixed program and stored program computers&lt;/li&gt;
&lt;li&gt;Programming Language&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Static Semantics&lt;/li&gt;
&lt;li&gt;Semantics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types of errors&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiled Vs Interpreted Language &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098272030032572416"&gt;Link To Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-tuesday-19-february-2019"&gt;Day 01 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-01-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_15"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am learning Python from the learn python track of &lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;TreeHouse&lt;/a&gt;. I started this course, some days back, from now, will post regularly on behalf of #100DaysOfCode.&lt;/p&gt;
&lt;p&gt;Today I have completed the Advanced Object Badge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Advance Object TreeHouse Badge." src="http://archerimagine.com/images/100DaysOfCode/python.png" title="Advance Object TreeHouse Badge."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@property&lt;/code&gt; : This decorator is used to convert a class method into a class property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@property.setter&lt;/code&gt; : This decorator is used to make the method set a class property.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@classmethod&lt;/code&gt; : This is a decorator which takes a function as input works on it and returns another function as output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097923646327345153"&gt;Link to Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/970132/Dylan-Thomas-Life-always-offers-you-a-second-chance-is-called-tomorrow"&gt;QuoteFancy | Image Source &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nealschaffer.com/tweet-link-preview-image-twitter/"&gt;Create a Tweet With image Preview for Free &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry><entry><title>Render Maths Equation with Pelican Blog</title><link href="http://archerimagine.com/articles/pelican/Render-Maths-pelican-blog.html" rel="alternate"></link><published>2019-02-02T19:25:57+05:30</published><updated>2019-02-10T00:13:23+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2019-02-02:/articles/pelican/Render-Maths-pelican-blog.html</id><summary type="html">&lt;p&gt;This is a blog which will help in rendering math equation in pelican blog using the render_math plugin.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Eculid's Quote" src="http://archerimagine.com/images/discreteMaths/eulid.png" title="Things which are equal to the same things are also equal to one another."/&gt;&lt;/p&gt;
&lt;h2 id="de-morgans-law"&gt;De Morgan's Law&lt;a class="headerlink" href="#de-morgans-law" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;De Morgan’s Law (negation of conjunction)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$ \neg(P \wedge Q) \equiv \neg P \vee \neg Q $$&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;De Morgan’s Law (negation of alternative)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$ \neg(P \vee Q) \equiv \neg P \wedge \neg Q $$&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="pelican"></category><category term="maths"></category><category term="render_math"></category></entry><entry><title>Study Notes for Programming in C</title><link href="http://archerimagine.com/articles/c-programming/StudyNotes-Programming-in-C.html" rel="alternate"></link><published>2018-06-23T18:50:35+05:30</published><updated>2018-06-24T17:15:17+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2018-06-23:/articles/c-programming/StudyNotes-Programming-in-C.html</id><summary type="html">&lt;p&gt;Study Notes for learning C programming from the legendary book &lt;em&gt;The C Programming Language&lt;/em&gt; by "Brain W. Kenighan and Dennis M. Ritchie". This books is considered to be the bible for C Programming. This blog is my understanding's from the books and study notes, in case a reference is required in future.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Hello World Programming " src="http://archerimagine.com/images/CProgramming/helloWorld.png" title="Hello World Image"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C is not only a "System programming language" but has a wide variety of use in other domain.&lt;/p&gt;
&lt;h3 id="fundamental-data-types"&gt;Fundamental Data Types&lt;a class="headerlink" href="#fundamental-data-types" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Characters &lt;code&gt;char&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integers &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Floating point &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="derived-data-types"&gt;Derived Data Types&lt;a class="headerlink" href="#derived-data-types" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pointers&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pointers&lt;/strong&gt; provide for a machine-independent address arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Structure&lt;/li&gt;
&lt;li&gt;Unions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="expressions"&gt;Expressions&lt;a class="headerlink" href="#expressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt; are formed from &lt;strong&gt;Operator&lt;/strong&gt; and &lt;strong&gt;Operands&lt;/strong&gt;. Any expression including an assignment or a function call can be a &lt;strong&gt;statement&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="functions"&gt;Functions&lt;a class="headerlink" href="#functions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt; performs a single set of operation within a block of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt; may return values of &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fundamental data types.&lt;/li&gt;
&lt;li&gt;Derived Data types. except arrays&lt;ul&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Structure&lt;/li&gt;
&lt;li&gt;Unions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="variables"&gt;Variables&lt;a class="headerlink" href="#variables" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Variables can be internal to a function.&lt;/li&gt;
&lt;li&gt;External but known only within a single source file.&lt;/li&gt;
&lt;li&gt;Visible to the entire program.&lt;ul&gt;
&lt;li&gt;This is frowned upon and we should rarely use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="preprocessing"&gt;Preprocessing&lt;a class="headerlink" href="#preprocessing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Preprocessing step performs macro substitution on program text, inclusion of other source file or conditional compilation.&lt;/p&gt;
&lt;h3 id="usecase-not-provided-in-c"&gt;UseCase not provided in C&lt;a class="headerlink" href="#usecase-not-provided-in-c" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Operations directly dealing with Composite Objects, like&lt;ul&gt;
&lt;li&gt;Array,&lt;/li&gt;
&lt;li&gt;Structure, &lt;/li&gt;
&lt;li&gt;Unions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No Storage other than &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;auto&lt;/code&gt;matic.&lt;/li&gt;
&lt;li&gt;No Input/Output facilities.&lt;/li&gt;
&lt;li&gt;No built in file Access.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above facilities are included by help of standard library defined by the &lt;strong&gt;ANSI C Standard&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="ansi-c-standard"&gt;ANSI C Standard&lt;a class="headerlink" href="#ansi-c-standard" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New syntax for declaring and defining functions.&lt;/li&gt;
&lt;li&gt;Definition of a standard library.&lt;/li&gt;
&lt;li&gt;C is not a strongly typed language.&lt;/li&gt;
&lt;li&gt;C frowns on but permits the interchange of pointer and integers which has been eliminated by ANSI.&lt;/li&gt;
&lt;li&gt;No Automatic conversion of incompatible data types.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://excelwithbusiness.com/blog/say-hello-world-in-28-different-programming-languages/"&gt;Image Source &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C-Programming"></category><category term="Kernighan&amp;Ritchie"></category><category term="KnR"></category><category term="The C Programming Language."></category></entry><entry><title>100Days of Vim Log File</title><link href="http://archerimagine.com/articles/100daysofvim/100Days-of-vim-log-file.html" rel="alternate"></link><published>2017-12-24T17:56:02+05:30</published><updated>2018-01-06T22:31:48+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-12-24:/articles/100daysofvim/100Days-of-vim-log-file.html</id><summary type="html">&lt;p&gt;Vim is really hard to learn, and time and again I failed to use it consistently. I understand the basic of vim and can get some work done with VIM. I am targeting to become efficient in this. Hopefully the 100DaysOfVim will help me to be consistent.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Real Programmers xkcd" src="http://archerimagine.com/images/100DaysOfVim/real_programmers.png" title="Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want."/&gt;&lt;/p&gt;
&lt;p&gt;What is the definition of a Real Programmer is open for interpretation. I have been using VIM for last couple of years to do the basic editing and was happy  with whatever I learn about using vim in the process. Deep within I always wanted to become a better user of vim, tried different experimentation which includes installing mindless plugins, copying from different vimrc files sometimes understanding and sometime not understanding the concepts. Moral of the story is nothing sticked to my brain or what we call muscle memory to use it efficiently.&lt;/p&gt;
&lt;p&gt;Fortunately enough when I was struggling with the idea to become better at vim, this article &lt;a href="https://medium.com/@peterxjang/how-to-learn-vim-a-four-week-plan-cd8b376a9b85"&gt;How To Learn Vim: A Four Week Plan &lt;/a&gt; came along and I was immediately interested, clubbed this with the &lt;a href="http://100daysofx.com/"&gt;100daysofx&lt;/a&gt; and I had a plan at becoming better at VIM. &lt;/p&gt;
&lt;p&gt;Through this log file, I will update what ever resource I will use and what ever practice I am doing everyday. God permits if I become good at vim in these 100 days it will be an achievement for me. Hoping for the best I hereby jump into the world of Real Programmers.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-4-saturday-january-62018"&gt;Day -4: Saturday January 6,2018&lt;a class="headerlink" href="#day-4-saturday-january-62018" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;code&gt;vimtutor&lt;/code&gt; exercise in ~11 minutes.&lt;/li&gt;
&lt;li&gt;Learned about these keystrokes.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; : insert before the cursor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : delete the character under the cursor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; : Left Movement. (Left most Key)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; : Down Movement. (Anchor like &lt;code&gt;j&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; : Up Movement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; : Right Movement. (Right most key)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Day 05 Pomodoro Image for Vim Tutor" src="http://archerimagine.com/images/100DaysOfVim/vimPomodoro_05.jpg" title="Day 05 Pomodoro Image for Vim Tutor"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In my first attempt while learning &lt;code&gt;vimtutor&lt;/code&gt; some years ago, I was not able to understand that &lt;code&gt;vimtutor&lt;/code&gt; is a separate command in shell.&lt;/li&gt;
&lt;li&gt;From that beginning to today where I am comfortable in using &lt;code&gt;vimtutor&lt;/code&gt;, surely have come a long way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Link to Tweet&lt;/strong&gt; &lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-5-friday-january-52018"&gt;Day -5: Friday January 5,2018&lt;a class="headerlink" href="#day-5-friday-january-52018" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_1"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;code&gt;vimtutor&lt;/code&gt; exercise in ~11 minutes.&lt;/li&gt;
&lt;li&gt;Learned about these keystrokes.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; : undo just one change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt; : Undo changes in one line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; : Redo the last change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:s/searchforstring/replacewithSting/g&lt;/code&gt; : Search and replace in one line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Day 04 Pomodoro Image for Vim Tutor" src="http://archerimagine.com/images/100DaysOfVim/vimPomodoro_04.jpg" title="Day 04 Pomodoro Image for Vim Tutor"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vimtutor&lt;/code&gt; is helping me gain the confidence on using VIM. Now I do not feel threatened by VIM.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Link to Tweet&lt;/strong&gt; &lt;a href="https://twitter.com/animeshkbhadra/status/949341204021354496"&gt;#100DaysOfVim Day-04 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-6-thursday-january-42018"&gt;Day -6: Thursday January 4,2018&lt;a class="headerlink" href="#day-6-thursday-january-42018" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_2"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;code&gt;vimtutor&lt;/code&gt; exercise in ~14 minutes.&lt;/li&gt;
&lt;li&gt;Learned about these keystrokes.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; : jump a word, not special char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; : jump to end of word.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; : jump to end of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; : jump to first column of the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Day 03 Pomodoro Image for Vim Tutor" src="http://archerimagine.com/images/100DaysOfVim/vimPomodoro_03.jpg" title="Day 03 Pomodoro Image for Vim Tutor"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just &lt;code&gt;vimtutor&lt;/code&gt; teaches so many basic key strokes to become a better beginner, everyone thinking of learning vim should try this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Link to Tweet&lt;/strong&gt; &lt;a href="https://twitter.com/animeshkbhadra/status/948978390173761536"&gt;#100DaysOfVim Day-03 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-7-wednesday-january-32018"&gt;Day -7: Wednesday January 3,2018&lt;a class="headerlink" href="#day-7-wednesday-january-32018" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_3"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;code&gt;vimtutor&lt;/code&gt; exercise in ~14 minutes.&lt;/li&gt;
&lt;li&gt;Learned about these keystrokes.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; : Append at the next cursor point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; : Append at the end of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; : undo a single instruction.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt; : undo a complete line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Day 02 Pomodoro Image for Vim Tutor" src="http://archerimagine.com/images/100DaysOfVim/vimPomodoro_02.jpg" title="Day 02 Pomodoro Image for Vim Tutor"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Looking at the key combination of VIM, I feel like each characters have a similar story.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Link to Tweet&lt;/strong&gt; &lt;a href="https://twitter.com/animeshkbhadra/status/948617542905430016"&gt;#100DaysOfVim Day-02 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-8-wednesday-january-22018"&gt;Day -8: Wednesday January 2,2018&lt;a class="headerlink" href="#day-8-wednesday-january-22018" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_4"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;code&gt;vimtutor&lt;/code&gt; exercise in ~20 minutes. The idea is to, do this for next 7 days as suggested in one blog link. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Day 01 Pomodoro Image for Vim Tutor" src="http://archerimagine.com/images/100DaysOfVim/vimPomodoro_01.jpg" title="Day 01 Pomodoro Image for Vim Tutor"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I have been using vim for a long time, but never took the pain to master it. I am starting this challenge with an idea that I will be able to move to intermediate level vim.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Link To Tweet&lt;/strong&gt; &lt;a href="https://twitter.com/animeshkbhadra/status/948606558400737280"&gt;#100DaysOfVim Day-01 Tweet&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@peterxjang/how-to-learn-vim-a-four-week-plan-cd8b376a9b85"&gt;How To Learn Vim: A Four Week Plan &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://100daysofx.com/"&gt;100daysofx&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://imgs.xkcd.com/comics/real_programmers.png"&gt;Real Programmers xkcd &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="#100DaysOfVim"></category><category term="#100DaysOfX"></category></entry><entry><title>100Days of Code Log File</title><link href="http://archerimagine.com/articles/100daysofcode/100Days-of-code-log-file.html" rel="alternate"></link><published>2017-12-24T00:03:34+05:30</published><updated>2018-01-03T22:45:53+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-12-24:/articles/100daysofcode/100Days-of-code-log-file.html</id><summary type="html">&lt;p&gt;Hello World!, You are about the witness the beginning of an epic 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Sample Screen Shot" src="http://archerimagine.com/images/100DaysOfCode/pythonCode.jpg" title="Sample ScreenShot"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiat warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;h2 id="day-8-wednesday-january-22018"&gt;Day -8: Wednesday January 2,2018&lt;a class="headerlink" href="#day-8-wednesday-january-22018" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;code&gt;vimtutor&lt;/code&gt; exercise in ~20 mins. The idea is to do this for next 7 days as suggested in one blog link. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;</content><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category></entry><entry><title>Tips to improve work flow in pelican blog.</title><link href="http://archerimagine.com/articles/pelican/tips-for-improving-workflow-in-pelican.html" rel="alternate"></link><published>2017-05-11T23:05:38+05:30</published><updated>2017-05-12T00:10:48+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-11:/articles/pelican/tips-for-improving-workflow-in-pelican.html</id><summary type="html">&lt;p&gt;We all know a lot of meta-data is required for writing a pelican blog, we can use Sublime Text to improve this meta-data collection, and also see some useful commands to improve the output.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;We all know a lot of meta-data is required for writing a pelican blog, we can use Sublime Text to improve this meta-data collection, and also see some useful commands to improve the output.&lt;/p&gt;
&lt;h2 id="fileheader-to-write-meta-data-in-sublime-text"&gt;FileHeader to Write Meta-Data in Sublime Text&lt;a class="headerlink" href="#fileheader-to-write-meta-data-in-sublime-text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sublimetext.com/," title=" Sublime Text "&gt;Sublime Text&lt;/a&gt; is a very nice Text editor for writing Markdown. There are already a lot of articles on how to configure Sublime text for Markdown.&lt;/p&gt;
&lt;p&gt;We will discuss about one specific package in Sublime Text called &lt;a href="https://github.com/shiyanhui/FileHeader" title="FileHeader Package"&gt;FileHeader&lt;/a&gt;, this package helps in writing custom File Header, so we can use this package to provide some Meta-Data to the pelican blog by default.&lt;/p&gt;
&lt;p&gt;FileHeader comes with predefined header template, if we want to change the content of these templates we can use a custom fileHeader template.&lt;/p&gt;
&lt;p&gt;Since we are writing our content in markdown, I have extended the default Markdown template. The modified Markdown Template have to saved in this path &lt;code&gt;/home/username/.config/sublime-text-2/Packages/User/fileHeaderTemplatesUser&lt;/code&gt; named as &lt;code&gt;Markdown.tmpl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;FileHeader uses Jinja2 template, the Markdown template looks like &lt;a href="https://gist.github.com/archeranimesh/dcd1773af0ad41e9e1572d293becaa87" title="Gist Markdown "&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;create_time&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;last_modified_time&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;file_name_without_extension&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;subtitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TOC&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to give some configuration for it to work. Kindly add this in the &lt;code&gt;FileHeader.sublime-settings&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"custom_template_header_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/home/username/.config/sublime-text-2/Packages/User/fileHeaderTemplatesUser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ABC"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this every time you create a new Markdown file, the above template will be automatically applied.&lt;/p&gt;
&lt;h2 id="clean-the-output-directory"&gt;Clean the Output Directory&lt;a class="headerlink" href="#clean-the-output-directory" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are working with two git repositories when writing a pelican blog.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the folder which has the &lt;code&gt;content&lt;/code&gt; and all the setting file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the actual HTML page generated by Pelican.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most often than not we might want to generate the complete blog with a clean build with commands like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content -ds publishconf.py  &lt;span class="c1"&gt;# While Publishing&lt;/span&gt;
pelican content -d                  &lt;span class="c1"&gt;# Local host.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with these above commands is they might delete the &lt;code&gt;.git&lt;/code&gt; or even the &lt;code&gt;CNAME&lt;/code&gt; directory inside &lt;code&gt;output&lt;/code&gt; losing the link with version control. We can prevent this by adding this configuration into our &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_RETENTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".hg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"CNAME"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This change will make sure that the above mentioned file are not deleted. Kindly keep in mind this works for only the above 2 version of the command, if you use &lt;code&gt;make clean&lt;/code&gt; then this configuration is of no use.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/issues/574" title="clean should not remove .git metadata #574"&gt;clean should not remove .git metadata #574 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Integrating 3rd party services with Pelican Blog.</title><link href="http://archerimagine.com/articles/pelican/integrating-3rd-party-services-with-pelican.html" rel="alternate"></link><published>2017-05-10T22:47:22+05:30</published><updated>2017-05-10T23:48:03+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-10:/articles/pelican/integrating-3rd-party-services-with-pelican.html</id><summary type="html">&lt;p&gt;Pelican with its themes and plugins provides lots of functionality, but it also integrates well with 3rd party services like, MailChimp, DISQUS, Google analytics, Google Adsense, RSS feeds etc.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;We have already discussed two types of settings file in &lt;a href="http://archerimagine.com/articles/pelican/pelican-settings-files.html" title="Pelican Settings File."&gt;pelican&lt;/a&gt;, and we found that &lt;code&gt;publishconf.py&lt;/code&gt; is the file which is picked along with &lt;code&gt;pelicanconf.py&lt;/code&gt; when we are generating the blog for publishing.&lt;/p&gt;
&lt;p&gt;These 3rd party service integration happen over this &lt;code&gt;publishconf.py&lt;/code&gt; file, because we do not want these services to be activated when running on &lt;a href="http://localhost:8000/"&gt;localhost &lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="google-analytics"&gt;Google Analytics.&lt;a class="headerlink" href="#google-analytics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google Analytics provide us with very valuable insights into how a user interacts with the website, like the links which users click the most etc. This is a free service which really helps when we are starting out.&lt;/p&gt;
&lt;p&gt;When we create an account with &lt;a href="https://analytics.google.com/"&gt;Google Analytics &lt;/a&gt;, we receive a tracking code which we need to provide to Pelican blog. This tracking code is generally of the form &lt;code&gt;UA-********-*&lt;/code&gt;, which you can find in this menu flow &lt;code&gt;Administration ---&amp;gt; Property Settings ---&amp;gt; Tracking Id&lt;/code&gt;, copy this tracking id and provide it to &lt;code&gt;publishconf.py&lt;/code&gt; with this settings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"UA-********-*"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is it, we will get all the analytics data from our website on Google Analytics.&lt;/p&gt;
&lt;h2 id="disqus"&gt;DISQUS&lt;a class="headerlink" href="#disqus" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://disqus.com/" title="Disqus"&gt;DISQUS&lt;/a&gt; is a commenting system which is used extensively in the pelican blog world as we have to engage with our visitors for providing feedback and anything which is deemed important to the visitors.&lt;/p&gt;
&lt;p&gt;Integrating Disqus with any blog requires a &lt;em&gt;ShortName&lt;/em&gt;, which is a unique identifier for our site, which can be found in this path &lt;code&gt;https://&amp;lt;username&amp;gt;.disqus.com/admin/settings/general/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We need to add this setting into the &lt;code&gt;publishconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"shortName"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#collapsible-comments"&gt;Elegant Theme&lt;/a&gt; provides a nice feature called &lt;em&gt;Collapsible Comments&lt;/em&gt; in which we will not show all the comments when the page loads. This comments will only be shown when a user presses the &lt;code&gt;comment&lt;/code&gt; link.&lt;/p&gt;
&lt;p&gt;We can use a &lt;code&gt;COMMENTS_INTRO&lt;/code&gt; settings to draw the user for engaging with the site.&lt;/p&gt;
&lt;h2 id="mailchimp"&gt;MailChimp&lt;a class="headerlink" href="#mailchimp" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mailchimp.com/" title="MailChimp "&gt;MailChimp&lt;/a&gt; is a way to provide newsletters to your active subscribers, in this way they can be informed for any new post also immediately. Mailchimp can also be used as an email marketing platform. This is also free for basic subscription.&lt;/p&gt;
&lt;p&gt;We will need a &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt;, URL which we can get by creating one list in MailChimp.&lt;/p&gt;
&lt;p&gt;To create a mailing newsletter we can use these links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kb.mailchimp.com/lists/growth/create-a-new-list" title="MailChimp Create a New List"&gt;MailChimp Create a New List &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kb.mailchimp.com/lists/signup-forms/add-a-signup-form-to-your-website"&gt;Add a Signup Form to Your Website &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.disqus.com/customer/portal/articles/466208" title="What's a Shortname? "&gt;What's a shortname?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kb.mailchimp.com/lists/signup-forms/host-your-own-signup-forms"&gt;Host Your Own Signup Forms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Home Page feature for Elegant Theme</title><link href="http://archerimagine.com/articles/pelican/home-page-features-elegant-theme.html" rel="alternate"></link><published>2017-05-09T23:53:05+05:30</published><updated>2017-05-10T00:15:37+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-09:/articles/pelican/home-page-features-elegant-theme.html</id><summary type="html">&lt;p&gt;Elegant has a nice feature called the Home Page, which provides a About Me combined with information from GitHub on the project someone is working.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Elegant has a nice feature called the Home Page, which provides a About Me combined with information from GitHub on the project someone is working. These feature are again controlled by a configuration.&lt;/p&gt;
&lt;p&gt;In place of adding this configuration into &lt;code&gt;pelicanconf.py&lt;/code&gt; we will create a new file called &lt;code&gt;elegantconfig.py&lt;/code&gt;, and import this file into &lt;code&gt;pelicanconf.py&lt;/code&gt; by calling &lt;code&gt;from elegantConfig import *&lt;/code&gt;. This will make sure all the configuration from &lt;code&gt;elegantconfig.py&lt;/code&gt; is available while generating the blog.&lt;/p&gt;
&lt;p&gt;There are two configuration for the Home Page.&lt;/p&gt;
&lt;h2 id="landing_page_about"&gt;&lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt;&lt;a class="headerlink" href="#landing_page_about" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a Dictionary with two field &lt;code&gt;"title"&lt;/code&gt; and &lt;code&gt;"details"&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"title"&lt;/code&gt; : This gives a heading Home Page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"details"&lt;/code&gt; : It is the content in HTML which mostly contains the &lt;code&gt;About Me&lt;/code&gt; description which one wants to provide.&lt;ul&gt;
&lt;li&gt;One clever way of writing this HTML is, write a about page in markdown, generate the pelican blog with this about page and then right click on the page and select view source, copy the relevant text with the HTML code in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="projects"&gt;&lt;code&gt;PROJECTS&lt;/code&gt;&lt;a class="headerlink" href="#projects" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PROJECTS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is also a list of Dictionary with these field in each dictionary, and the value of each of these field is a &lt;code&gt;string&lt;/code&gt; and not &lt;code&gt;HTML&lt;/code&gt; in case of &lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt;'s &lt;code&gt;"details"&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"name"&lt;/code&gt; : The project name which you want to be displayed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"url"&lt;/code&gt; : The link to the project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"description"&lt;/code&gt; : The description you want to provide for the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Problem Faced when integrating with Elegant Themes.</title><link href="http://archerimagine.com/articles/pelican/integration-problem-with-elegant-theme.html" rel="alternate"></link><published>2017-05-09T22:55:40+05:30</published><updated>2017-05-11T22:55:07+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-09:/articles/pelican/integration-problem-with-elegant-theme.html</id><summary type="html">&lt;p&gt;Elegant was my theme choice, and while integrating this theme with my blog I found that a lot of things does not work out of the box, and some changes are required in the themes itself. I am listing these changes here, if this are still unresolved in the future.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Elegant was my theme choice, and while integrating this theme with my blog I found that a lot of things does not work out of the box, and some changes are required in the themes itself. I am listing these changes here, if this are still unresolved in the future.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Elegant theme"&gt;Elegant &lt;/a&gt;, requires a lot of different plugins to make it work the way it was designed. If you see the documentation on the above link, it does not mention the important plugins which are required to make it work, it just provides an explanation on the feature.&lt;/p&gt;
&lt;p&gt;In this blog post I am listing down the issues which I faced while integrating the Elegant themes.&lt;/p&gt;
&lt;h2 id="faviconico-not-displayed-with-elegant"&gt;favicon.ico not displayed with Elegant&lt;a class="headerlink" href="#faviconico-not-displayed-with-elegant" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you read the &lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#favicon-and-speed-dial-icon" title="Favicon Integration Elegant"&gt;documentation &lt;/a&gt; on how to enable &lt;code&gt;favicon.ico&lt;/code&gt; for Elegant themes, the process is pretty straight forward, just place the icons into this directory &lt;code&gt;content/theme/images&lt;/code&gt;, and define &lt;code&gt;STATIC_PATHS&lt;/code&gt; with &lt;code&gt;STATIC_PATHS = ['theme/images', 'images']&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you follow the above process then most probably you will still not be getting the &lt;code&gt;favicon.ico&lt;/code&gt;, the reason being there is one more configuration which needs to enabled in &lt;code&gt;pelicanconf.py&lt;/code&gt; in addition to above two.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'theme/images'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;USE_SHORTCUT_ICONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason for this is, the links for including &lt;code&gt;favicon&lt;/code&gt; are generated in this template &lt;code&gt;themes/elegant/templates/_includes/favicon_links.html&lt;/code&gt;, and the link generation is under a configuration named &lt;code&gt;USE_SHORTCUT_ICONS&lt;/code&gt;, so until we make it &lt;code&gt;True&lt;/code&gt; the links will not be generated.&lt;/p&gt;
&lt;h2 id="issues-while-integrating-tipue-search"&gt;Issues while integrating Tipue Search&lt;a class="headerlink" href="#issues-while-integrating-tipue-search" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="prerequisite"&gt;Prerequisite&lt;a class="headerlink" href="#prerequisite" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search." title="Tipue Search plugin "&gt;Tipue Search plugin &lt;/a&gt; integration is little different from other plugin.&lt;/p&gt;
&lt;p&gt;This plugin has an external dependency on &lt;code&gt;BeautifulSoup&lt;/code&gt;, we have to install this python package first in our environment &lt;code&gt;pelican1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to add this plugin name into &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tipue_search'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we build our blog after this we should see our search functionality working, but we see 2 issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search Result are not displayed.&lt;/li&gt;
&lt;li&gt;Tipue search return undefined URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="search-result-are-not-displayed"&gt;Search Result are not displayed&lt;a class="headerlink" href="#search-result-are-not-displayed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Elegant uses some predefined HTML pages to render few of its content, &lt;code&gt;search&lt;/code&gt; functionality is based on one such file, so we have to provide that in the &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'archives'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'404'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we do this changes we will see the search result getting listed, but on clicking those link it will redirect to an undefined URL.&lt;/p&gt;
&lt;h3 id="tipue-search-return-undefined-url"&gt;Tipue search return undefined URL.&lt;a class="headerlink" href="#tipue-search-return-undefined-url" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we click on the Search result, we get the URL as undefined, this issues is still not solved, there is already a pull request pending on the Github.&lt;/p&gt;
&lt;p&gt;Kindly visit these two links for more details.
&lt;em&gt; &lt;a href="https://github.com/talha131/pelican-elegant/issues/147" title="Tipue search return undefined url"&gt;Tipue search return undefined url &lt;/a&gt;.
&lt;/em&gt; To solve the issue, we have to modify the plugin manually as mentioned in the &lt;a href="https://github.com/getpelican/pelican-plugins/pull/873/files" title="Tipue search return undefined url"&gt;pull request&lt;/a&gt;
    - Change the file in &lt;code&gt;plugins/tipue_search/tipue_search.py&lt;/code&gt;, line no 61 add this code &lt;code&gt;'loc': page_url&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="toc-integration-with-elegant"&gt;TOC Integration with Elegant&lt;a class="headerlink" href="#toc-integration-with-elegant" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elegant theme has a side bar with the Table of Content of the blog post displayed. This is also achieved based on a plugin named &lt;code&gt;extract_toc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have to add this into the &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tipue_search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'extract_toc'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also a Markdown settings which we have to update in the same file like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'extension_configs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.toc'&lt;/span&gt; &lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'permalink'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to the above changes, every blog post after the file meta-data section should have an entry named &lt;code&gt;[TOC]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="syntax-highlighting"&gt;Syntax Highlighting&lt;a class="headerlink" href="#syntax-highlighting" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When writing a technical blog we might be interested in syntax highlighting of the code we write, we can achieve this with following configuration in &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'extension_configs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.codehilite'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'css_class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'highlight'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.extra'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.meta'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s1"&gt;'markdown.extensions.toc'&lt;/span&gt; &lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;'permalink'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;'output_format'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'html5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="next-and-previous-articles"&gt;Next and Previous Articles.&lt;a class="headerlink" href="#next-and-previous-articles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we read the documentation of &lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#next-and-previous-articles"&gt;Elegant Next and Previous Articles&lt;/a&gt;, it clearly states that we do not require any additional plugins for this feature, but it does not work out of the box.&lt;/p&gt;
&lt;p&gt;We have to integrate the &lt;code&gt;neighbors&lt;/code&gt; plugins and then it works. Now we will have these in our &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tipue_search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'extract_toc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'neighbors'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="missing-icons-for-social-links"&gt;Missing icons for social links&lt;a class="headerlink" href="#missing-icons-for-social-links" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican supports a way to integrate most of the social Website like &lt;a href="https://twitter.com/" title="Twitter"&gt;Twitter &lt;/a&gt;, &lt;a href="https://www.facebook.com/"&gt;Facebook &lt;/a&gt;, &lt;a href="https://github.com/"&gt;Github &lt;/a&gt; etc. This is done by the help of this settings in &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'URL to your profile'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'linkedin-square'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'URL to your profile'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'facebook'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'URL to your profile'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'quora'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'URL to your profile'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reddit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'URL to your profile'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'URL to your profile'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This explains that we have a tuple of tuple in the settings name &lt;code&gt;SOCIAL&lt;/code&gt;, if you see each website name is in a particular format, as explained in this &lt;a href="https://github.com/talha131/pelican-elegant/issues/98" title=" Missing icons for social links "&gt;link&lt;/a&gt;, this format is taken from &lt;a href="http://fontawesome.io/icons/#brand" title="Font Awesome Brands"&gt;Font Awesome icon for social links&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When naming the website name in &lt;code&gt;SOCIAL&lt;/code&gt; configuration, keep in mind the way the website in named in Font Awesome and remove the &lt;code&gt;fa-&lt;/code&gt; part of the name.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Elegant theme"&gt;Elegant &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Kindly read this documentation for other configuration which gives more flexibility in terms of the themes like Article Subtitle, Add License to your Site etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/talha131/onCrashReboot/blob/master/pelicanconf.py"&gt;pelicanconf of oncrashreboot blog&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Visit this configuration file for any doubts on the setting of elegant theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#favicon-and-speed-dial-icon" title="Favicon Integration Elegant"&gt;Favicon documentation &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search." title="Tipue Search plugin "&gt;Tipue Search plugin &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/talha131/pelican-elegant/issues/147" title="Tipue search return undefined url"&gt;Tipue search return undefined url &lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/pull/873/files" title="Tipue search return undefined url"&gt;Tipue search return undefined url pull request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/talha131/pelican-elegant/issues/98" title=" Missing icons for social links "&gt;Missing icons for social links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fontawesome.io/icons/#brand" title="Font Awesome Brands"&gt;Font Awesome icon for social links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Expressing the content with Pelican Themes.</title><link href="http://archerimagine.com/articles/pelican/expressing-with-pelican-themes.html" rel="alternate"></link><published>2017-05-07T22:35:15+05:30</published><updated>2017-05-09T23:38:17+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-07:/articles/pelican/expressing-with-pelican-themes.html</id><summary type="html">&lt;p&gt;We will customize of the very popular themes, Elegant, and make it to suit our need and also integrate with the plugins required for Elegant to work.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;We have already discussed about Pelican Themes and Plugins in this &lt;a href="http://archerimagine.com/articles/pelican/customizing-pelican-blog-with-plugin-and-themes.html" title="Customizing Pelican Blog with plugin and themes"&gt;blog&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We have also seen the comparison between the various popular themes. &lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Comparison between different themes."&gt;Elegant &lt;/a&gt; is our choice of Themes because of search functionality which it provides along with the minimalist concepts.&lt;/p&gt;
&lt;p&gt;We will first focus on how we can integrate one particular themes and also one particular plugins which will give us a fair amount of idea on how to integrate different plugins.&lt;/p&gt;
&lt;h2 id="integrating-the-elegant-theme"&gt;Integrating the Elegant Theme&lt;a class="headerlink" href="#integrating-the-elegant-theme" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have already created folder named &lt;code&gt;plugins&lt;/code&gt; and &lt;code&gt;themes&lt;/code&gt;, which are clone of the Pelican &lt;a href="https://github.com/getpelican/pelican-plugins" title="Pelican Plugins "&gt;Plugins&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican-themes" title="Pelican Themes "&gt;Themes&lt;/a&gt; repository. If we see the directory listing inside &lt;code&gt;themes&lt;/code&gt; folder we fill find different folders with distinguished names, these are the themes name. &lt;/p&gt;
&lt;p&gt;To use any of the themes in this folder we have to add this pelican settings in the &lt;code&gt;pelicanconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'themes/elegant'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Follow the commands to generate the site and launch the site, and you have your new themes applied.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;span class="nb"&gt;cd&lt;/span&gt; output/
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="integrating-a-plugin-into-pelican"&gt;Integrating A Plugin into Pelican&lt;a class="headerlink" href="#integrating-a-plugin-into-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The process to integrate any plugin is also similar to integrating Themes. If we see inside the &lt;code&gt;plugins&lt;/code&gt; directory which we had cloned, we will find a lot of different folder name just like in &lt;code&gt;themes&lt;/code&gt; directory. Each of these name is a &lt;code&gt;plugin&lt;/code&gt; name.&lt;/p&gt;
&lt;p&gt;To integrate a plugin into Pelican we have to add these 2 configuration into the &lt;code&gt;pelicanconf.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'plugin'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# Name of the directory where plugin are kept.&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c1"&gt;# Name of the particular plugin inside the directory.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above code sample, we can see we have integrated the &lt;code&gt;sitemap&lt;/code&gt; plugin, and as per the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/sitemap" title="Sitemap Plugin "&gt;documentation&lt;/a&gt;, this generates a Sitemap which we generally submit it to some Webmaster tools. &lt;/p&gt;
&lt;p&gt;Likewise, if we want to integrate any other &lt;code&gt;plugins&lt;/code&gt;, we have just add it to the list variable &lt;code&gt;PLUGINS&lt;/code&gt; along with the settings required for that plugins defined in its documentation.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Elegant Themes"&gt;Elegant &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins" title="Pelican Plugins "&gt;Pelican Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes" title="Pelican Themes "&gt;Pelican Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/sitemap" title="Sitemap Documentation "&gt;Sitemap Documentation&lt;/a&gt;,&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Customizing Pelican blog with the help of Plugin and themes</title><link href="http://archerimagine.com/articles/pelican/customizing-pelican-blog-with-plugin-and-themes.html" rel="alternate"></link><published>2017-05-03T23:05:51+05:30</published><updated>2017-05-07T22:56:29+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-03:/articles/pelican/customizing-pelican-blog-with-plugin-and-themes.html</id><summary type="html">&lt;p&gt;Pelican blog has an active community of developers who are always at the look out to modify and enhance the power of Pelican blog. Pelican plugin and Themes are one way of doing the same.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Pelican Blogs gives its user the full power to customize to the want of the user. We have been using the default themes and default setting provided by Pelican with not much customization and the results are also quite good.&lt;/p&gt;
&lt;p&gt;Enhancing the present blog further will require us to use certain Plugins and Themes which will extended the functionality. These are the 2 repository which we should clone into for getting these enhancements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins" title="Pelican Plugins "&gt;pelican-plugins&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is the repository for the plugins.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone --recursive https://github.com/getpelican/pelican-plugins.git plugins&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes" title="Pelican Themes"&gt;pelican-themes &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is the themes repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone --recursive https://github.com/getpelican/pelican-themes.git themes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="plugins-vs-themes"&gt;Plugins Vs Themes&lt;a class="headerlink" href="#plugins-vs-themes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first things which we have to decide is to choose the list of plugins or the Themes we want to use. I would say first decide on Themes and the see what all plugins are required to support these themes. All plugins are not plug able with all the themes.&lt;/p&gt;
&lt;p&gt;We have to first start by choosing the themes, and the corresponding plugin required for it. This path is again the easiest as we are already treading the known, when we are comfortable with this integration we can always go ahead and enhance the existing themes and plugins to suit our needs. Till we reach the Jedi stage this precooked solution is the best approach.&lt;/p&gt;
&lt;h2 id="flex-vs-elegant-vs-bootstrap3"&gt;Flex Vs Elegant vs BootStrap3&lt;a class="headerlink" href="#flex-vs-elegant-vs-bootstrap3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we are deciding on which themes to choose for the blog, broadly the working choice would be &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.alexandrevicenzi.com/flex-pelican-theme.html" title="Flex: Responsive Pelican theme "&gt;Flex: Responsive Pelican theme &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Elegant Why it is the best Pelican theme"&gt;Elegant Why it is the best Pelican theme &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3" title="BootStrap3"&gt;BootStrap3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many others, which you are free to explore, but for my blog I had considered these 3 options. Each one has its own pros and cons, the choice was very difficult between these 3, and in future I might even consider jumping ships to the other themes.&lt;/p&gt;
&lt;p&gt;Let's discuss some outline of the above 3 themes &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.alexandrevicenzi.com/flex-pelican-theme.html" title="Flex: Responsive Pelican theme "&gt;Flex: Responsive Pelican theme &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This has out of the box integration with a lot of plugins including &lt;a href="http://www.addthis.com/" title="AddThis"&gt;AddThis&lt;/a&gt;, which is not available for any other themes.&lt;/li&gt;
&lt;li&gt;This also has support for Google AdSense, which again is missing in most of the plugin.&lt;/li&gt;
&lt;li&gt;Actively maintained, the last check-in on its Github repository was on Apr 24, 2017.&lt;/li&gt;
&lt;li&gt;Tipue_Search is also on the way, there is an open issue on the repository, &lt;a href="https://github.com/alexandrevicenzi/Flex/issues/49" title="Tipue Search "&gt;Search #49&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This facility of search is the only reason I dropped &lt;a href="https://blog.alexandrevicenzi.com/flex-pelican-theme.html" title="Flex: Responsive Pelican theme "&gt;Flex &lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3" title="BootStrap3"&gt;BootStrap3&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is a full hack able implementation of BootStrap3, and will try to use these Themes, once I get my hand dirty enough with the modern CSS and Web Technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Elegant Why it is the best Pelican theme"&gt;Elegant Why it is the best Pelican theme &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;I chose this theme just for its minimalist design and search feature.&lt;/li&gt;
&lt;li&gt;It has an integration with MailChimp.&lt;/li&gt;
&lt;li&gt;This is not an actively managed project, the last commit on this repository was on Sep 8, 2014, which is good 3 years ago.&lt;/li&gt;
&lt;li&gt;We can use and modify this theme for our satisfaction if a bug is hampering our development.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have decided on our Themes, the Plugins required for these themes are as below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sitemap&lt;/li&gt;
&lt;li&gt;tipue_search&lt;/li&gt;
&lt;li&gt;extract_toc&lt;/li&gt;
&lt;li&gt;neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The standard features and enhancements already available&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;MailChimp Integration.&lt;/li&gt;
&lt;li&gt;Custom 404 Page.&lt;/li&gt;
&lt;li&gt;Collapsible Comments&lt;/li&gt;
&lt;li&gt;Page and Article Subtitle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will not try to see the integration of all the above feature with the Elegant themes.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features" title="Elegant Why it is the best Pelican theme"&gt;Elegant Why it is the best Pelican theme &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3" title="BootStrap3"&gt;BootStrap3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.alexandrevicenzi.com/flex-pelican-theme.html" title="Flex: Responsive Pelican theme "&gt;Flex: Responsive Pelican theme &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes" title="Pelican Themes"&gt;pelican-themes &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins" title="Pelican Plugins "&gt;pelican-plugins &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Configuring Github pages with Custom Domain</title><link href="http://archerimagine.com/articles/pelican/linking-domain-with-github-pages.html" rel="alternate"></link><published>2017-05-02T23:22:29+05:30</published><updated>2017-05-06T23:38:22+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-05-02:/articles/pelican/linking-domain-with-github-pages.html</id><summary type="html">&lt;p&gt;We will link our Godaddy domain name with our own Github pages.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;In the first series of blog post we have seen how to create a pelican blog, customize a little and also host it from Github pages. We can also use Github pages as a hosting service and link any of the domain name providers with this hosting. In this post I have taken the example of GoDaddy, but the process should not much different for any other domain name provider.&lt;/p&gt;
&lt;p&gt;The process to link a Godaddy Domain to Github Pages can be divided into 2 Steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure your Github repository&lt;/li&gt;
&lt;li&gt;Configure the DNS at &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="configure-github-repository"&gt;Configure Github Repository&lt;a class="headerlink" href="#configure-github-repository" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have already made a Github Pages website in our previous post, kindly follow the steps mentioned &lt;a href="http://archerimagine.com/articles/pelican/publishing-blog-github-pages.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we have a Github Pages URL, we have to configure a CNAME in this repository, this can be done in 2 ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Local Repository&lt;/li&gt;
&lt;li&gt;Directly on Github.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="local-repository"&gt;Local Repository&lt;a class="headerlink" href="#local-repository" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a local file in the repository with the name CNAME.&lt;/li&gt;
&lt;li&gt;Just have one line in the file. &lt;code&gt;example.com&lt;/code&gt;, where &lt;code&gt;example.com&lt;/code&gt; is your domain you have bought from &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Push the changes to &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="directly-on-github-pages"&gt;Directly on Github Pages.&lt;a class="headerlink" href="#directly-on-github-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On the repository in &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;, you will see something like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Settings" src="http://archerimagine.com/images/launchSite/Settings.png" title="GitHub Setting"/&gt;&lt;/p&gt;
&lt;p&gt;In the above Click on the &lt;code&gt;Settings&lt;/code&gt;, Scroll down you will see something like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Pages Settings" src="http://archerimagine.com/images/launchSite/gitHubPages.png" title="GitHub Pages Setting"/&gt;&lt;/p&gt;
&lt;p&gt;Enter the domain you have purchased from &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are the only changes required to be done in GitHub.&lt;/p&gt;
&lt;h2 id="configure-the-dns-at-godaddy"&gt;Configure the DNS at &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;&lt;a class="headerlink" href="#configure-the-dns-at-godaddy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The easiest of the all the below references is &lt;a href="http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html"&gt;Configuring a Godaddy domain name with github pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The real issue in all the links is that it shows the old UI of &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;, so some things get confusing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the account setting page, which mostly will like in this &lt;a href="https://mya.godaddy.com/?pc=urlargs"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The link will look like this.&lt;/li&gt;
&lt;li&gt;&lt;img alt="Godaddy Accounts Settings" src="http://archerimagine.com/images/launchSite/accountSettingsGodaddy.png" title="Godaddy Accounts Settings"/&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; Symbols in Front of Domain, and Click on the &lt;code&gt;Manage DNS&lt;/code&gt; Link&lt;/li&gt;
&lt;li&gt;&lt;img alt="Godaddy DNS Management" src="http://archerimagine.com/images/launchSite/manageDNS.png" title="Godaddy DNS Management"/&gt;&lt;/li&gt;
&lt;li&gt;The link will show a lot of &lt;code&gt;Records&lt;/code&gt;, go to the end of the &lt;code&gt;Records&lt;/code&gt;, and click on the link &lt;strong&gt;ADD&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;img alt="Godaddy Add Options" src="http://archerimagine.com/images/launchSite/AddOption.png" title="Godaddy Add Options"/&gt;&lt;/li&gt;
&lt;li&gt;From the above option we have to add 3 entries.&lt;/li&gt;
&lt;li&gt;This is how all the 3 would look like after adding.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Godaddy A Options" src="http://archerimagine.com/images/launchSite/AOptions.png" title="Godaddy A Options"/&gt;
&lt;img alt="Godaddy www Options" src="http://archerimagine.com/images/launchSite/wwwOption.png" title="Godaddy www Options"/&gt;&lt;/p&gt;
&lt;p&gt;Now you can launch and check your desired domain. Kindly wait 48 hrs for these changes to reflect, do not try to configure multiple times, if it does not work even after 48 hours kindly search for help, till then take a coffee break and have a nice time out of this screen.&lt;/p&gt;
&lt;h2 id="the-domain-xyx-is-no-longer-parked-by-godaddy"&gt;The domain XYX is no longer parked by Godaddy&lt;a class="headerlink" href="#the-domain-xyx-is-no-longer-parked-by-godaddy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we are doing the above process, even after 24 hours, when you launch your website, we find one of these errors.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The domain XYX is no longer parked by Godaddy&lt;/li&gt;
&lt;li&gt;It is detected as a Malware in the office network.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The website might launch for some times and sometimes you might get any one of the above 2 errors. Kindly check this in the &lt;strong&gt;Manage DNS&lt;/strong&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We had added two &lt;strong&gt;A&lt;/strong&gt; Names pointing to the GitHub URL as shown below.
&lt;img alt="Godaddy A Options" src="http://archerimagine.com/images/launchSite/AOptions.png" title="Godaddy A Options"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check if you have any other &lt;strong&gt;A&lt;/strong&gt; Names in addition to the above two, if you have, kindly delete that. The detailed issue can be read &lt;a href="https://serverfault.com/questions/743327/godaddy-domain-randomly-not-resolving-to-github-pages"&gt;GoDaddy domain (randomly) not resolving to GitHub Pages&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.mycowsworld.com/blog/2015/07/12/setting-up-a-godaddy-domain-name-with-github/"&gt;Setting Up a GoDaddy Domain Name With GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html"&gt;Configuring a Godaddy domain name with github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;Using a custom domain with GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.teamtreehouse.com/using-github-pages-to-host-your-website"&gt;Using GitHub Pages To Host Your Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/743327/godaddy-domain-randomly-not-resolving-to-github-pages"&gt;GoDaddy domain (randomly) not resolving to GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/webdev/comments/653q6z/help_how_to_correctly_connect_my_github_pages/"&gt;[Help]: How to correctly connect my github pages blog to a custom domain?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ongspxm.github.io/blog/2016/08/github-custom-domain-godaddy/"&gt;Redirecting GitHub Page to a custom domain&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;Kindly read the above site, to understand what is the use of CNAME and A Record. Great introduction. &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="pelican"></category></entry><entry><title>Publishing your blog to github pages.</title><link href="http://archerimagine.com/articles/pelican/publishing-blog-github-pages.html" rel="alternate"></link><published>2017-04-30T18:44:09+05:30</published><updated>2017-05-07T00:01:11+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-30:/articles/pelican/publishing-blog-github-pages.html</id><summary type="html">&lt;p&gt;In this post we will try to make your small blog visible to the world with the help of github pages. This is the easiest and free way to put your work for the world to see.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;We have set the basic blog, though it may not look great because of the theme which we are using, but we will change those. Presently we will focus on taking this blog for the world to see. &lt;a href="https://pages.github.com/" title="GitHub Pages"&gt;Github Pages&lt;/a&gt; is the way to publish your blog on to the WWW.&lt;/p&gt;
&lt;p&gt;We will have 2 repositories for doing this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One repository is for the source, which is our blog content.&lt;/li&gt;
&lt;li&gt;Second repository is for the generated files in the &lt;code&gt;output&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisite"&gt;Prerequisite&lt;a class="headerlink" href="#prerequisite" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We all should have a &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; account, if you have then continue, else go to &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and create an account. The process is very straight forward, just follow the instruction on the website.&lt;/p&gt;
&lt;p&gt;The git should be locally configured. Kindly follow the steps mention in this page &lt;a href="https://help.github.com/articles/setting-your-email-in-git/"&gt;Setting your email in Git&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-first-repository"&gt;The first Repository&lt;a class="headerlink" href="#the-first-repository" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We should now create our first Repository onto github. Click on the &lt;code&gt;+&lt;/code&gt; icon which shows this drop down.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create repo" src="http://archerimagine.com/images/githubAccount/createRepo.png" title="The create repo link"/&gt;&lt;/p&gt;
&lt;p&gt;And click on the option &lt;code&gt;New Repository&lt;/code&gt; as shown above.&lt;/p&gt;
&lt;p&gt;This will open up a page with looks like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create repo" src="http://archerimagine.com/images/githubAccount/createRepoForm.png" title="The create repo form"/&gt;&lt;/p&gt;
&lt;p&gt;Fill in the repository name which you want to name, and write a little &lt;code&gt;Description&lt;/code&gt; also do not click on the check-box which read&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Initialize this repository with a README&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since we already have a folder in our local system, to check-in we can leave this box unchecked. In future if need we can create a &lt;code&gt;README&lt;/code&gt; file manually.&lt;/p&gt;
&lt;p&gt;Once you click on the &lt;code&gt;Create Repository&lt;/code&gt; link, you will be taken to this page, with these as a content.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github Push Commands" src="http://archerimagine.com/images/githubAccount/commandsGitHub2Push.png" title="The Github push commands"/&gt;&lt;/p&gt;
&lt;p&gt;This is the symbol of empty repository which is created and now we can push our local code to this folder.&lt;/p&gt;
&lt;h3 id="push-code-from-local-to-github-repository"&gt;Push code from local to Github repository&lt;a class="headerlink" href="#push-code-from-local-to-github-repository" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can follow the instruction mentioned above to push our local code to github, but we have to make sure that we do not push the &lt;code&gt;output&lt;/code&gt; directory in the same repository as the code, because the handling of &lt;code&gt;output&lt;/code&gt; directory is different.&lt;/p&gt;
&lt;p&gt;Go to the root of the folder, where your blog is kept.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd ~/mySampleBlog/&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Go to the root of the directory where the blog post are kept&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This command initializes an empty repository in the same folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a file named &lt;code&gt;.gitignore&lt;/code&gt; in the same folder.&lt;/li&gt;
&lt;li&gt;Copy the below content to the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*~
._*
*.lock
*.DS_Store
*.swp
*.out
*.py&lt;span class="o"&gt;[&lt;/span&gt;cod&lt;span class="o"&gt;]&lt;/span&gt;
output
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The above code basically prevents all the local temporary files and the &lt;code&gt;output&lt;/code&gt; directory to be checked in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This command will make sure that the &lt;code&gt;output&lt;/code&gt; folder is not tracked by git, check the output as shown below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;On branch master

Initial commit

Untracked files:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add &amp;lt;file&amp;gt;..."&lt;/span&gt; to include in what will be committed&lt;span class="o"&gt;)&lt;/span&gt;

    .gitignore
    Makefile
    content/
    fabfile.py
    pelicanconf.py
    publishconf.py

nothing added to commit but untracked files present &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add"&lt;/span&gt; to track&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Only files listed above will be tracked, and &lt;code&gt;output&lt;/code&gt; directory is not one of them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Adds all the above files to be ready for commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m "first commit"&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This will make a commit locally with the commit message as &lt;code&gt;first commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/pelicanBlog/mySampleBlog.git&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This commands connects the remote repository of github with our local code. The URL might be different for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This will push the local changes to the GitHub repository we created.&lt;/li&gt;
&lt;li&gt;It will ask for your username and password, kindly provide those and we have pushed our code to github.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pushing-the-output-folder"&gt;Pushing the &lt;code&gt;output&lt;/code&gt; folder&lt;a class="headerlink" href="#pushing-the-output-folder" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;output&lt;/code&gt; folder is out actual blog, so this is a little different from the previous way of pushing code to github.&lt;/p&gt;
&lt;p&gt;Please follow along to create this special repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the same &lt;code&gt;New Repository&lt;/code&gt; from the &lt;code&gt;+&lt;/code&gt; icon shown in previous repository.&lt;/li&gt;
&lt;li&gt;In the New Repository form, the magic happens with the &lt;code&gt;Repository Name&lt;/code&gt; field, fill in the name as &lt;code&gt;username.github.io&lt;/code&gt;, where &lt;code&gt;username&lt;/code&gt; is your github username.&lt;/li&gt;
&lt;li&gt;Fill In the description.&lt;/li&gt;
&lt;li&gt;Now there are two ways to push the &lt;code&gt;output&lt;/code&gt; folder to this new repository, you can follow any one of them.&lt;ul&gt;
&lt;li&gt;Push the &lt;code&gt;output&lt;/code&gt; folder as a repository which we already know.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m "first commit"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/pelicanBlog/pelicanBlog.github.io.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After the above command, just launch this URL in your browser, &lt;code&gt;https://username.github.io/&lt;/code&gt;, just change &lt;code&gt;username&lt;/code&gt; with your username.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Since the original source folder we create with &lt;code&gt;output&lt;/code&gt; directory mentioned in &lt;code&gt;.gitignore&lt;/code&gt;, we can now add this repository as a submodule in that repository, to provide a link between both the source and the &lt;code&gt;output&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Go to the root of the blog content, in this case &lt;code&gt;cd ~/mySampleBlog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule add -f https://github.com/pelicanBlog/pelicanBlog.github.io.git output&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This adds the &lt;code&gt;output&lt;/code&gt; folder as a submodule.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m "added submodule"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The above will make the &lt;code&gt;output&lt;/code&gt; as a submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this we have completed our part of the blog series. With this series of blog post we are able to achieve this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand what is pelican blog and how to use it with github pages.&lt;/li&gt;
&lt;li&gt;How to set up the Anaconda environment for pelican development.&lt;/li&gt;
&lt;li&gt;Understood what &lt;code&gt;pelican-quickstart&lt;/code&gt; command does.&lt;/li&gt;
&lt;li&gt;Understood the basic commands to generate the pelican blog&lt;/li&gt;
&lt;li&gt;Understood the basic folder structure of the pelican blog&lt;/li&gt;
&lt;li&gt;Understood the pelican settings files and its uses.&lt;/li&gt;
&lt;li&gt;Created a github pages and pushed both our content and the blog post to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next series will focus into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to configure a domain with github pages.&lt;/li&gt;
&lt;li&gt;Use of a themes and plugin to enhance the website&lt;/li&gt;
&lt;li&gt;Integration with google analytics, mail chimp etc.&lt;/li&gt;
&lt;li&gt;Modifying the blogs to get the most out of the themes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/categories/setup/"&gt;Github Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/setting-your-email-in-git/"&gt;Setting your email in Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-submodule"&gt;git-submodule &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hernantz.github.io/how-to-publish-a-pelican-site-on-github.html"&gt;How to publish a pelican site on Github &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Understanding the Pelican Settings files.</title><link href="http://archerimagine.com/articles/pelican/pelican-settings-files.html" rel="alternate"></link><published>2017-04-30T17:07:03+05:30</published><updated>2017-05-06T23:58:42+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-30:/articles/pelican/pelican-settings-files.html</id><summary type="html">&lt;p&gt;By default pelican comes with 2 settings files, pelicanconf.py and publishconf.py. In this post we try to understand the meaning of these to files and some basic settings.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The basic work flow in pelican blogging is to first generate content, verify it locally using a &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;, and when everything is fine will publish it.&lt;/p&gt;
&lt;p&gt;Pelican comes with two settings files to separate these 2 process. These two files are.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's check what is the use of these 2 files, and how to manipulate these files to get the most out of pelican.&lt;/p&gt;
&lt;p&gt;These setting files are mostly passed to the templates associated with the themes to generate the site, all these settings are some parameters to these templates.&lt;/p&gt;
&lt;h2 id="pelicanconfpy"&gt;pelicanconf.py&lt;a class="headerlink" href="#pelicanconfpy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We had used the &lt;code&gt;pelican-quickstart&lt;/code&gt; to generate this blog, when we use this command, we get a pre-configured &lt;code&gt;pelicanconf.py&lt;/code&gt; and a &lt;code&gt;publishconf.py&lt;/code&gt; files. This have the bare basic configuration to be used based on the questions we answered on the options.&lt;/p&gt;
&lt;p&gt;These files basically contains the setting's identifier for the pelican blog, all the setting identifiers are in all-caps, and the values numbers (5, 20, etc.), Boolean (True, False, None, etc.), dictionaries, or tuples should not be enclosed in quotation marks.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; is used to generate the site locally and tested over &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. The basic &lt;code&gt;pelicanconf.py&lt;/code&gt; would look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Animesh'&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'content'&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Asia/Kolkata'&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;

&lt;span class="c1"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'articles/{slug}.html'&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'articles/{slug}.html'&lt;/span&gt;

&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Python.org'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://python.org/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Jinja2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://jinja.pocoo.org/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'You can modify those links in your config file'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c1"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'You can add links in your config file'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Another social link'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="c1"&gt;#RELATIVE_URLS = True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you remember correctly some of the settings value we had provided during the &lt;code&gt;pelican-quickstart&lt;/code&gt; commands, like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AUTHOR&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the name of the site author which we had entered during the questions asked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SITENAME&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;This is the Name of the site which we provided.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SITEURL&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Since we still do not have domain name registered, we had kept this empty, and also it makes sense to keep this empty for &lt;code&gt;localhost&lt;/code&gt; testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; where we write our blog is the default path set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TIMEZONE&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This we had entered during the initial process, and in future if we want to change this we can change these settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_LANG&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This was also entered during the &lt;code&gt;pelican-quickstart&lt;/code&gt; process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FEEDS_*&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;All the &lt;code&gt;FEEDS_*&lt;/code&gt; related settings are empty because we have still not configured the RSS feeds settings, this we will change in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ARTICLE_*&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the settings which we modified for keeping the path of the post into one folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LINKS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a tuple of tuple, with each entry showing a link which you want provide in your blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOCIAL&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is also a tuple of tuple, where each entry is meant to point to a name of a social network say &lt;code&gt;Facebook&lt;/code&gt; and the link to your profile.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_PAGINATION&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a number showing how many blogs should be listed on the front page. Some Themes use this setting for some other purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now these settings are not fully exhaustive, Pelican has a huge list of setting, which we will revisit once we have the need of them.&lt;/p&gt;
&lt;h2 id="publishconfpy"&gt;publishconf.py&lt;a class="headerlink" href="#publishconfpy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike &lt;code&gt;pelicanconf.py&lt;/code&gt;, this setting file is only used when we are supposed to publish our blog to the domain hosting. This configuration is accessed when we generate the site using the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content -s publishconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The basic content of these files look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c1"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c1"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'feeds/all.atom.xml'&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.atom.xml'&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Following items are often useful when publishing&lt;/span&gt;

&lt;span class="c1"&gt;#DISQUS_SITENAME = ""&lt;/span&gt;
&lt;span class="c1"&gt;#GOOGLE_ANALYTICS = ""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file, basically build on top of the &lt;code&gt;pelicanconf.py&lt;/code&gt;, as we can see from this line, &lt;code&gt;from pelicanconf import *&lt;/code&gt;. What this means is all the configuration from &lt;code&gt;pelicancongf.py&lt;/code&gt; is taken into consideration along with some specific configuration which is required for just publishing.&lt;/p&gt;
&lt;p&gt;If you see this setting most of them are empty which we will fill one by one as we make progress in our blog, but from the structure you might get an idea that this file pertains to its integration with the &lt;code&gt;DISQUS&lt;/code&gt; comment system, and the &lt;code&gt;GOOGLE_ANALYTICS&lt;/code&gt; code. We will see the use of this code once we integrate these feature into our blog.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/settings.html"&gt;Pelican Settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Pelican commands to generate the first blog.</title><link href="http://archerimagine.com/articles/pelican/pelican-commands-to-generate-first-pelican-blog-post.html" rel="alternate"></link><published>2017-04-29T22:15:05+05:30</published><updated>2017-05-06T23:52:35+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-29:/articles/pelican/pelican-commands-to-generate-first-pelican-blog-post.html</id><summary type="html">&lt;p&gt;In this post we will check some pelican commands, and how it helps us to generate a blog post.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;We have our boilerplate pelican blog available, now we have still not seen the magic of pelican. In this post we will see our blog coming to life.&lt;/p&gt;
&lt;h2 id="first-pelican-blog"&gt;First Pelican Blog&lt;a class="headerlink" href="#first-pelican-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen the folder structure here&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelicanFolderStructure" src="http://archerimagine.com/images/pelicanQuickStart/pelicanFolderStructure.png" title="pelican folder structure"/&gt; &lt;/p&gt;
&lt;p&gt;Now we will first execute some commands and see what happens with this boilerplate. Remember to be in the &lt;code&gt;pelican1&lt;/code&gt; environment. We can do this by.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; activate pelican1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we are in &lt;code&gt;pelican1&lt;/code&gt; environment, we have all the &lt;code&gt;pelican&lt;/code&gt; commands at our disposal. Kindly execute this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command we are passing &lt;code&gt;content&lt;/code&gt; as a parameter, which is nothing but one of the directory of the folder structure.&lt;/p&gt;
&lt;p&gt;The output will be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WARNING: No valid files found in content.
Done: Processed &lt;span class="m"&gt;0&lt;/span&gt; articles, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.12 seconds.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It clearly warns us about no valid files found in &lt;strong&gt;content&lt;/strong&gt;, as we have not added any post to the directory. If you see inside the &lt;code&gt;output&lt;/code&gt; folder, we will see some content in that namely these files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;archives.html
authors.html
categories.html
index.html
tags.html
theme &lt;span class="c1"&gt;#directory which contains some predefined images and css.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let us see what the blog looks like. Just execute these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; output/
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you execute the above commands we can see the output on browser on this path &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt; and it will look something like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican First Post" src="http://archerimagine.com/images/pelicanCommands/firstPostPelican.png" title="The first post from pelican"/&gt;&lt;/p&gt;
&lt;p&gt;Nothing fancy here, but we will some content with some link and a default theme. It is petty good for being a boilerplate.&lt;/p&gt;
&lt;h2 id="the-first-post"&gt;The first post.&lt;a class="headerlink" href="#the-first-post" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we are ready for our first post, we will do the sample hello world which is the de-facto standard in programming languages first program.&lt;/p&gt;
&lt;p&gt;We will write the first post in &lt;strong&gt;Markdown&lt;/strong&gt;. Create a file named &lt;code&gt;HelloWorld.md&lt;/code&gt; in this directory &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Hello World
Date: 2017-04-29 11:01
Category: Pelican

Hello World to Pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once create and saved this file, just run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will have the following output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Done: Processed &lt;span class="m"&gt;1&lt;/span&gt; article, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.27 seconds.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time it clearly states that we have &lt;code&gt;1&lt;/code&gt; article. Then follow the other commands as discussed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; output/
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again check the output on the browser at &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. Now this time the output is different and it look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican Hello World Post" src="http://archerimagine.com/images/pelicanCommands/helloWorldPelicanPost.png" title="The HelloWorld post from pelican"/&gt;&lt;/p&gt;
&lt;p&gt;The area surrounded in ellipse are new. This shows us the power of pelican, we do not have to bother how the content is presented on screen, we have to only concentrate on writing content.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/quickstart.html"&gt;Pelican Doc Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Pelican Folder Structure</title><link href="http://archerimagine.com/articles/pelican/pelican-folder-structure.html" rel="alternate"></link><published>2017-04-29T22:10:10+05:30</published><updated>2017-05-06T23:56:03+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-29:/articles/pelican/pelican-folder-structure.html</id><summary type="html">&lt;p&gt;In this post we will see some important files and folder structure of the pelican blog, and understand the significance of all these files in our blogs to come.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;We will be able to extract the full juice of pelican once we understand the building blocks of the pelican blog. Folder structure and some files forms the basic of this. We will understand some of these files and folder use in this post.&lt;/p&gt;
&lt;p&gt;After the first blog post if we give &lt;code&gt;make clean&lt;/code&gt; command we will see a folder structure just like this. This will have an empty &lt;code&gt;output&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelicanFolderStructure" src="http://archerimagine.com/images/pelicanFolder/PelicanFolderStructure.png" title="pelican folder structure"/&gt; &lt;/p&gt;
&lt;p&gt;We will understand the use of these folder and a proper way of managing your content.&lt;/p&gt;
&lt;h2 id="content-folder"&gt;content folder&lt;a class="headerlink" href="#content-folder" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the folder where all the magic happens. This is the root folder for our all content, we can use this folder for these purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing content&lt;/li&gt;
&lt;li&gt;Saving the images references in the content&lt;/li&gt;
&lt;li&gt;Static Pages (ex: about, contact etc)&lt;/li&gt;
&lt;li&gt;folder for storing our favicon.ico and apple icon&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="writing-content"&gt;Writing Content&lt;a class="headerlink" href="#writing-content" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In traditional wordpress or most of the blogging platform the content is stored in this format &lt;code&gt;/2015/05/24/my-content/&lt;/code&gt; now this may be what some people might be happy with and you can also do the same, but this impacts the SEO ranking as the path becomes long and the date when the content was created has no significance to the actual content but is occupying space on the URL. In my opinion we can better organize our self with some meaning full structure.&lt;/p&gt;
&lt;p&gt;What we can do is we can create a folder in side &lt;code&gt;content&lt;/code&gt; named &lt;code&gt;articles&lt;/code&gt; and the sub folders inside &lt;code&gt;articles&lt;/code&gt; for each category which you want to write or if you want to have a flat system you can place all your content inside &lt;code&gt;articles&lt;/code&gt;. I prefer the sub folder approach as we can derive the category name just from the folder name.&lt;/p&gt;
&lt;p&gt;So go ahead for beginning create a folder inside &lt;code&gt;content&lt;/code&gt; name &lt;code&gt;articles&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content/
mkdir articles
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now create your second post inside this and publish the content based on the command we learned on the previous post.&lt;/p&gt;
&lt;p&gt;Now if you launch the &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;, and click on the article title, you will see no difference but if you see on the URL bar, we still see that our post is without the &lt;code&gt;article&lt;/code&gt; folder structure. We did not want this. Have a look&lt;/p&gt;
&lt;p&gt;&lt;img alt="url without article " src="http://archerimagine.com/images/pelicanFolder/URLwithoutarticles.png" title="URL without articles."/&gt;&lt;/p&gt;
&lt;p&gt;In order to get the proper URL in the address bar we have to change somethings in the &lt;code&gt;pelicanconf.py&lt;/code&gt;, we will explain what is the purpose of this file in a short file for not just add these 3 line into that config.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'articles/{slug}.html'&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'articles/{slug}.html'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With is configuration in the config folder, just generate the blog with the commands already learned and then check the &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. It should look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="url with article " src="http://archerimagine.com/images/pelicanFolder/URLwitharticles.png" title="URL with articles."/&gt;&lt;/p&gt;
&lt;p&gt;Now we have a proper folder structure.&lt;/p&gt;
&lt;h3 id="static-pages"&gt;Static Pages&lt;a class="headerlink" href="#static-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most often than not we will want some pages which will rarely change, like an &lt;strong&gt;About&lt;/strong&gt; and a &lt;strong&gt;Contact&lt;/strong&gt; pages. These type of static pages is also supported in the pelican blog. Just create a folder named &lt;code&gt;pages&lt;/code&gt; inside &lt;code&gt;content&lt;/code&gt; folder like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content/
mkdir pages
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are ready to make our sample &lt;code&gt;About.md&lt;/code&gt; and &lt;code&gt;Contact.md&lt;/code&gt;  inside &lt;code&gt;pages&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: About
Date: 2017-04-14 22:30
Modified: 2017-04-14 22:30
Slug: About
Author: username
Summary: This is a sample blog.


The About Page for the blog.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;Contact.md&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Contact
Date: 2017-04-14 22:30
Modified: 2017-04-14 22:30
Slug: Contact
Author: username
Summary: This is a sample blog contact page.


The Contact Page for the blog.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We again generate the blog and check it on &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When we see the output of &lt;code&gt;pelican content&lt;/code&gt; command we will see this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Done: Processed &lt;span class="m"&gt;1&lt;/span&gt; article, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;2&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.20 seconds.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which means that, the &lt;code&gt;pages&lt;/code&gt; are generated. When we launch the &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. we will see that the &lt;code&gt;About&lt;/code&gt; and &lt;code&gt;Contact&lt;/code&gt; menu like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="About and Contact Page " src="http://archerimagine.com/images/pelicanFolder/staticPages.png" title="About and Contact Page."/&gt;&lt;/p&gt;
&lt;p&gt;We can modify these pages with the information which you want to furnish.&lt;/p&gt;
&lt;h3 id="static-images"&gt;Static Images&lt;a class="headerlink" href="#static-images" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most often than not we will use images to link in our blogs, we can store all these images inside the &lt;code&gt;content&lt;/code&gt; folder, having a directory called &lt;code&gt;images&lt;/code&gt;. Do this by following these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content/
mkdir images
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can copy any image inside this folder and try to link it into one of our blog. Just copy any image in this folder and copy the file name.&lt;/p&gt;
&lt;p&gt;Now create a link to this file inside the already existing blog post by the help of &lt;code&gt;link&lt;/code&gt; of markdown, here is a sample.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![&lt;span class="nt"&gt;Hello World 1&lt;/span&gt;](&lt;span class="na"&gt;{filename}../../images/helloWorldPelicanPost.png "Hello World 2"&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should understand some details about the above piece of code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hello World 1&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;alt&lt;/code&gt; text is good if there is a browser which block image, this &lt;code&gt;alt&lt;/code&gt; text is displayed, showing an information about what this images were supposed to do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"Hello World 2"&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the &lt;code&gt;title&lt;/code&gt; of the image, which is shown as a tool tip once we hover over the image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{filename}&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a special syntax which is used by pelican to generate links, so be it URL or images, when using relative URLs kindly use this format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have covered most of the folder structure inside &lt;code&gt;article&lt;/code&gt; we will see the configuration files in the next blog post.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/content.html#pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/content.html#linking-to-internal-content"&gt;Linking to internal content &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Pelican HelloWorld using pelican-quickstart</title><link href="http://archerimagine.com/articles/pelican/helloworld-pelican-quickstart.html" rel="alternate"></link><published>2017-04-27T23:26:43+05:30</published><updated>2017-05-06T23:49:40+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-27:/articles/pelican/helloworld-pelican-quickstart.html</id><summary type="html">&lt;p&gt;We all want to hit the ground rolling, and what better way then to start with a Pelican HelloWorld. pelican-quickstart is a great command to start a basic pelican blogs with most of the defaults working out of the box.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Pelican makes it very easy to make the ground rolling ASAP. Pelican provides a great command &lt;code&gt;pelican-quickstart&lt;/code&gt;, which asks a few questions to you and makes a boilerplate blog ready in a few seconds. We will go through the entire process explaining each option is details.&lt;/p&gt;
&lt;h2 id="activate-python-environment"&gt;Activate Python environment&lt;a class="headerlink" href="#activate-python-environment" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We had set up a separate python anaconda environment in our previous &lt;a href="http://archerimagine.com/articles/pelican/python-setup-for-pelican-blog.html"&gt;post&lt;/a&gt; now is the time to active the environment, we can do that by using a simple command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; activate pelican1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will activate the &lt;code&gt;pelican1&lt;/code&gt; environment, and we can identify it by check the terminal prompt which will change to &lt;code&gt;(pelican1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the work is done, we can deactivate the same with a simple command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; deactivate pelican1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the above command will work for Linux and Mac, kindly check the windows equivalent of the same.&lt;/p&gt;
&lt;h2 id="pelican-quickstart"&gt;pelican-quickstart&lt;a class="headerlink" href="#pelican-quickstart" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we are ready to divulge in the world of pelican. Pelican has a ready to bake command to set up the basic boilerplate for the blog. The command is called&lt;/p&gt;
&lt;p&gt;Before executing the below commands, just create a directory where you want your blog files to be stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/myBlogDirectory
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/myBlogDirectory
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just execute this commands and it asks you these series of questions, which we will talk in details.&lt;/p&gt;
&lt;h3 id="pelican-quickstart-options"&gt;pelican-quickstart options&lt;a class="headerlink" href="#pelican-quickstart-options" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The options shown after executing the &lt;code&gt;pelican-quickstart&lt;/code&gt; are as below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican quickstart options" src="http://archerimagine.com/images/pelicanQuickStart/pelicanQuickStartoptions.png" title="pelican quickstart options"/&gt;&lt;/p&gt;
&lt;p&gt;We will discuss each and every option and their usage, we can always choose the default shown in capital letter, &lt;code&gt;{Y|n}&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where do you want to create your new Website ? [.]&lt;ul&gt;
&lt;li&gt;Most probably we will keep the default as we are already in that directory, if not you can specify the path &lt;code&gt;/home/pathtomyblog&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What will be the title of the blog?&lt;ul&gt;
&lt;li&gt;Provide a suitable title to your blog, do not worry even if you want to change it latter we can change it. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Who will be the author of this Website ?&lt;ul&gt;
&lt;li&gt;Just provide any name you want whose name should be present as an author on the blog post, it can be your name as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What will be the default language of this Website ? [en]&lt;ul&gt;
&lt;li&gt;The default choice is &lt;code&gt;English&lt;/code&gt;, else you can give any language format mentioned in ISO 639-1 Language Codes, the list can be found &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" title="ISO Language codes"&gt;ISO Language codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to specify a URL prefix? e.g., http://example.com (Y/n)&lt;ul&gt;
&lt;li&gt;If you already have purchased a domain give the domain name as shown in the example, else continue with &lt;code&gt;n&lt;/code&gt;, we can later fill the domain name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to enable article pagination? (Y/n)&lt;ul&gt;
&lt;li&gt;We can go with the default of having pagination, which means how many posts of the blogs will be displayed in one page, the choice of this is in the next question.&lt;ul&gt;
&lt;li&gt;How many articles per page do you want? [10] &lt;ul&gt;
&lt;li&gt;The default choice is &lt;code&gt;10&lt;/code&gt;, for the time being keep it that way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is your time zone? [Europe/Paris]&lt;ul&gt;
&lt;li&gt;To change the time zone, we should be aware that these are &lt;strong&gt;tz database&lt;/strong&gt; time zone, to exactly get the time zone codes for your country visit &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" title="List of tz database time zones"&gt;List of tz database time zones&lt;/a&gt;, give the code without the &lt;code&gt;[]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)&lt;ul&gt;
&lt;li&gt;There are multiple ways to automate the blog publishing process, makefile and fabic comes to our help, just chose the default and we will decide on this later. This creates two files in the directory, &lt;code&gt;fabfile.py&lt;/code&gt; and &lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)&lt;ul&gt;
&lt;li&gt;We have the help of auto-reload commands to automatically generates the preview as soon as we change anything in the themes, we might not require it initially, so keep it false.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using FTP? (y/N)&lt;ul&gt;
&lt;li&gt;If we had an FTP site where we could upload, just choose the default and say &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using SSH? (y/N)&lt;ul&gt;
&lt;li&gt;If you are hosting uses SSH, for our use case we will choose &lt;code&gt;N&lt;/code&gt;, which is the default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using Dropbox? (y/N)&lt;ul&gt;
&lt;li&gt;We can also use Dropbox to upload our static files, but for this, we will try some other time, for now choose the default which is &lt;code&gt;N&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using S3? (y/N)&lt;ul&gt;
&lt;li&gt;We also have the facility of choosing amazon S3 for our site hosting, for now not needed chose &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using Rackspace Cloud Files? (y/N) &lt;ul&gt;
&lt;li&gt;Again the default &lt;code&gt;N&lt;/code&gt;, we are not using Rackspace.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using GitHub Pages? (y/N)&lt;ul&gt;
&lt;li&gt;We can choose &lt;code&gt;y&lt;/code&gt; here, but we will try another mechanism, for now choose the default &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you had chosen &lt;code&gt;y&lt;/code&gt; in this option you will get this sub option.&lt;ul&gt;
&lt;li&gt;Is this your personal page (username.github.io)? (y/N)&lt;ul&gt;
&lt;li&gt;Choose &lt;code&gt;y&lt;/code&gt;, &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After this we will get this message in either case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Done. Your new project is available at /home/username/myWork/mySampleBlog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our blogs boilerplate is available. Here is the folder structure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelicanFolderStructure" src="http://archerimagine.com/images/pelicanQuickStart/pelicanFolderStructure.png" title="pelican folder structure"/&gt; &lt;/p&gt;
&lt;p&gt;We have still not seen how the blog will look like, we will divulge into this in the next post, with all the pelican commands which is extremely important to get the full juice out of pelican.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://terriyu.info/blog/posts/2013/07/pelican-setup/" title="How did the command option help"&gt;How I setup Pelican &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" title="List of tz database time zones"&gt;List of tz database time zones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" title="List of ISO 639-1 codes"&gt;List of ISO 639-1 codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/almet/1140861"&gt;pelican-quickstart.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>How to setup Anaconda Python environment for Pelican Blog.</title><link href="http://archerimagine.com/articles/pelican/python-setup-for-pelican-blog.html" rel="alternate"></link><published>2017-04-26T22:39:03+05:30</published><updated>2017-05-07T00:03:25+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-26:/articles/pelican/python-setup-for-pelican-blog.html</id><summary type="html">&lt;p&gt;Anaconda is a well known distribution of Python, supporting both python 2 and 3. We can set up an exclusive environment for Pelican blog using conda.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="installing-pelican"&gt;Installing Pelican&lt;a class="headerlink" href="#installing-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican is a python package, so we can have multiple option to install pelican. There can be 3 option which I can think of.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct Installation&lt;ul&gt;
&lt;li&gt;If we have only one python installation on the system, and we do not have any issue if we screw up this installation just use &lt;code&gt;pip&lt;/code&gt; to install pelican.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Installation using VirtualEnv.&lt;ul&gt;
&lt;li&gt;This approach is already mentioned in official documentation of &lt;a href="http://docs.getpelican.com/en/stable/install.html" title="Installing Pelican"&gt;pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Installation using Conda.&lt;ul&gt;
&lt;li&gt;By now you could have understood that we will use Conda to install pelican. This is because Anaconda is already a prepackaged installation of very well know python package in both version 2 and 3. In future, I will update this page if I wrote about Anaconda installation, for now refer any documents on the google search for installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="configure-anaconda-for-pelican-blog"&gt;Configure Anaconda for Pelican Blog&lt;a class="headerlink" href="#configure-anaconda-for-pelican-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing we have to do is to create an environment using the python version 2. This can be done by this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create -n pelican1 python=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have executed the above command we will have &lt;code&gt;pelican1&lt;/code&gt; as an environment.&lt;/p&gt;
&lt;p&gt;We can see the list of environment in the system by using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda info --envs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will provide, an output like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican1                 /home/username/anaconda3/envs/pelican1
py27                     /home/username/anaconda3/envs/py27
py35                     /home/username/anaconda3/envs/py35
root                  *  /home/username/anaconda3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows all the available environment.&lt;/p&gt;
&lt;p&gt;We can activate the &lt;code&gt;pelican1&lt;/code&gt; by using this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source activate pelican1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have an environment which we can use for pelican development. The reason for this environment creation is to have a separate environment for experimentation with pelican, if anything goes wrong we do not disturb already existing programs.&lt;/p&gt;
&lt;h3 id="configure-pelican-environment-for-blog"&gt;Configure Pelican Environment for Blog&lt;a class="headerlink" href="#configure-pelican-environment-for-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once we have the environment, we have to install few packages in this environment. The first is to install PiP to install other package. Install Pip by using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the completion of installing &lt;code&gt;pip&lt;/code&gt;, the first and foremost package to install is pelican, with this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we will be using Markdown to write our blogs we need the markdown package, which we can install using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some plugin and themes in pelican which might need some additional packages, we will install these 2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Fabric
pip install beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="freeze-the-requirement"&gt;Freeze the Requirement&lt;a class="headerlink" href="#freeze-the-requirement" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we have all our installation complete, we should save our package history into a &lt;code&gt;requirement.txt&lt;/code&gt;. We can use this &lt;code&gt;requirement.txt&lt;/code&gt; to install all the above mentioned packages with same version in one go.&lt;/p&gt;
&lt;p&gt;We can freeze the details by using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dependencies"&gt;Dependencies&lt;a class="headerlink" href="#dependencies" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we check the &lt;code&gt;requirement.txt&lt;/code&gt; generated in the above step, we will see a lot of packages already installed apart from &lt;code&gt;pelican&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;, &lt;code&gt;Fabric&lt;/code&gt; and &lt;code&gt;beautifulsoup4&lt;/code&gt;. These extra packages are dependencies for running pelican.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feedgenerator:&lt;/strong&gt; to generate the Atom feeds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jinja2:&lt;/strong&gt; for templating support&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pygments:&lt;/strong&gt; for syntax highlighting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docutils:&lt;/strong&gt; for supporting reStructuredText as an input format&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pytz:&lt;/strong&gt; for timezone definitions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blinker:&lt;/strong&gt; an object-to-object and broadcast signaling system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unidecode:&lt;/strong&gt; for ASCII transliterations of Unicode text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;six:&lt;/strong&gt; for Python 2 and 3 compatibility utilities&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MarkupSafe:&lt;/strong&gt; for a markup safe string implementation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-dateutil:&lt;/strong&gt; to read the date metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have completed 2 important steps of our own blog publishing.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/install.html"&gt;Installing Pelican &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conda.io/docs/py2or3.html"&gt;Managing Python &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Cost effective blogging with Pelican and Github</title><link href="http://archerimagine.com/articles/pelican/cost-effective-blogging-with-Pelican-and-Github.html" rel="alternate"></link><published>2017-04-25T23:20:03+05:30</published><updated>2017-05-12T00:24:48+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-25:/articles/pelican/cost-effective-blogging-with-Pelican-and-Github.html</id><summary type="html">&lt;p&gt;This is a series of blog post to help set up a static blog at minimal cost and integrating with Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is a series of blog post to help set up a static blog at minimal cost and integrating with all the popular tools such as Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog.&lt;/p&gt;
&lt;p&gt;I am a novice blogger and this blog would act as a journal, which will document my approach towards blogging, software development. The idea is to generate some revenues out of this blog in the long run. We all might have read about so many blogs which are able to generate good amount of traffic but in none one of those we have never read how do they achieve it.&lt;/p&gt;
&lt;p&gt;I may fail in my attempt, which might work as a guidance for someone to not follow this path and try another path for the same goal. The background theme to support this is to minimize my cost to the bare minimum so that the failure does not hurt me financially.&lt;/p&gt;
&lt;h2 id="why-static-blog"&gt;Why Static Blog?&lt;a class="headerlink" href="#why-static-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are already a lot of literature present behind this, just wanted to summarize those:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cost:-&lt;/strong&gt; This was the deciding factor for me, because of using a static website, this complete website can be hosted and deployed by just registering a domain name with a provider. I do not have to go for any hosting services etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy of Writing Content:-&lt;/strong&gt; I wanted to write my content using just &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, as i have grown comfortable writing in markdown. With using a static blog this was possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hosting:-&lt;/strong&gt; We can serve these static HTML pages practically from any place, be it &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;, &lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;, &lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt; or any other place which can serve static HTML pages. I have chosen Github just to save the cost.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy workflow:-&lt;/strong&gt; The work flow is very simple when deploying with static blogs, just right you content in markdown, generate HTML, push your changes to github and that's it. Your content is not available online. You can even go crazy you cam automate the whole thing other than writing content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above three are the main reason for choosing static blogs, but there could be many more valid reason for choosing static blogs. Most of the reason for me was personal in nature so you can also choose accordingly.&lt;/p&gt;
&lt;h2 id="why-pelican"&gt;Why Pelican?&lt;a class="headerlink" href="#why-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the approach to make this blog as static was finalized, the next big question came was which technology to choose, &lt;a href="https://blog.getpelican.com/"&gt;Pelican &lt;/a&gt; or &lt;a href="https://jekyllrb.com/"&gt;Jekyll &lt;/a&gt;. There as already many comparison already available among these, but the only reason for me to choose pelican was because it uses python and jinja. In some near future I want to fully customize my blog with the knowledge of these two.&lt;/p&gt;
&lt;h2 id="why-github"&gt;Why Github?&lt;a class="headerlink" href="#why-github" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final decision to be taken before starting this blog was to finalize the hosting provider. We have already mentioned some popular choice are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose Github, for its near zero cost, it may cost you if you want to keep your repository private else it is completely free were as Amazon S3 would have required to shell out some money though less, with some extra benefits, but for the time being when I am just measuring the water it made sense to keep my cost down.&lt;/p&gt;
&lt;p&gt;Once all the above 3 moral questions were answered, setting up the blogs was easy and which will be documented in the future.&lt;/p&gt;
&lt;h2 id="collated-blog-post"&gt;Collated Blog post.&lt;a class="headerlink" href="#collated-blog-post" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/python-setup-for-pelican-blog.html" title="How to set up Anaconda Python environment for Pelican Blog."&gt;How to set up Anaconda Python environment for Pelican Blog.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/helloworld-pelican-quickstart.html" title="Pelican HelloWorld using pelican-quickstart"&gt;Pelican HelloWorld using pelican-quickstart &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/pelican-folder-structure.html" title="Pelican Folder Structure"&gt;Pelican Folder Structure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/pelican-commands-to-generate-first-pelican-blog-post.html" title="Pelican commands to generate the first blog."&gt;Pelican commands to generate the first blog.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/pelican-settings-files.html" title="Understanding the Pelican Settings files"&gt;Understanding the Pelican Settings files &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/publishing-blog-github-pages.html" title="Publishing your blog to github pages"&gt;Publishing your blog to github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/linking-domain-with-github-pages.html" title="Configuring Github pages with Custom Domain"&gt;Configuring Github pages with Custom Domain &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/customizing-pelican-blog-with-plugin-and-themes.html" title="Customizing Pelican blog with the help of Plugin and themes"&gt;Customizing Pelican blog with the help of Plugin and themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/expressing-with-pelican-themes.html" title="Expressing the content with Pelican Themes"&gt;Expressing the content with Pelican Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/integration-problem-with-elegant-theme.html" title="Problem Faced when integrating with Elegant Themes"&gt;Problem Faced when integrating with Elegant Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/home-page-features-elegant-theme.html" title="Home Page feature for Elegant Theme"&gt;Home Page feature for Elegant Theme &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/integration-problem-with-elegant-theme.html" title="Integrating 3rd party services with Pelican Blog."&gt;Integrating 3rd party services with Pelican Blog.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/pelican/tips-for-improving-workflow-in-pelican.html" title="Tips to improve work flow in pelican blog. "&gt;Tips to improve work flow in pelican blog. &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;Making a Static Blog with Pelican &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This above blog explains why a static blog generator is good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arunrocks.com/moving-blogs-to-pelican/"&gt;Moving Blogs to Pelican &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This blog has a terrific explanation for pelican vs jekyll.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discuss.gohugo.io/t/hosting-amazon-s3-vs-github-gh-pages-vs/340"&gt;Amazon S3 Vs Github Pages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This explains the benefits of Amazon S3 over Github Pages, kindly check if you are affected because of this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry></feed>