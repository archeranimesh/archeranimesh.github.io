<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Archer Imagine</title><link href="https://www.archerimagine.com/" rel="alternate"></link><link href="https://www.archerimagine.com/feeds/all.atom.xml" rel="self"></link><id>https://www.archerimagine.com/</id><updated>2021-04-01T18:53:47+05:30</updated><subtitle>Anyone can do my job, but no one can be me. Harvey</subtitle><entry><title>Who really uses AWS IAM API keys?</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-api-keys.html" rel="alternate"></link><published>2021-03-29T10:49:58+05:30</published><updated>2021-04-01T18:53:47+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-29:/articles/aws/aws-iam-api-keys.html</id><summary type="html">&lt;p&gt;Cloud technology is a tool for the developers, creating sophisticated softwares. How does developer access the cloud? Does AWS Console is the only way to access the cloud? Developers love code, CLIs and SDKs, AWS provides access to its cloud resources using AWS IAM API Keys.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS IAM API Keys " src="https://www.archerimagine.com/images/aws/IAM/06-IAM-API-Keys.png" title="AWS Made Easy | AWS IAM API Keys"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Developer community uses the cloud technologies the most. In your conquest to learn about AWS, you have been focusing on configuring thing using the AWS console. As a developer, you may not find the use of AWS console efficient to do the tasks.&lt;/p&gt;
&lt;p&gt;Sounds like Neo's trapped in the matrix. It's you, but you didn't find Morphaeus. You have no knowledge of the existence of the RED pill to show you the truth.&lt;/p&gt;
&lt;p&gt;Soon you can access AWS Cloud with tools like CLIs, SDKs or HTTP APIs. These are the tools you completely understand. Even if you don't, sit tight we will make it easy to flow along.&lt;/p&gt;
&lt;p&gt;You will first create a user with programmatic access, then progress to configure the developer's machine to connect to the cloud. After this, you will get information from the cloud using programmatic access.&lt;/p&gt;
&lt;p&gt;Stay seated and enjoy this journey of programmatic access to the promised Earth of the Cloud.&lt;/p&gt;
&lt;h2 id="iam-api-keys"&gt;IAM API Keys&lt;a class="headerlink" href="#iam-api-keys" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have already found out that there are &lt;a href="https://www.archerimagine.com/articles/aws/general-aws.html#connection-type"&gt;three ways to connect to AWS &lt;/a&gt;. The AWS console is the most basic way to access. AWS CLIs and SDKs provide a much better way to access, as this can be controlled programmatically. &lt;/p&gt;
&lt;p&gt;To revise we will list does the various ways to access AWS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Console&lt;/li&gt;
&lt;li&gt;AWS SDKs&lt;/li&gt;
&lt;li&gt;AWS CLIs&lt;ul&gt;
&lt;li&gt;Windows PowerShell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use any of the above methods to access AWS, all of them use the AWS APIs in the back-end. The way of access to AWS does not change the features of AWS.&lt;/p&gt;
&lt;p&gt;You might think, AWS Console is easy to use, there is a web interface, you type in the username and password, which allows access to AWS.&lt;/p&gt;
&lt;p&gt;How will you use the AWS using these programmatic ways.&lt;/p&gt;
&lt;h3 id="iam-api-keys-to-the-rescue"&gt;IAM API Keys to the rescue&lt;a class="headerlink" href="#iam-api-keys-to-the-rescue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You need to have access to IAM API keys to enable programmatic access to AWS. This API Keys is tied up with an IAM user, so you have to create an IAM user and enable the IAM API Keys.&lt;/p&gt;
&lt;p&gt;So let's dive into the world of creating and using the IAM API Keys.&lt;/p&gt;
&lt;h2 id="how-to-create-iam-api-keys"&gt;How to create IAM API Keys?&lt;a class="headerlink" href="#how-to-create-iam-api-keys" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first step is to build an IAM user. You have already &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-users.html#iam-users-create-a-new-user"&gt;learned the creation of IAM User here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;IAM User creation is a five step process. We have to follow all the steps with a minor change in &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-users.html#iam-users-creation-step-1-add-user"&gt;Step 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can see below, we have to just select the option, &lt;strong&gt;Programmatic Access&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS IAM User with API Keys " src="https://www.archerimagine.com/images/aws/IAM/IAM-User-programmatic-access.png" title="AWS Made Easy | AWS IAM User with API Keys"/&gt; &lt;/p&gt;
&lt;p&gt;You can also enable this user to have an AWS Console access by enabling the option &lt;strong&gt;AWS Management console access&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You have to follow the remaining steps from the IAM user creation &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-users.html#iam-users-create-a-new-user"&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the step five, &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-users.html#iam-users-creation-step-5-success"&gt;Success&lt;/a&gt;, you have to take some specific action.&lt;/p&gt;
&lt;p&gt;You might see in step five, your screen will look little different than the last time you created the user. We have two new field &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access Key ID&lt;/li&gt;
&lt;li&gt;Secret access key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will get these two fields only when you enable the IAM user with programmatic access.&lt;/p&gt;
&lt;p&gt;Please download the security credentials in CSV format, and keep it safe.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS IAM User Success screen " src="https://www.archerimagine.com/images/aws/IAM/IAM-User-API-Keys-Success.png" title="AWS Made Easy | AWS IAM User Success screen"/&gt; &lt;/p&gt;
&lt;p&gt;Previous time you may have seen this screen. In this the user did not have the programmatic access.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, success " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-06-success.png" title="AWS Made Easy | IAM Users creation steps, success"/&gt;&lt;/p&gt;
&lt;p&gt;Now you have a user with IAM API keys enabled.&lt;/p&gt;
&lt;h3 id="properties-of-iam-api-keys"&gt;Properties of IAM API Keys&lt;a class="headerlink" href="#properties-of-iam-api-keys" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should keep in mind few important points about IAM API Keys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above user creation step is the only time you will see both &lt;strong&gt;Access Key ID&lt;/strong&gt; and &lt;strong&gt;Secret access key&lt;/strong&gt; together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Key ID&lt;/strong&gt; is only visible in IAM User's security credentials.&lt;/li&gt;
&lt;li&gt;It is advised to key the security credentials downloaded in CSV format.&lt;/li&gt;
&lt;li&gt;Once lost, you cannot recreate the &lt;strong&gt;Secret access key&lt;/strong&gt; corresponding to the &lt;strong&gt;Access Key ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You have to deactivate the old &lt;strong&gt;Access Key ID&lt;/strong&gt; and create a new pair of &lt;strong&gt;Access Key ID&lt;/strong&gt; &amp;amp; &lt;strong&gt;Secret access key&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You might have already figured this out, since the IAM API keys are tied to an IAM User, we cannot have it associated with &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The above combination should never be stored in an AWS EC2 instance, you should use &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt; for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-use-the-iam-api-keys"&gt;How to use the IAM API Keys?&lt;a class="headerlink" href="#how-to-use-the-iam-api-keys" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can use these IAM API Keys in two major ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS SDKs&lt;/li&gt;
&lt;li&gt;AWS CLIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will go through both these steps.&lt;/p&gt;
&lt;h3 id="using-iam-api-keys-with-aws-cli"&gt;Using IAM API Keys with AWS CLI.&lt;a class="headerlink" href="#using-iam-api-keys-with-aws-cli" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can install the Python based AWS CLI with a simple command if you have &lt;code&gt;pip&lt;/code&gt; package manager.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install awscli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the AWS CLI you need to configure the AWS environment by running this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get four questions as an output than it proves that the AWS CLI is installed.&lt;/p&gt;
&lt;p&gt;The above command will ask four questions which you can provide the details from the above &lt;strong&gt;Access Key ID&lt;/strong&gt; &amp;amp; &lt;strong&gt;Secret access key&lt;/strong&gt; you created for the new IAM user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AWS Access Key ID &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: us-west-2
Default output format &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let me try to explain you the details about these 4 options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Access Key ID [None] : fill the value you got for &lt;strong&gt;Access Key ID&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AWS Secret Access Key [None]: fill the value you got for the &lt;strong&gt;Secret access key&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Default region name [None]: You should provide the region on which the AWS CLIs or SDKs should execute. &lt;/li&gt;
&lt;li&gt;Default output format [None]: JSON is generally the preferred option.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above execution creates 2 file in &lt;code&gt;~/.aws&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-rw-------   &lt;span class="m"&gt;1&lt;/span&gt; user  staff   116B Dec &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;:43 credentials
-rw-------   &lt;span class="m"&gt;1&lt;/span&gt; user  staff    44B Dec &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;:43 config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;credentials&lt;/code&gt; file contains this, you gave the &lt;strong&gt;Access Key ID&lt;/strong&gt; &amp;amp; the &lt;strong&gt;Secret access key&lt;/strong&gt; above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;default&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; AKIAIOSFODNN7EXAMPLE
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; file has this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;default&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; us-west-2
&lt;span class="nv"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this you can execute AWS CLI specific commands. Here is a reference of such &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/"&gt;commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have the CLI installed and configured, using the SDK is much easier.&lt;/p&gt;
&lt;h3 id="using-iam-api-keys-with-aws-sdks"&gt;Using IAM API Keys with AWS SDKs.&lt;a class="headerlink" href="#using-iam-api-keys-with-aws-sdks" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS support SDKs in many languages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;.NET&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Python &lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will use the Python SDK for this example. The Python3 AWS SDK is called &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html"&gt;Boto3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You should complete the AWS CLI installation before proceeding.&lt;/p&gt;
&lt;h3 id="boto3-installation-quickstart"&gt;Boto3 installation | QuickStart&lt;a class="headerlink" href="#boto3-installation-quickstart" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python has a very good package manager called &lt;code&gt;pip&lt;/code&gt;, and we can install &lt;code&gt;boto3&lt;/code&gt; with a simple command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install boto3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Post this you need to add a few details to some configuration files if you have still not installed the AWS CLI. Create the &lt;code&gt;credentials&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; file in the &lt;code&gt;aws&lt;/code&gt; directory as shown above.&lt;/p&gt;
&lt;p&gt;Here is a sample code, which just list all the buckets on AWS S3. Even if you do not understand AWS S3 no worries. The below code will not give any errors if you do not have any S3 buckets. No error in the below code signifies that the AWS SDKs and CLIs are working in conjunction with each other.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"s3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS Console if a great way to use AWS, but it becomes difficult to use only AWS Console for all the tasks. There are times when you may need to do the job more than once. Manually performing these repeated tasks is very difficult and subject to errors.&lt;/p&gt;
&lt;p&gt;AWS offers two additional access channels, AWS CLIs and SDK. These accesses require a user enabled with programmatic access. The same user can also have the console access with programmatic access.&lt;/p&gt;
&lt;p&gt;After you have created the user, you should note that you receive an Access Key ID and a Secret Access Key. These pairs of key are only available during user creation. This is the reason we should download this information in the CSV format, as this information is required multiple time for access.&lt;/p&gt;
&lt;p&gt;You now have all the raw materials to connect to AWS programmatically. The next step is to download the Python AWS CLI package and configure it. Once configured, you will see a folder in the home directory &lt;code&gt;~/.aws&lt;/code&gt;. This folder now has all the sufficient information to connect to AWS.&lt;/p&gt;
&lt;p&gt;The CLI is a powerful tool to use, if you still want the SDK, you can download the &lt;strong&gt;BOTO3&lt;/strong&gt; Python SDKs and use the sample code to access all the bucket in the S3 if you have created. If the above code executes without any error you should assume that the SDKs is installed.&lt;/p&gt;
&lt;p&gt;You can now use any of the methods to access AWS. Let me know your experience of accessing the AWS using CLIs or SDKS, was it easy or hard.&lt;/p&gt;
&lt;h2 id="info-graphics"&gt;Info Graphics&lt;a class="headerlink" href="#info-graphics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM API Key Properties " src="https://www.archerimagine.com/images/aws/IAM/IAM-API-Properties.jpg" title="AWS Made Easy | API Key Properties"/&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/tools/"&gt;AWS SDKs Browse by Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html"&gt;Boto3 | Python SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/cli/latest/reference/"&gt;AWS CLI Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>Doing AWS STS the right way.</title><link href="https://www.archerimagine.com/articles/aws/aws-sts.html" rel="alternate"></link><published>2021-03-20T16:20:58+05:30</published><updated>2021-03-27T10:12:42+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-20:/articles/aws/aws-sts.html</id><summary type="html">&lt;p&gt;AWS STS or Security Token Service, provides temporary access credentials to access any AWS resource. This temporary access can be requested by other AWS account, or a federated user in case of hybrid cloud environment who can be authenticated using SAML 2.0, Web identity provider. AWS STS works very closely with IAM Roles.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Security Token Service " src="https://www.archerimagine.com/images/aws/IAM/05-AWS-STS.png" title="AWS Made Easy | AWS STS, Security Token Service"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have seen in the previous topic on &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt;, some users and resource can assume a role, moreover an IAM Roles are like a hat which anyone can wear and gets its power. One important part of this should bother you, how does AWS authenticate such users, if the user is a genuine or not.&lt;/p&gt;
&lt;p&gt;AWS STS of Security token service plays an important part in enabling &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt;. When you are using a cross account resource or any federated users, you can also use AWS STS to provide temporary user credentials.&lt;/p&gt;
&lt;p&gt;AWS STS though can be used to support mobile application using AWS resources, but it is advised to use AWS cognitio, which will be discussed in the future.&lt;/p&gt;
&lt;p&gt;You will learn what is AWS STS, what are its benefits, when to use it. You will also learn to use a specific Action/API called &lt;code&gt;assumerole&lt;/code&gt; to get access to an AWS resource for an AWS cross account.&lt;/p&gt;
&lt;h2 id="aws-sts"&gt;AWS STS&lt;a class="headerlink" href="#aws-sts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS STS (Security token service) as the name suggest, provides a security token for accessing a AWS resources. You may think AWS STS as the provider of temporary access. &lt;/p&gt;
&lt;p&gt;AWS STS has these specific properties when assigning temporary access&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can range from few minutes to a few hours.&lt;/li&gt;
&lt;li&gt;Once the AWS STS provided temporary token expires, it cannot be reused at any point.&lt;/li&gt;
&lt;li&gt;You can invoke AWS STS only through AWS SDKs or AWS CLIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Properties " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-properties.png" title="AWS Made Easy | AWS STS, Properties"/&gt;&lt;/p&gt;
&lt;h3 id="benefits-of-aws-sts"&gt;Benefits of AWS STS&lt;a class="headerlink" href="#benefits-of-aws-sts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS STS solves a very specific problem for you, when you want someone to temporarily access your AWS resource without having concerns of revoking the permission.&lt;/p&gt;
&lt;p&gt;AWS STS provides a way to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should not embedded long term AWS security credentials into an application.&lt;/li&gt;
&lt;li&gt;You should not create extra IAM identities, using IAM roles with AWS STS is enough to satisfy the temporary access requirement.&lt;/li&gt;
&lt;li&gt;You do not have to worry about deactivating the AWS STS credentials, 36 hours is the maximum you can set the AWS STS expiry time depending on the API invoked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Benefits " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-Benefits.png" title="AWS Made Easy | AWS STS, Benefits"/&gt;&lt;/p&gt;
&lt;h3 id="when-to-use-aws-sts"&gt;When to use AWS STS&lt;a class="headerlink" href="#when-to-use-aws-sts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have now understood what is AWS STS, also what are the benefits of AWS STS. You might also have guessed the use cases for using AWS STS. Here if a breakdown for this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Hybrid Cloud setup, where you have to give access to the non AWS account holder. These methods are generally used for giving access to 3rd party&lt;ul&gt;
&lt;li&gt;SAML 2.0 Identity federation.&lt;/li&gt;
&lt;li&gt;Web Identity Federation. (Facebook, Github, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross Account roles, when you have to give your developer account a temporary access to your production account.&lt;/li&gt;
&lt;li&gt;IAM roles for AWS services.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, UseCase " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-UseCase.png" title="AWS Made Easy | AWS STS, UseCase"/&gt;&lt;/p&gt;
&lt;h3 id="aws-sts-actions"&gt;AWS STS Actions&lt;a class="headerlink" href="#aws-sts-actions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should learn about these five common AWS STS Actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssumeRole&lt;/code&gt; : This is used for getting cross account access.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; : This is using any 3rd party web IDP like Google or Facebook.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; : This is for hybrid cloud, where you have an entity with SAML 2.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetFederationToken&lt;/code&gt; : This is used by the AWS root account or any IAM user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetSessionToken&lt;/code&gt; : This is used by the AWS root account or any IAM user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a comparison for you on the above APIs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, API Comparison " src="https://www.archerimagine.com/images/aws/IAM/AWS-STS-API-Comparision.png" title="AWS Made Easy | AWS STS, API Comparison."/&gt;&lt;/p&gt;
&lt;h2 id="aws-sts-assumerole-action"&gt;AWS STS | AssumeRole Action&lt;a class="headerlink" href="#aws-sts-assumerole-action" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You have the basic understanding of the different Action provided by AWS STS. Let's now try to use &lt;code&gt;AssumeRole&lt;/code&gt; API to understand how this works.&lt;/p&gt;
&lt;p&gt;Here is what you are going to try, or what we call a problem definition.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will have a user with no permission on the AWS Account. Now create an IAM Role, with AmazonS3FullAccess permission. Once you have the Role, edit the trust relationship to give ARN of the user which does not have any permission. Now using AWS Boto3 SDK you will make the user connect to AWS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A pictorial representation of the step to help you understand.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS STS, Cross Account AssumeRole" src="https://www.archerimagine.com/images/aws/IAM/Cross-Account-Role.png" title="AWS Made Easy | AWS STS, Cross Account AssumeRole"/&gt;&lt;/p&gt;
&lt;h3 id="aws-sts-create-role"&gt;AWS STS | Create Role&lt;a class="headerlink" href="#aws-sts-create-role" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have to follow all the steps mentioned in the article, &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html#how-to-create-an-aws-iam-role"&gt;IAM Roles&lt;/a&gt;. Once change would be this time we should select the &lt;strong&gt;Another AWS account&lt;/strong&gt; option. You may need to give the 12 digit account number.&lt;/p&gt;
&lt;p&gt;The above steps are the same we will use for cross account access. The steps will not change.&lt;/p&gt;
&lt;h3 id="aws-sts-change-the-trust-relationship"&gt;AWS STS | Change the trust relationship&lt;a class="headerlink" href="#aws-sts-change-the-trust-relationship" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you create the role like it is mentioned in the previous step, by default it will always point to the account root user, you have to change it to the ARN of the user you want to do a &lt;code&gt;AssumeRole&lt;/code&gt;. Here is how you can do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the role.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Trust Relationship&lt;/strong&gt; options, and select the &lt;em&gt;Edit trust relationship&lt;/em&gt; button.&lt;ul&gt;
&lt;li&gt;&lt;img alt="AWS Made Easy | AWS STS, STS | Edit Trust Relationship " src="https://www.archerimagine.com/images/aws/IAM/edit-trust-relationship.png" title="AWS Made Easy | AWS STS, Edit Trust Relationship"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This will open a JSON Editor and edit the JSON for this particular user shown below, esp. the Principal, AWS option.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"AWS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"arn:aws:iam::123456789012:user/Test"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"sts:AssumeRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"Condition"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might be thinking, if we have to edit this option every time we have to assign to a new user, then how is this scalable? &lt;/p&gt;
&lt;p&gt;The answer is, most of the time we will add a particular group with the IAM role attached and the required user is added or removed from the group to control the access.&lt;/p&gt;
&lt;h3 id="aws-sts-boto3-code-to-assumerole"&gt;AWS STS | BOTO3 code to  AssumeRole&lt;a class="headerlink" href="#aws-sts-boto3-code-to-assumerole" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now you have to write using the BOTO3 SDK provide for Python, the sample code to &lt;code&gt;AssumeRole&lt;/code&gt;. Here is the sample code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto3.session&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;

&lt;span class="c1"&gt;# Below is the ARN of the role.&lt;/span&gt;
&lt;span class="n"&gt;arn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"arn:aws:iam::123456789012:role/account-s3-full-access"&lt;/span&gt;
&lt;span class="n"&gt;session_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"example-role"&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sts"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;account_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_caller_identity&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;"Account"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Assume role takes the roles ARN and a sample session name&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assume_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RoleArn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;arn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoleSessionName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create an S3 resource that can access the account with the temporary credentials.&lt;/span&gt;
&lt;span class="n"&gt;temp_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Credentials"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Access the S3 as a resource passing the temporary credentials received from STS.&lt;/span&gt;
&lt;span class="n"&gt;s3_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"s3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"AccessKeyId"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"SecretAccessKey"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;aws_session_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"SessionToken"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Listing buckets for the assumed role's account:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s3_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you run the above code, you should be getting the list of S3 buckets in your account. Though the user did not have access initially.&lt;/p&gt;
&lt;h3 id="aws-sts-assumerole-return-parameters"&gt;AWS STS | AssumeRole | Return Parameters&lt;a class="headerlink" href="#aws-sts-assumerole-return-parameters" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should be thinking what is returned by STS, here is the JSON response returned by calling &lt;code&gt;assume_role&lt;/code&gt; BOTO3 API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;"AssumedRoleUser"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;"Arn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:sts::123456789012:assumed-role/acc-s3-full-access/example-role"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"AssumedRoleId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"AROAUXRIFYXT7BG3ENQGE:example-role"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nt"&gt;"Credentials"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;"AccessKeyId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"ASIAUXRIFYXTUVPIQWFL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"Expiration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;datetime.datetime(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;3,20,9,24,27,&lt;/span&gt;&lt;span class="nt"&gt;"tzinfo=tzutc())"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"SecretAccessKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"BsXYZCGNuemA8wevm6CnYVfZtNgdGaoOCJ4VwXnf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"SessionToken"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"FwoGZXIvYXdzEEoaDFAVerghnmasN971Z76yKwAfJgq3tccU72Gj6Xl28zJwJIUS/UEEMtwYmxUDsplTKg0if/keQ9z1BdoPFdLsmDtUiWDnfvIkICUbCeVk+DKI4c9LtdIAXmhpssg4IAMncYFsmh+ylOdbbcud134TOkDkCtuZMkfKuUbIMG3lTq10k93DsiUFAoH5pqyLAa9IyqHUbKUxwwde0UAcUU1lNFMO/sTZI8kAIQNM4cpGMxdyPsYZaX5M1IGWqr2gPNLqLtKLvi1oIGMi33r+lP9GWX5W+Ich1MHUAfUfhgqIjXHjpmDQY5S0e/WOTBwrPLoorgXQlHMak="&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nt"&gt;"ResponseMetadata"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;"HTTPHeaders"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
         &lt;span class="nt"&gt;"content-length"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"1057"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"text/xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sat, 20 Mar 2021 08:24:27 GMT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;"x-amzn-requestid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"72f38158-1d90-4619-a431-5a2fcf460a31"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;"HTTPStatusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"RequestId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"72f38158-1d90-4619-a431-5a2fcf460a31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;"RetryAttempts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should really be concerned about the &lt;code&gt;Credentials&lt;/code&gt; parameters which is returned. It basically provides 4 information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AccessKeyId : The access key id, which is always required for programmatic access.&lt;/li&gt;
&lt;li&gt;Expiration : Generally it is 15 min, but can vary depending on the type of API being called.&lt;/li&gt;
&lt;li&gt;SecretAccessKey : The secret access key, which is also generated only once.&lt;/li&gt;
&lt;li&gt;SessionToken : As the name suggests, a unique way of identifying the session.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might have now understood that &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html"&gt;IAM Roles&lt;/a&gt; and AWS STS have a symbiotic relationship. AWS STS is required when you need to provide these range of access.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cross account use case, ex. the developer account my need a temporary access to the production system.&lt;/li&gt;
&lt;li&gt;The Hybrid cloud use case, ex. On premise user, authenticated using SAML may need access to AWS resources.&lt;/li&gt;
&lt;li&gt;In Hybrid cloud use case and cross account use case, ex. Authenticating the user using the web identity providers.&lt;/li&gt;
&lt;li&gt;Sometimes IAM Services may need permission to another service, ex EC2 wants to write to a S3 bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above access is provided to you using the AWS STS because.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS STS provides short term credentials, which lives from a few minutes to some hours.&lt;/li&gt;
&lt;li&gt;We should not be bothered to revoke the access as you cannot reuse the expired access.&lt;/li&gt;
&lt;li&gt;AWS STS can be provided using the AWS SDKs or CLIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The real benefits of AWS STS are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need to embed long term credentials to the application.&lt;/li&gt;
&lt;li&gt;No need to create multiple identities for each access request.&lt;/li&gt;
&lt;li&gt;No need to revoke the access, as it expires automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The various actions provided by AWS STS are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssumeRole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetFederationToken&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetSessionToken&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we discussed &lt;code&gt;AssumeRole&lt;/code&gt; Action uses the cross account example, where you created an IAM role, edited the trust relationship and then the user assuming the role, by using the Boto3 SDKs. By doing this the IAM user from another account could access AWS resources for a short period of time.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AssumeRole&lt;/code&gt; returns these parameters when a call is made it &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AccessKeyId &lt;/li&gt;
&lt;li&gt;Expiration &lt;/li&gt;
&lt;li&gt;SecretAccessKey &lt;/li&gt;
&lt;li&gt;SessionToken &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might recognize it returns all the parameters created for IAM user having programmatic access, i.e. AccessKeyId and SecretAccessKey. In addition, we get the SessionToken and an expiration time.&lt;/p&gt;
&lt;p&gt;Please provide you feedback if you have any other use case for AWS STS.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/security/how-to-use-a-single-iam-user-to-easily-access-all-your-accounts-by-using-the-aws-cli/"&gt;How to Use a Single IAM User to Easily Access All Your Accounts by Using the AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devopslearning.medium.com/introduction-to-aws-security-token-service-sts-b3049aade3c1"&gt;Introduction to AWS Security Token Service(STS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-api.html"&gt;Switching to an IAM role (AWS API)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_aws-accounts.html"&gt;Providing access to an IAM user in another AWS account that you own &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html"&gt;Requesting temporary security credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-console.html"&gt;Switching to a role (console)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/DaisukeMiyamoto/2d9ed49dc7625adc41835beab7aad58e"&gt;Boto3 Python Gist &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>A foolproof guide to AWS IAM Roles</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-roles.html" rel="alternate"></link><published>2021-03-18T09:49:34+05:30</published><updated>2021-03-20T08:29:38+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-18:/articles/aws/aws-iam-roles.html</id><summary type="html">&lt;p&gt;When to create a IAM role and when to use a IAM User is always a confusing topic to master. You will learn through this piece the answer to this dilemma. You will learn when to create a IAM Roles, how to use the IAM Role, Uses of IAM roles. After learning this you will never be scratching your head for using IAM Roles.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Roles " src="https://www.archerimagine.com/images/aws/IAM/04-IAM-Roles.png" title="AWS Made Easy | IAM Roles"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The FaceLess Men in GoT (Games of Thrones), hope you remember this character, or Raven/Mystique in X-Men. They both share a common power, what would that be? &lt;/p&gt;
&lt;p&gt;The power to change identity as they wish to accomplish the task at hand. This is what IAM Roles do in a very broad sense.&lt;/p&gt;
&lt;p&gt;You can also think of IAM roles as the Invisibility Cloak in Harry Potter, who ever acquires it becomes invisible. &lt;/p&gt;
&lt;p&gt;IAM Roles are just like a hat, which anyone within AWS can wear, and get the powers presented by the hat, and loses the powers as soon as the hat is removed. The hat does not discriminate between real users or hardware like EC2, anyone can wear this hat.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | A Magical Hat " src="https://www.archerimagine.com/images/aws/IAM/laura-thonne-unsplash.jpg" title="AWS Made Easy | A Magical Hat"/&gt;&lt;/p&gt;
&lt;p&gt;You will also see how IAM Roles can be used, how it is created and attached. You will also see how IAM user is a different concept than IAM Role.&lt;/p&gt;
&lt;h2 id="iam-roles"&gt;IAM Roles&lt;a class="headerlink" href="#iam-roles" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An IAM role is an identity that you can create having very specific permissions. The only difference being you are not associating this policy to any particular user or services at the time of creation. This IAM role can be assumed by anyone who needs it, be it a user or an AWS resource.&lt;/p&gt;
&lt;p&gt;You might be thinking, which problem does IAM role solve which a normal IAM user or a new IAM policy cannot solve. So lets understand why we need the use of IAM Role.&lt;/p&gt;
&lt;h3 id="iam-roles-for-user"&gt;IAM Roles for user&lt;a class="headerlink" href="#iam-roles-for-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you are creating a user in your own account, you cannot give them all the permission as explained in &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-introduction.html"&gt;IAM Introduction &lt;/a&gt;, the principle of least privileges. You cannot have one or multiple users will super user permissions, you cannot have Batman in every city, only Gotham. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | Batman " src="https://www.archerimagine.com/images/aws/IAM/ali-kokab-unsplash.jpg" title="AWS Made Easy | BatMan"/&gt;&lt;/p&gt;
&lt;p&gt;In addition, we can also have non AWS accounts, like cross account want to access your AWS services, or the federated user, who may also need access to the AWS services in case of Hybrid Cloud.&lt;/p&gt;
&lt;p&gt;You have to consider many other use-case along with the above two, for understanding we cannot keep on creating IAM Users to address such diverse range of permission request.&lt;/p&gt;
&lt;h3 id="iam-roles-for-aws-services"&gt;IAM Roles for AWS Services&lt;a class="headerlink" href="#iam-roles-for-aws-services" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might have already read about &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html"&gt;IAM Policy&lt;/a&gt;, AWS resources cannot have IAM policy attach directly. There is another good policy, AWS credentials should not be stored on EC2 instances.&lt;/p&gt;
&lt;p&gt;If you consider the above two guidelines, it will not be possible for any AWS services to communicate with other AWS services / resources to complete the work.&lt;/p&gt;
&lt;h3 id="iam-roles-to-the-rescue"&gt;IAM Roles to the rescue&lt;a class="headerlink" href="#iam-roles-to-the-rescue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you consider both the limitation of IAM User and AWS services, you can think we need some type of magic hat, which gives the sufficient power to both User or Service to execute the task it is elevated for. This is where magic happens with IAM Roles. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | Magic " src="https://www.archerimagine.com/images/aws/IAM/almos-bechtold-unsplash.jpg" title="AWS Made Easy | Magic"/&gt;&lt;/p&gt;
&lt;p&gt;You can use IAM Roles for:- &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One AWS service have to access another AWS service.&lt;ul&gt;
&lt;li&gt;Example: Application running on EC2 may need to access S3.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When you have a Hybrid Cloud implementation&lt;ul&gt;
&lt;li&gt;User from On Premise may want to access AWS Cloud infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EC2 can assume a role only at the time of creation, but once it has a role attached, you can modify it using APIs, CLIs or console at any time. You can attach only 1 role to EC2 at any given time.&lt;/p&gt;
&lt;h3 id="benefits-of-iam-role"&gt;Benefits of IAM Role&lt;a class="headerlink" href="#benefits-of-iam-role" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You may need people from Hybrid cloud implementation to access the AWS account, you may need IAM Roles to be attached once these users are authorized to use SAML or Active directory.&lt;/li&gt;
&lt;li&gt;You may have production and development account in AWS, and your development team may be required to be elevated to access a production account to fix a bug. This can be done using IAM Roles.&lt;/li&gt;
&lt;li&gt;You have an application running on an EC2 instance, It needs access to S3, this can be achieved using IAM Role.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-create-an-aws-iam-role"&gt;How to create an AWS IAM Role&lt;a class="headerlink" href="#how-to-create-an-aws-iam-role" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS IAM Role creation is a three step process.&lt;/p&gt;
&lt;h3 id="step-1-select-the-trusted-entity"&gt;Step 1 | Select the trusted entity&lt;a class="headerlink" href="#step-1-select-the-trusted-entity" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 1" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-01.png" title="AWS Made Easy | IAM Roles Creation | Step 1"/&gt;&lt;/p&gt;
&lt;p&gt;The first step guides you choose which services or identities can assume the role, your options are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Services&lt;ul&gt;
&lt;li&gt;The EC2 instance, lambda etc which needs access to other services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Another AWS account&lt;ul&gt;
&lt;li&gt;This is a cross account access, like a developer taking a production access etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Identity&lt;ul&gt;
&lt;li&gt;Using OIDC to validate user, like the mobile phone apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SAML 2.0 Federation&lt;ul&gt;
&lt;li&gt;Using office resources as authentication parameters, like using service Active Directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can select &lt;strong&gt;AWS Services&lt;/strong&gt; for this experimentation, You can attach this to an EC2 instance, so that it can access the S3.&lt;/p&gt;
&lt;h3 id="step-2-attach-permission-policy"&gt;Step 2 | Attach permission policy&lt;a class="headerlink" href="#step-2-attach-permission-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 2" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-02.png" title="AWS Made Easy | IAM Roles Creation | Step 2"/&gt; &lt;/p&gt;
&lt;p&gt;You can now select policy required to be attached, this step is same as the explained in &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html"&gt;IAM Policy&lt;/a&gt;. You have basically chosen from one of these 2 type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom policy, created using the visual editor or JSON editor.&lt;/li&gt;
&lt;li&gt;AWS managed Policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can select the &lt;strong&gt;AmazonS3ReadOnlyAccess&lt;/strong&gt; for attaching to EC2 instance as agreed in Step 1.&lt;/p&gt;
&lt;h3 id="step-3-review"&gt;Step 3 |  Review&lt;a class="headerlink" href="#step-3-review" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 3" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-03.png" title="AWS Made Easy | IAM Roles Creation | Step 3"/&gt; &lt;/p&gt;
&lt;p&gt;You have to provide these details to complete the IAM Role Creation process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Role Name&lt;ul&gt;
&lt;li&gt;An explicit name, which can be used to attached to the EC2 instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role description&lt;ul&gt;
&lt;li&gt;A description about the role.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trusted Entities&lt;ul&gt;
&lt;li&gt;This is the service selected from &lt;strong&gt;Step 1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Policies&lt;ul&gt;
&lt;li&gt;The policies attached, in this case &lt;strong&gt;AmazonS3ReadOnlyAccess&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-does-the-iam-roles-looks-after-creation"&gt;How does the IAM roles looks after creation?&lt;a class="headerlink" href="#how-does-the-iam-roles-looks-after-creation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Role Creation | Step 4" src="https://www.archerimagine.com/images/aws/IAM/IAM-Role-Creation-04.png" title="AWS Made Easy | IAM Roles Creation | Step 4"/&gt; &lt;/p&gt;
&lt;p&gt;You can see above, this is how an IAM Role looks like after creation. The policy document looks exactly same as an &lt;a href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html"&gt;IAM Policy&lt;/a&gt;. This you can also assume as a baton in a relay race, the service or the user can run with the permission as soon as it gets the policy in the form of an IAM Role.&lt;/p&gt;
&lt;h2 id="iam-roles-vs-iam-users"&gt;IAM Roles Vs IAM Users&lt;a class="headerlink" href="#iam-roles-vs-iam-users" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Roles Vs User " src="https://www.archerimagine.com/images/aws/IAM/IAM-User-Vs-Role.png" title="AWS Made Easy | IAM Roles Vs User"/&gt;&lt;/p&gt;
&lt;p&gt;You should see &lt;a href="https://www.youtube.com/watch?v=VclOgMtBXN4"&gt;this &lt;/a&gt; video tutorial on YouTube. This video explains much better, also the flow chart shown above should also clear your doubts&lt;/p&gt;
&lt;p&gt;You can see the logic is elementary,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have a non living things, like EC2 etc., it gets an IAM Roles. No question asked.&lt;/li&gt;
&lt;li&gt;If it is a living thing, like a person, we have to ask two questions.&lt;ul&gt;
&lt;li&gt;If the permission is temporary then he gets an IAM Roles, else he is an IAM User.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope this clears your mind about the difference between two confusing terms.&lt;/p&gt;
&lt;h2 id="iam-roles-vs-iam-policy"&gt;IAM Roles Vs IAM Policy&lt;a class="headerlink" href="#iam-roles-vs-iam-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM Roles and IAM Policy both have a JSON document identifying the rule. The only difference is the mention of &lt;strong&gt;Trusted Entities&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might now be relieved by understanding the concept of IAM roles, as discussed we use IAM Roles for mainly three purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One AWS service using another service, like EC2 instance, wants to read from S3.&lt;/li&gt;
&lt;li&gt;In the hybrid environment, a non AWS user might need access to AWS resources temporarily.&lt;/li&gt;
&lt;li&gt;Cross account access, where a developer may need access to production account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should also think of an IAM Roles as a hat, which a person or services wears and it magically gets the permission and when it drops the hat, it comes back to original state.&lt;/p&gt;
&lt;p&gt;You also should think about EC2 instance, it should not store the IAM User credentials, they should be using the IAM Roles instead. The IAM Roles can be attached to an EC2 instance, during creation, and can be changed afterwards, but not attached after creation. You can attach only one IAM role to an EC2 instance and not multiple.&lt;/p&gt;
&lt;p&gt;You learned that IAM Role creation is a 3 step process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the trusted entity&lt;/li&gt;
&lt;li&gt;Attach permission policy&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The IAM Role has been just like IAM Policy document, a JSON document having statements.&lt;/p&gt;
&lt;p&gt;You can be confused with IAM Role and IAM User, we can simplify it, saying, if it is a resource we use an IAM Roles. If a physical user needs temporary access, it uses IAM Roles, otherwise it is an IAM User.&lt;/p&gt;
&lt;p&gt;You can comment and let me know if the IAM user is different than IAM Role.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Laura Thonne &lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@_alikokab_"&gt;Ali Kokab &lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@almosbech"&gt;Almos Bechtold &lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VclOgMtBXN4"&gt;AWS IAM Overview - It’s Surprisingly Simple - Users vs Roles &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>Global Infrastructure comparison of AWS, GCP and Azure. Updated 2020</title><link href="https://www.archerimagine.com/articles/aws/aws-global-Infrastructure.html" rel="alternate"></link><published>2021-03-17T11:05:44+05:30</published><updated>2021-03-17T20:06:58+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-17:/articles/aws/aws-global-Infrastructure.html</id><summary type="html">&lt;p&gt;Azure, AWS, and GCP are the front runner in providing Cloud technologies. As per 2020 Gartner Magic Quadrant for Cloud Infrastructure and Platform Services, AWS is the leader from last 10 years. How much is the difference between these service providers. How big is the reach of these? Do they differ between each other drastically or the difference is minuscule?&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Global Infrastructure |  AWS VS GCP VS Azure " src="https://www.archerimagine.com/images/aws/IAM/Global-Infrastructure-Comparision-01.png" title="Global Infrastructure"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS, Azure, GCP are the three largest cloud infrastructure providers. These three are already a big name within the technological space. These enterprises have a greater understanding of the technological space.&lt;/p&gt;
&lt;p&gt;You may be wondering what is the difference between these companies that offer cloud infrastructure?, what really sets these player apart? Can they not simply replicate in order to provide similar infrastructure and services?&lt;/p&gt;
&lt;p&gt;Let's us compare these Cloud Infrastructure provider with respect to just the infrastructure point of view, we will compare these on five broad terms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region&lt;/li&gt;
&lt;li&gt;Availability Zone&lt;/li&gt;
&lt;li&gt;Countries Served.&lt;/li&gt;
&lt;li&gt;Connecting to On Premise&lt;/li&gt;
&lt;li&gt;CDNs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data used for these comparisons are collected from the individual cloud provider's documentation. AWS and GCP had their data presented in straightforward fashion, Azure was little indirect, but tried consolidating the data for you in the best possible manner.&lt;/p&gt;
&lt;h2 id="region"&gt;Region&lt;a class="headerlink" href="#region" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the major Cloud Providers have their data centers, which host their core services across the planet to help you get the best reach. The region is a big differentiator for a lot of business to choose a Cloud Provider.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Region " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-Region.png" title="Global Infrastructure | Region"/&gt;&lt;/p&gt;
&lt;p&gt;The above picture depicts that Azure is a clear winner with almost double the number of regions from both its competitors. This decision to make Azure a clear winner is little in the Grey area.&lt;/p&gt;
&lt;p&gt;For example, if you have to run a dedicated cloud server out of China, you only have AWS and Azure as your option other than the local vendors. GCP won't be an option for you in China. &lt;/p&gt;
&lt;p&gt;Similarly for cloud operation in South Africa again, you are out of luck with Google.&lt;/p&gt;
&lt;p&gt;Azure has the highest density of the region among cloud providers, this helps in failover switching in case of a complete region going down, this is explained very beautifully for you in this &lt;a href="https://www.smikar.com/azure-vs-aws-iaas-resilience/"&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="availability-zone"&gt;Availability zone&lt;a class="headerlink" href="#availability-zone" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once you are through the region, the number of actual physical data centers available in a region, called as Availability Zone, is your next decision making point.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Availability Zone " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-AZs.png" title="Global Infrastructure | Availability Zone"/&gt;&lt;/p&gt;
&lt;p&gt;The above graphs, clearly depicts that AWS and GCP are head to head and Azure is lagging behind. This will be the truth if you consider the above graph individually. &lt;/p&gt;
&lt;p&gt;When you see this data point along with the region data points, you can argue that all the cloud vendors are pretty tied up in these regards.&lt;/p&gt;
&lt;p&gt;Azure did announce its beta of AZs only in 2017, with that in mind it still has to catch-up, but till this point you will agree that the decision to opt for a particular cloud vendor based on geography is still not decisive.  &lt;/p&gt;
&lt;h2 id="countries-served"&gt;Countries Served&lt;a class="headerlink" href="#countries-served" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Counties served individually by the cloud vendors may not be a such great differentiator for the service, but if you reside or your customer resides in any such location then you are out of luck.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Countries " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-Countries.png" title="Global Infrastructure | Countries"/&gt;&lt;/p&gt;
&lt;p&gt;The above graph, clearly shows AWS as the winner, but even the others will be catching up. AWS will not have any more countries left to expand and these other vendors can easily catch-up if their intent to do so.&lt;/p&gt;
&lt;h2 id="direct-connect-vs-expressroute-vs-dedicated-interconnect"&gt;Direct Connect Vs ExpressRoute Vs Dedicated Interconnect&lt;a class="headerlink" href="#direct-connect-vs-expressroute-vs-dedicated-interconnect" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Direct Connect or Azure ExpressRoute or GCP's dedicated interconnect, is a way for you to connect your on-premise data center to AWS. This helps in reducing the cost to you and also avoids the open Internet for your private data. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Direct Connect " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-DirectConnect.png" title="Global Infrastructure | Direct Connect"/&gt;&lt;/p&gt;
&lt;p&gt;The above graphs shows Google as the winner, but as discussed there is not much difference with the other vendors. &lt;/p&gt;
&lt;p&gt;The above graphs also only considers the Direct Connect run by the vendors individually and not the partner data centers. When you consider the partners, then maybe the horizon may change.&lt;/p&gt;
&lt;h2 id="edgelocation-vs-edgezone"&gt;EdgeLocation Vs EdgeZone&lt;a class="headerlink" href="#edgelocation-vs-edgezone" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The CDNs, for making the content available to the user as close to his point of contact is a very important decision to make while choosing a cloud vendor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Edge Location " src="https://www.archerimagine.com/images/aws/IAM/Global-Infra-EdgeLocation.png" title="Global Infrastructure | Edge Location"/&gt;&lt;/p&gt;
&lt;p&gt;AWS is the winner again and that too with a big difference. This graph again considers only the vendor owned CDNs, the number may vary greatly if you include the partner's location.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The above depiction of five key infrastructure variable may not pursue you to a particular cloud vendor. &lt;/p&gt;
&lt;p&gt;Region and AZs can be a deciding factor, depending on where you want to run your data centers, but also you need to think that all regions are not created equals. As described in this &lt;a href="https://www.bmc.com/blogs/cloud-availability-regions-zones/"&gt;blog&lt;/a&gt;, there is a hardware difference between region. When you are deciding between vendors, check these parameters before deciding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geographic limitation for operations.&lt;/li&gt;
&lt;li&gt;Hardware type as per the region.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Countries Served is not a very important parameter to differentiate between the cloud vendors, as in the near future these may not be very important factor.&lt;/p&gt;
&lt;p&gt;Direct Connect and CDNs also cannot make an important factor if you consider the partner networks. &lt;/p&gt;
&lt;p&gt;This way you can be sure that just infrastructure cannot be the differentiator while choosing a Cloud vendors, until it is not because of geographic location of the server.&lt;/p&gt;
&lt;p&gt;There are other factors which come to play when you are deciding on a particular cloud provider, like the services provided, the pricing, ease of deployment, support provided and also expertise availability in your region. &lt;/p&gt;
&lt;p&gt;You have to take the holistic view while deciding on a particular cloud provider, even nowadays where the difference between cloud providers' services also matches, you can also opt for a multi cloud solution, choosing what is best from a particular cloud provider. &lt;/p&gt;
&lt;h2 id="info-graphics"&gt;Info graphics&lt;a class="headerlink" href="#info-graphics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Global Infrastructure |  Info Graphics " src="https://www.archerimagine.com/images/aws/IAM/Global Infrastructure-01.png" title="Global Infrastructure | Info Graphics"/&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.bmc.com/blogs/cloud-availability-regions-zones/"&gt;Availability Regions and Zones for AWS, Azure &amp;amp; GCP &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tutorialsdojo.com/google-cloud-global-infrastructure/"&gt;Google Cloud Global Infrastructure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://k21academy.com/microsoft-azure/az-104/az-104-region-availability-zone-availability-sets-and-fault-domainupdate-domain-in-microsoft-azure/"&gt;[AZ-104] Region, Availability Zone, Availability Sets and Fault Domain,Update Domain In Microsoft Azure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://build5nines.com/map-azure-regions/"&gt;Azure Regions Interactive Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smikar.com/azure-vs-aws-iaas-resilience/"&gt;IaaS Resilience, which cloud platform is better? Azure or AWS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt;Global Infrastructure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/about/locations"&gt;Google Cloud locations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/blog/introducing-azure-availability-zones-for-resiliency-and-high-availability/"&gt;Introducing Azure Availability Zones for resiliency and high availability &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we have discussion on the region, AZs, countries, direct connect and edge location above, what will you think is important factor when you are deciding on the cloud vendors, comment below and let me know? &lt;/p&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS Made Easy | IAM Users</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-users.html" rel="alternate"></link><published>2021-03-06T23:26:46+05:30</published><updated>2021-03-11T18:32:58+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-06:/articles/aws/aws-iam-users.html</id><summary type="html">&lt;p&gt;We have learned about IAM policy and its basics. We will apply those to a specific user here. We will also learn the various way s IAM users can get access to the AWS resources and also how can an IAM user rotate password.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users " src="https://www.archerimagine.com/images/aws/IAM/03-IAM-Users.png" title="AWS Made Easy | IAM Users"/&gt;&lt;/p&gt;
&lt;h2 id="iam-users"&gt;IAM Users&lt;a class="headerlink" href="#iam-users" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM users are an important AWS resources. This is the identity given to a physical user or application when he logs into AWS.&lt;/p&gt;
&lt;p&gt;AWS identifies an IAM user with these identifiers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Friendly user name: We provide an identifiable user name.&lt;/li&gt;
&lt;li&gt;ARN: An amazon resource name (ARN), &lt;/li&gt;
&lt;li&gt;Access ID: A unique identifier which is returned when working with SDKs or CLIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-users-user-permission"&gt;IAM Users | User Permission&lt;a class="headerlink" href="#iam-users-user-permission" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The default IAM User permission is &lt;strong&gt;non-explicit deny&lt;/strong&gt; for all AWS services. To provide the user access we can be provided explicit permission in one of these ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding a user to a group.&lt;/li&gt;
&lt;li&gt;Copying permission from another user.&lt;/li&gt;
&lt;li&gt;Attaching a policy directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-users-groups"&gt;IAM Users | Groups&lt;a class="headerlink" href="#iam-users-groups" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In an organization, it makes sense to group each department into a group and the assign users to these groups.&lt;/p&gt;
&lt;h3 id="iam-users-arn"&gt;IAM Users | ARN&lt;a class="headerlink" href="#iam-users-arn" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ARN (Amazon resource name), is specified in this format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;arn:aws:iam:&amp;lt;region&amp;gt;:&amp;lt;account_id&amp;gt;:user/admin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the IAM user ARN is like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;arn:aws:iam::&amp;lt;account_id&amp;gt;:user/admin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;region&amp;gt;&lt;/code&gt; is missing in a IAM user ARN, as IAM is a global service.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;user/admin&lt;/code&gt; defines the actual resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="iam-users-create-a-new-user"&gt;IAM Users | Create a new user.&lt;a class="headerlink" href="#iam-users-create-a-new-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM user creation is a 5 step process.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps" src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps.png" title="AWS Made Easy | IAM Users creation steps"/&gt;&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-1-add-user"&gt;IAM Users | Creation | Step 1 | Add user&lt;a class="headerlink" href="#iam-users-creation-step-1-add-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first step in the IAM User creation process is: Add user.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, add user" src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-01-add-user.png" title="AWS Made Easy | IAM Users creation steps, add user"/&gt;&lt;/p&gt;
&lt;p&gt;We have to fill a few of the fields. Lets understand these fields.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set user details &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We should provide the user name for the IAM user, mostly a friendly name.&lt;/li&gt;
&lt;li&gt;We can add multiple user in this step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select AWS access type: There are two ways for the user to access AWS resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programmatic Access : This is to generate the access key ID and secret access key for AWS CLIs, SDKs and other development tools.&lt;/li&gt;
&lt;li&gt;AWS management console access : Creates a user who can log into the AWS console using a password.&lt;ul&gt;
&lt;li&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, programmatic access" src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-02-console-access.png" title="AWS Made Easy | IAM Users creation steps, programmatic access"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can mix and match the programmatic access and also management console access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-users-creation-step-2-set-permissions"&gt;IAM Users | Creation | Step 2 | Set Permissions&lt;a class="headerlink" href="#iam-users-creation-step-2-set-permissions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step in user creation is to set permissions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, set permissions " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-03-set-permissions.png" title="AWS Made Easy | IAM Users creation steps, set permissions"/&gt;&lt;/p&gt;
&lt;p&gt;There are 3 ways to add permissions to a user.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add user to a group.&lt;ul&gt;
&lt;li&gt;Add the new user to a group based on the job function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy permission from existing users.&lt;ul&gt;
&lt;li&gt;If we have existing user, we can copy policy for that user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attach existing policies directly.&lt;ul&gt;
&lt;li&gt;We can singularly attach a multiple policy to a user directly, both AWS managed and customer managed. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most efficient way to add permission to a group of user is to add the user to a group.&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-3-add-tags"&gt;IAM Users | Creation | Step 3 | Add Tags&lt;a class="headerlink" href="#iam-users-creation-step-3-add-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, add tags " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-04-add-tags.png" title="AWS Made Easy | IAM Users creation steps, add tags"/&gt;&lt;/p&gt;
&lt;p&gt;Tags are an important component in all service creation. We can assign a key/value pair to manage user efficiently.&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-4-review"&gt;IAM Users | Creation | Step 4 | Review&lt;a class="headerlink" href="#iam-users-creation-step-4-review" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, review " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-05-review.png" title="AWS Made Easy | IAM Users creation steps, review"/&gt;&lt;/p&gt;
&lt;p&gt;The penultimate steps of user creation is to review the configuration we have provided. As show in the screen shot above, it displays all the configuration selected till now based on which the user will be created.&lt;/p&gt;
&lt;h3 id="iam-users-creation-step-5-success"&gt;IAM Users | Creation | Step 5 | Success&lt;a class="headerlink" href="#iam-users-creation-step-5-success" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, success " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-06-success.png" title="AWS Made Easy | IAM Users creation steps, success"/&gt;&lt;/p&gt;
&lt;p&gt;In the last step of user creation it has given these options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download csv&lt;ul&gt;
&lt;li&gt;&lt;img alt="AWS Made Easy | IAM Users creation steps, download csv  " src="https://www.archerimagine.com/images/aws/IAM/iam-user-creation-steps-07-download-csv.png" title="AWS Made Easy | IAM Users creation steps, download csv"/&gt;&lt;/li&gt;
&lt;li&gt;This CSV gives these details&lt;ul&gt;
&lt;li&gt;User Name&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;Access Key ID&lt;/li&gt;
&lt;li&gt;Secret access key&lt;ul&gt;
&lt;li&gt;These two are provided when we have the programmatic access enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Console login link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This is the only time we get the Secret access key along with the access key ID, there is no way to recreate the same secret access key again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We also got the some of the above information displayed accordingly the way the user was created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="iam-user-properties"&gt;IAM User Properties&lt;a class="headerlink" href="#iam-user-properties" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lets see a few of the properties displayed for the user in the AWS IAM dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users summary  " src="https://www.archerimagine.com/images/aws/IAM/iam-user-summary-01.png" title="AWS Made Easy | IAM Users summary"/&gt;&lt;/p&gt;
&lt;p&gt;The above screen shot shows that the IAM user summary / property can be grouped into&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permissions&lt;/li&gt;
&lt;li&gt;Groups&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Security Credentials&lt;/li&gt;
&lt;li&gt;Access Advisor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the above group, the most important to consider is Security credentials.&lt;/p&gt;
&lt;h3 id="permissions"&gt;Permissions&lt;a class="headerlink" href="#permissions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above screen shot clearly depicts, this property displays the permission present to the user. In the above case, the user gets 2 IAM policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attached directly.&lt;ul&gt;
&lt;li&gt;The IAMUserChangePassword is the policy applied directly to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attached from group.&lt;ul&gt;
&lt;li&gt;The Administrator access is attached via the Group.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="groups-tags"&gt;Groups &amp;amp; Tags&lt;a class="headerlink" href="#groups-tags" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This property depicts the groups and the tags associated with the user.&lt;/p&gt;
&lt;h3 id="access-advisor"&gt;Access Advisor&lt;a class="headerlink" href="#access-advisor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users Access Advisor " src="https://www.archerimagine.com/images/aws/IAM/iam-user-summary-02.png" title="AWS Made Easy | IAM Users Access Advisor"/&gt;&lt;/p&gt;
&lt;p&gt;There is always a need as an administrator to review user behavior in AWS like the number of services used, the frequency in which it is used. In the Access Advisor tab, IAM provides this information about the user, and helps in identifying the unused permissions.&lt;/p&gt;
&lt;h3 id="security-credentials"&gt;Security Credentials&lt;a class="headerlink" href="#security-credentials" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Users security credentials " src="https://www.archerimagine.com/images/aws/IAM/iam-user-summary-03.png" title="AWS Made Easy | IAM Users security credentials"/&gt;&lt;/p&gt;
&lt;p&gt;The major section of security credentials are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sign-in credentials&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Provides with link to console sign-in link&lt;/li&gt;
&lt;li&gt;Console password: is it enabled or not&lt;/li&gt;
&lt;li&gt;Assigned MFA device: Is the device assigned or not&lt;/li&gt;
&lt;li&gt;Signing certificate: We can upload any specific X.509 certificate for use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Keys&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The keys to make programmatic calls to AWS by CLI, SDKs, API calls.&lt;/li&gt;
&lt;li&gt;We can even create an access key from here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH Keys for AWS code commit&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;SSH public key to access AWS code commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTPS Git credentials for AWS code commit&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;User name and password to access AWS code commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credentials for Amazon keyspaces.&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;User name and password to access Amazon Keyspaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The AWS IAM user is anybody who will use the login credentials or the programmatic access to AWS. Each IAM user can easily be identified using a friendly name, or a unique ARN or an Access ID. The IAM user can get permission by getting itself attached to a group, or having the policy attached directly or copying from an existing user. Providing permission by adding them to a group is the best IAM policy.&lt;/p&gt;
&lt;p&gt;AWS IAM user creation is a 5 step process, but the important steps are only 2, the first one has given a user name to the user, along with the type of access it needs. This is followed by, adding permission to the user, which can be done by attaching it to a group or copying from an existing user or by attaching the policy directly.&lt;/p&gt;
&lt;p&gt;The AWS IAM user has specific properties like permission which it has and from where it got the permission, like attached directly or received it from a group. There is a specific property called Access Advisor, which an administrator can use to review if the user is regularly using the permissions or not and depending on that can review to keep the permission or remove it. AWS IAM users also have a property called security credentials, which tells if the user has a password or not and also if MFA is enabled or not, we can also see the access ID but not the key, and we can add the ssh keys for code commit.&lt;/p&gt;
&lt;p&gt;Each action done on AWS is done by some type of user. &lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.amazonaws.cn/en_us/IAM/latest/UserGuide/introduction.html"&gt;AWS Docs | What is IAM? &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS Made Easy | IAM Policy</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-policy.html" rel="alternate"></link><published>2021-03-03T10:31:40+05:30</published><updated>2021-03-08T09:40:24+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-03-03:/articles/aws/aws-iam-policy.html</id><summary type="html">&lt;p&gt;When we want to give access to various resources to AWS, how do we do it, how do we define the various ways a user can get access. These are parameters are defined in a JSON document called IAM Policy. We will learn about this in this blog.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Policy " src="https://www.archerimagine.com/images/aws/IAM/02-IAM-Policy.png" title="AWS Made Easy | IAM Policy"/&gt;&lt;/p&gt;
&lt;h2 id="iam-policy"&gt;IAM Policy&lt;a class="headerlink" href="#iam-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A document which provides the details of the permission granted to access any AWS resources is called an &lt;strong&gt;IAM Policy.&lt;/strong&gt; The default policy applied to all AWS users is &lt;strong&gt;non explicit deny&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;The IAM Policy takes effect as soon it is attached to a user or group, there is no delay in its application. 
The User &amp;amp; Groups can have more than 1 policy attached at any given time. 
Roles are utilized because we cannot attach policy directly to AWS resources.&lt;/p&gt;
&lt;h3 id="iam-policy-document"&gt;IAM Policy Document&lt;a class="headerlink" href="#iam-policy-document" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How does an IAM Policy look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above is an example of an IAM Policy&lt;/p&gt;
&lt;p&gt;If we observe closely, these are the various important points to note about the IAM Policy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statement&lt;ul&gt;
&lt;li&gt;Each IAM policy is composed of &lt;strong&gt;statements&lt;/strong&gt;. Policy can have one or more statements. In the above example, there is only 1 statement, composed of&lt;/li&gt;
&lt;li&gt;Effect&lt;ul&gt;
&lt;li&gt;It tells if the impact is allowed or deny. It takes these 2 values. In the above example, it is &lt;strong&gt;Allow&lt;/strong&gt; for all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Action&lt;ul&gt;
&lt;li&gt;What type of action is allowed or denied. We can drill it down to single API also, which we will see later. In the above example, it is allowing all actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource&lt;ul&gt;
&lt;li&gt;Which resource are being accessed using the policy. Like in case of S3, it can mention the resource is a S3 bucket, not the full S3. In the above example, all the resources are being granted access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="explicit-allow-explicit-deny"&gt;Explicit Allow &amp;amp; Explicit deny&lt;a class="headerlink" href="#explicit-allow-explicit-deny" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When granting access explicitly we have 2 categories of IAM Policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicit Allow&lt;/li&gt;
&lt;li&gt;Explicit Deny&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a user has both explicit allow and explicit deny, then the explicit deny always take precedence. In all cases just remember deny is the best way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example of explicit allow&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Example of explicit deny&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Deny"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="iam-policy-templates"&gt;IAM Policy Templates&lt;a class="headerlink" href="#iam-policy-templates" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can have an IAM policy in two ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre-Built Policy&lt;/li&gt;
&lt;li&gt;Custom Policy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pre-built-policy"&gt;Pre-Built Policy&lt;a class="headerlink" href="#pre-built-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;These are the policies provided by AWS to all the users. We can just pick and use which ever we like.&lt;/li&gt;
&lt;li&gt;These policies are identified with an Amazon logo just next to them.
&lt;img alt="AWS Made Easy | AWS managed IAM Policy " src="https://www.archerimagine.com/images/aws/IAM/02-aws-managed-policy.png" title="AWS Made Easy | AWS managed IAM Policy"/&gt;&lt;ul&gt;
&lt;li&gt;Most commonly used pre-build polices are  &lt;ul&gt;
&lt;li&gt;Administrator Access&lt;/li&gt;
&lt;li&gt;Power User Access&lt;/li&gt;
&lt;li&gt;Read-Only Access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="administrator-access"&gt;Administrator Access&lt;a class="headerlink" href="#administrator-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Administrator Access: Full Access to all AWS resources.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="power-user-access"&gt;Power User Access&lt;a class="headerlink" href="#power-user-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Admin Access, except it does not allow user-group management. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"NotAction"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"organizations:*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"account:*"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:CreateServiceLinkedRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:DeleteServiceLinkedRole"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"iam:ListRoles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"organizations:DescribeOrganization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"account:ListRegions"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="read-only-access"&gt;Read-Only Access&lt;a class="headerlink" href="#read-only-access" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Only View AWS resources. This policy is very big, please search for it in AWS.
    - The AWS managed policies cannot be edited, they are read only.&lt;/p&gt;
&lt;h3 id="custom-policy"&gt;Custom Policy&lt;a class="headerlink" href="#custom-policy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some time the requirements of a policy cannot be fulfilled from an AWS managed policy. We have to use a custom policy in those cases. &lt;/li&gt;
&lt;li&gt;We can import the pre-built policy into our own, and then modify them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="custom-iam-policy-generation"&gt;Custom IAM Policy Generation&lt;a class="headerlink" href="#custom-iam-policy-generation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to AWS provided policy, user can also create custom policy. We have 2 methods to create custom policy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Editor&lt;/li&gt;
&lt;li&gt;JSON Editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-editor"&gt;Visual Editor&lt;a class="headerlink" href="#visual-editor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The are 4 selections, we have to do for creating a policy, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Made Easy | AWS create IAM Policy " src="https://www.archerimagine.com/images/aws/IAM/02-create-policy.png" title="AWS Made Easy | AWS create IAM Policy"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service&lt;ul&gt;
&lt;li&gt;Choose a service like, IAM, S3, EC2 on which the policy is applicable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actions&lt;ul&gt;
&lt;li&gt;Based on the service selected, we can choose the Actions, which can be associated with it.&lt;/li&gt;
&lt;li&gt;Primarily the actions are&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Read&lt;/li&gt;
&lt;li&gt;Tagging&lt;/li&gt;
&lt;li&gt;Write&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Certain service have certain extra Actions associated with itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resources&lt;ul&gt;
&lt;li&gt;We can restrict the Actions allowed on Services selected to specific resources. &lt;/li&gt;
&lt;li&gt;We may not have to provide the full access.&lt;/li&gt;
&lt;li&gt;The access can be restricted to even a particular ARN.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Request Conditions&lt;ul&gt;
&lt;li&gt;The policy can also specify if the &lt;ul&gt;
&lt;li&gt;MFA is required for the access&lt;/li&gt;
&lt;li&gt;Only a particular public IP should be &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We also restrict using the time or the day and various other parameters.&lt;/li&gt;
&lt;li&gt;All the conditions if selected is &lt;strong&gt;AND&lt;/strong&gt;ed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also take a easy way out, by &lt;strong&gt;"Import Managed Policy"&lt;/strong&gt; and then modifying it to our need.&lt;/p&gt;
&lt;p&gt;After selecting the above information we are only left with providing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tags &lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="json-editor"&gt;JSON Editor&lt;a class="headerlink" href="#json-editor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can use JSON editor if we understand the JSON syntax, and the format in which AWS wants the KEY/Value pairs. We can also import an existing policy and then edit the JSON.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To summarize, IAM policy is a document representing the permission encapsulated inside for a USER or a Role. &lt;/p&gt;
&lt;p&gt;The default policy on IAM is non explicit deny, but though IAM we can give either an explicit deny or an explicit allow. The explicit deny always takes precedence over any explicit allow.&lt;/p&gt;
&lt;p&gt;IAM policy are categorized into either managed by AWS, or user created. There are many AWS managed policy and the most useful once are Administrator policy, Power user policy and Read Only Policy.&lt;/p&gt;
&lt;p&gt;The IAM policy is a JSON statement, and having these 3 statement at the minimum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Effect&lt;/li&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IAM policy can be created by using the custom visual editor or the IAM JSON editor. Generally for new users the visual editor is beneficial once the user becomes comfortable, we can change to JSON editor.&lt;/p&gt;
&lt;p&gt;Multiple policy can be applied to Groups and Users. Roles are used for AWS resources.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create-console.html#access_policies_create-visual-editor"&gt;Creating IAM policies (console)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS Made Easy | IAM Introduction</title><link href="https://www.archerimagine.com/articles/aws/aws-iam-introduction.html" rel="alternate"></link><published>2021-02-17T00:25:36+05:30</published><updated>2021-03-02T10:13:09+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-02-17:/articles/aws/aws-iam-introduction.html</id><summary type="html">&lt;p&gt;In this blog let us understand the basics of IAM, Identity and access Management. This is service which is used to control access to all the resource in AWS. The key component of IAM are User, Groups, Policy, Roles, API keys.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS Made Easy | IAM Introduction " src="https://www.archerimagine.com/images/aws/IAM/AWS-made-easy-iam.png" title="AWS Made Easy | IAM Introduction"/&gt;&lt;/p&gt;
&lt;h2 id="iam-introduction"&gt;IAM Introduction&lt;a class="headerlink" href="#iam-introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IAM provides the interface to join the great world of AWS. Its major goal is to provide both human and computer, who are the consumers of AWS services a way to access them.&lt;/p&gt;
&lt;h3 id="iam-components"&gt;IAM Components&lt;a class="headerlink" href="#iam-components" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;IAM service have five(5) components:- &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User - The user of AWS resource, can be a person or a machine  &lt;/li&gt;
&lt;li&gt;Groups - The above user can be grouped together  &lt;/li&gt;
&lt;li&gt;Policy - It defines the permission of the IAM identity.  &lt;/li&gt;
&lt;li&gt;Roles - A roles are just a policy, but not associated with the Users directly.  &lt;/li&gt;
&lt;li&gt;API Keys - The keys used to programmatically accessing the AWS console.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="iam-property"&gt;IAM property&lt;a class="headerlink" href="#iam-property" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS works on two very important principles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Principle of least privilege.  &lt;ul&gt;
&lt;li&gt;Any user, group must be granted minimum permission to complete the activity.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non explicit deny rule.  &lt;ul&gt;
&lt;li&gt;We are new user have no explicit allow rule for a resource, AWS assumes it to be access denied.  &lt;/li&gt;
&lt;li&gt;Only an explicit allow can override a non explicit deny rule.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="admin-vs-root-user"&gt;Admin Vs root User&lt;a class="headerlink" href="#admin-vs-root-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="root-user"&gt;root user&lt;a class="headerlink" href="#root-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the very first user which is created when we sign-up for AWS using our emailID. This user has god like access and is not under the control of IAM.&lt;/p&gt;
&lt;p&gt;This login must never be used for daily activities within AWS.&lt;/p&gt;
&lt;p&gt;These 5 steps should be done as soon as we login to AWS root account.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delete the root access keys.&lt;/li&gt;
&lt;li&gt;Enable MFA&lt;/li&gt;
&lt;li&gt;Create user&lt;/li&gt;
&lt;li&gt;Create groups and assign user to groups&lt;/li&gt;
&lt;li&gt;Apply an IAM password policy&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="admin-user"&gt;Admin user&lt;a class="headerlink" href="#admin-user" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can create a copy of the root user with complete admin access. This is the &lt;em&gt;Admin&lt;/em&gt; user. This is user comes under the purview of IAM and should be used as a daily driver in AWS.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we login to the AWS console for the first time we create the &lt;em&gt;root&lt;/em&gt; user, this is the god like user which has all the access and have no control via the IAM policies. This user is not supposed to be used for day to day activity, in place we should be using another user called &lt;em&gt;admin&lt;/em&gt; which has all the policies similar to &lt;em&gt;root&lt;/em&gt; user but is controlled via IAM.&lt;/p&gt;
&lt;p&gt;There are a few important steps to perform as soon as we login to the AWS console for the first time, which is to delete the programmatic access key for the root user followed by creation of users and groups. The policy to be attached to groups and user can be part of groups. There also should be a password policy specified for the users.&lt;/p&gt;
&lt;p&gt;AWS works on 2 important principle, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Principle of least privilege &lt;/li&gt;
&lt;li&gt;Non explicit deny rule&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that, all the user should be provided the bare minimum of the access required to get the job done, and if not specified, by default the user does not have access to any resources on AWS.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@alesnesetril"&gt;Ales Nesetril &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>AWS - Shared Responsibility &amp; Global Infrastructure.</title><link href="https://www.archerimagine.com/articles/aws/general-aws.html" rel="alternate"></link><published>2021-02-12T21:19:02+05:30</published><updated>2021-03-15T00:13:49+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2021-02-12:/articles/aws/general-aws.html</id><summary type="html">&lt;p&gt;AWS is very vast in its present form, understanding it would be very challenging. We will being this journey at the epicenter of AWS, the Shared responsibility model and its global infrastructure.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="AWS made easy | IAM " src="https://www.archerimagine.com/images/aws/IAM/AWS-made-easy-iam.png" title="AWS made easy | IAM"/&gt;&lt;/p&gt;
&lt;h2 id="aws-global-infrastructure"&gt;AWS - Global Infrastructure&lt;a class="headerlink" href="#aws-global-infrastructure" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS is a cloud infrastructure provider, it's a pioneer in this field. Cloud and AWS have become synonyms, it would be difficult for a developer today to be unaware of AWS or cloud in general. This blog is an effort of mine to present this vast and ever expanding concept into very easy and fun method.&lt;/p&gt;
&lt;p&gt;Learning new concepts in their 40's is very difficult, would try to make it as easy as possible for anyone want to embark on this journey.&lt;/p&gt;
&lt;p&gt;AWS/Cloud has become an indispensable part of the Software industry due to a few of these important properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Global Deployment&lt;/li&gt;
&lt;li&gt;Millisecond Latency &lt;/li&gt;
&lt;li&gt;Commission and decommission at will&lt;/li&gt;
&lt;li&gt;Pay as you use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if core AWS services are not available in certain location, it still uses different non AWS services to enable developer to relax and focus on developing great software.&lt;/p&gt;
&lt;h3 id="user-type"&gt;User Type&lt;a class="headerlink" href="#user-type" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are 2 types of AWS users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root user&lt;ul&gt;
&lt;li&gt;The user which is created when we first become an AWS consumer by signing in.&lt;/li&gt;
&lt;li&gt;This user has God like permission, and is not governed by IAM rules.&lt;/li&gt;
&lt;li&gt;It is not safe to use this user for day to day activity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Administrator user &lt;ul&gt;
&lt;li&gt;This is the user which is created though the IAM.&lt;/li&gt;
&lt;li&gt;This controls the management of other user.&lt;/li&gt;
&lt;li&gt;This is the user which should be used for daily activity.&lt;/li&gt;
&lt;li&gt;It has all the access just like root user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="best-practices"&gt;Best Practices&lt;a class="headerlink" href="#best-practices" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Always enable MFA for all users.&lt;/li&gt;
&lt;li&gt;Have an explicit password policy. i.e. expiry of password.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="connection-type"&gt;Connection Type&lt;a class="headerlink" href="#connection-type" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are 3 ways to connect to AWS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Console&lt;ul&gt;
&lt;li&gt;The default mode, which we all use.&lt;/li&gt;
&lt;li&gt;This is the website for AWS, which can do pretty much all the stuff possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS SDKs &lt;ul&gt;
&lt;li&gt;These are  developers to make use of all the AWS resources while developing the application.&lt;/li&gt;
&lt;li&gt;Major programming languages are supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS CLIs&lt;ul&gt;
&lt;li&gt;This use command line interface to control the AWS infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="service-location"&gt;Service Location&lt;a class="headerlink" href="#service-location" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AWS hosts its service in two types of location&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Edge Location&lt;ul&gt;
&lt;li&gt;These does not host any specific AWS service.&lt;/li&gt;
&lt;li&gt;These hosts only CDN or CloudFront.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS region&lt;ul&gt;
&lt;li&gt;These are the real AWS data centers, which host all AWS services.&lt;/li&gt;
&lt;li&gt;Each region is further divided into an Availability Zone (AZs).&lt;/li&gt;
&lt;li&gt;AZs are created to provide fault tolerance and high availability.&lt;/li&gt;
&lt;li&gt;Most services are region specific, which means all the AZs will have that service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="aws-shared-responsibility-model"&gt;AWS - Shared Responsibility Model&lt;a class="headerlink" href="#aws-shared-responsibility-model" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS provides us with the bare metal infrastructure for running our application on their server. This does not imply that outside our application code, we can rely only on AWS.&lt;/p&gt;
&lt;p&gt;AWS and us as a user work in a shared responsibility model, wherein, we have a certain responsibility and AWS has certain, and AWS is willing to shoulder certain responsibility with increased cost.&lt;/p&gt;
&lt;p&gt;AWS's responsibility is broadly related to the physical server's like, physical security, personnel security, discarding the storage devices, DDoS protection, and hyper visor isolation.&lt;/p&gt;
&lt;p&gt;User's responsibility is mostly towards their application like, proper security groups, IAM, MFA, OS patches and VPCs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Shared Responsibility Model " src="https://www.archerimagine.com/images/aws/IAM/Shared_Responsibility_Model_V2.jpg" title="AWS Shared Responsibility Model"/&gt;&lt;/p&gt;
&lt;h3 id="compute-services"&gt;Compute Services&lt;a class="headerlink" href="#compute-services" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The major compute services provided by AWS are.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elastic Compute Cloud (EC2)&lt;/li&gt;
&lt;li&gt;Elastic Container service (ECS)&lt;/li&gt;
&lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;li&gt;Elastic BeanStalk&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the above 4, the user has the maximum control of configuration on EC2 as its bare metal server, with some services running. Lambda and Beanstalk provide the minimum configuration  user and most of them are managed by AWS.&lt;/p&gt;
&lt;h3 id="storage-service"&gt;Storage Service&lt;a class="headerlink" href="#storage-service" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just like computer the major storage service provided by AWS are
* RDS
    - SQL database.
* DynamoDB
    - No SQL database
* RedShift
    - Data Warehousing
* ElastiCache
    - In memory Cache.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AWS is a global infrastructure, it has to serve both its developer and consumer with great efficiency and low latency. This is the reason the AWS has its core services spread across the globe called the AWS region. It also has its edge location spread across the globe to serve the consumer.&lt;/p&gt;
&lt;p&gt;AWS region is subdivided into availability zones (AZs), which helps to provide high reliability and are connected to each other via a very low latency fiber optic. When an AWS service is mentioned to be region specific, it implies that it is available in all the AZs.&lt;/p&gt;
&lt;p&gt;There are two types of an Administrator user of AWS service. The first is the &lt;em&gt;root&lt;/em&gt; user which has infinite God like permission and is not controlled via the IAM. There is also a &lt;em&gt;admin&lt;/em&gt; user which we create from IAM. The &lt;em&gt;admin&lt;/em&gt; user have all the permission like the &lt;em&gt;root&lt;/em&gt; user, its is just that it was created by IAM.&lt;/p&gt;
&lt;p&gt;The user &lt;em&gt;admin&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; both should have MFA enabled and also have a password policy associated with it.&lt;/p&gt;
&lt;p&gt;The AWS services can be accessed using 3 methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS Console&lt;/li&gt;
&lt;li&gt;AWS SDKs&lt;/li&gt;
&lt;li&gt;AWS CLIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the above will use the AWS APIs to connect with the core services. AWS Console is what every start using first and once becoming comfortable they rely on only SDKs or the CLIs.&lt;/p&gt;
&lt;p&gt;AWS has a shared responsibility with the users, where AWS manages most of the physical security and the server management like DDoS protection and HyperVisor isolation, the user is entrusted with the responsibility of managing the software securities like IAM, MFA, OS Patches, Security groups etc.&lt;/p&gt;
&lt;h2 id="what-is-the-difference-between-the-aws-region-and-aws-edge-location"&gt;What is the difference between the AWS Region and AWS Edge Location?&lt;a class="headerlink" href="#what-is-the-difference-between-the-aws-region-and-aws-edge-location" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When explaining the AWS Global Infrastructure these 3 Keywords are often used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region&lt;/li&gt;
&lt;li&gt;Availability Zone (AZs)&lt;/li&gt;
&lt;li&gt;Edge Location&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the above are key pieces of the AWS Infrastructure, but to understand the fundamental difference we have seen these with a different perspective.&lt;/p&gt;
&lt;p&gt;The above are divided based on&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User of the content present &lt;strong&gt;on&lt;/strong&gt; AWS (End User)&lt;/li&gt;
&lt;li&gt;User of the content provider &lt;strong&gt;to&lt;/strong&gt; AWS (Developer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Region and AZs as already explained are Developer focused, as a result, they are very few and have to adhere to the highest standard of scrutiny.
Edge Location on the other hand, are User focused, Like CDN, Global Accelerator etc., their job is to make the content reach to and fro from the user faster, reduce the latency. As a result are far too many and spread across the world where it can serve its user better.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by &lt;a href="https://unsplash.com/@eberhardgross"&gt;Eberhard Grossgasteiger &lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/cloud-technology"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt; Global Infrastructure &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/compliance/shared-responsibility-model/"&gt;Shared Responsibility Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="info-graphics"&gt;Info-graphics&lt;a class="headerlink" href="#info-graphics" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="AWS Global Infrastructure " src="https://www.archerimagine.com/images/aws/IAM/AWS-Global-Infra-01.png" title="AWS Global Infrastructure"/&gt;&lt;/p&gt;</content><category term="aws"></category><category term="aws"></category><category term="cloud"></category></entry><entry><title>What is the cost of len() function in python?</title><link href="https://www.archerimagine.com/articles/python/cost-of-len-function-in-python.html" rel="alternate"></link><published>2020-05-15T23:04:20+05:30</published><updated>2018-06-24T17:15:17+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2020-05-15:/articles/python/cost-of-len-function-in-python.html</id><summary type="html">&lt;p&gt;The len() function is a very common site in lot of programming code, have we ever stopped and thought what is the cost of this length function. It is the same is strlen() in function which is linear time.&lt;/p&gt;</summary><content type="html"></content><category term="Python"></category><category term="len()"></category><category term="python"></category><category term="builtin"></category></entry><entry><title>100Days of Code Log File 4th Attempt</title><link href="https://www.archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_4_0.html" rel="alternate"></link><published>2020-05-06T00:42:30+05:30</published><updated>2020-05-06T00:42:30+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2020-05-06:/articles/100daysofcode-python/100Days-of-code-log-file_V_4_0.html</id><summary type="html">&lt;p&gt;Hello World!, You are about the witness the fourth coming of an epic 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="https://www.archerimagine.com/images/100DaysOfCode/100DaysCode_Quotefancy.jpg" title="life always offers you a second chance. is called tomorrow, by Dylan Thomas"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic second coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="https://www.archerimagine.com/articles/100daysofcode/100Days-of-code-log-file.html" title="First attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-thursday-07-may-2020"&gt;Day 02 | Thursday 07 May 2020&lt;a class="headerlink" href="#day-02-thursday-07-may-2020" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Completed the CSS Trasform lecture from &lt;a href="https://www.udemy.com/course/modern-html-css-from-the-beginning/"&gt;Udemy&lt;/a&gt;. It was pretty amazing to learn about various type of transforms&lt;/p&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;These are the transform's learned.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate&lt;/code&gt; : rotates the object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skew&lt;/code&gt; : skews the object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale&lt;/code&gt; : zoom by a factor.&lt;/li&gt;
&lt;li&gt;We can also combine transition with transforms to give a nice animating effect.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translate3d&lt;/code&gt; takes a mandatory z-index as a paramter. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="day-01-wednesday-06-may-2020"&gt;Day 01 | Wednesday 06 May 2020&lt;a class="headerlink" href="#day-01-wednesday-06-may-2020" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am learning HTMl/CSS from the &lt;a href="https://www.udemy.com/course/modern-html-css-from-the-beginning/"&gt;Udemy&lt;/a&gt;. I started this course, some days back, from now, will post regularly on behalf of #100DaysOfCode.&lt;/p&gt;
&lt;p&gt;Today I have completed the CSS Transition.&lt;/p&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The CSS transition property.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1257752014978576385"&gt;Link to Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="reference_1"&gt;Reference&lt;a class="headerlink" href="#reference_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/970132/Dylan-Thomas-Life-always-offers-you-a-second-chance-is-called-tomorrow"&gt;QuoteFancy | Image Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/modern-html-css-from-the-beginning/"&gt;Udemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode, python"></category><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry><entry><title>How to use Sublime Text 2 as a MarkDown Editor.</title><link href="https://www.archerimagine.com/articles/sublimetext/how-to-use-sublime-text-2-as-markdown-editor.html" rel="alternate"></link><published>2020-01-02T22:33:26+05:30</published><updated>2020-01-02T23:18:09+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2020-01-02:/articles/sublimetext/how-to-use-sublime-text-2-as-markdown-editor.html</id><summary type="html">&lt;p&gt;Sublime Text 2 is a great editor for text or code editing, as it is available on multiple platform. Using only 2 plugin-s we can covert Sublime Text into a great Markdown Editor.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="sublime-text"&gt;Sublime Text&lt;a class="headerlink" href="#sublime-text" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sublime Text is a great editor for code and text. There is nothing I can add to the above fact. Markdown is a great format to write the ReadMe's in GitHub, and a lot of other social media also allows MarkDown Format. &lt;/p&gt;
&lt;p&gt;Sublime Text 2 have basic code snippets triggered for MarkDown Editing. This itself is a huge plus for using Sublime Text for MarkDown Editing though the support is limited to these 6 Snippets, as a user we can always enhance these.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sublime Text MarkDown Snippets" src="https://www.archerimagine.com/images/HowTos/SublimeTextSnippet.png" title="Sublime Text MarkDown Snippets"/&gt;&lt;/p&gt;
&lt;p&gt;The basic assumption I am making that you have the &lt;a href="https://packagecontrol.io/installation#st2https://packagecontrol.io/installation#st2"&gt;Package Control Plug-in&lt;/a&gt; installed.&lt;/p&gt;
&lt;p&gt;Sublime Text 2 with the help of these 2 Plug-in makes Markdown Editing work like a charm.
* &lt;a href="https://github.com/SublimeText-Markdown/MarkdownEditing"&gt;MarkdownEditing&lt;/a&gt;
* &lt;a href="https://github.com/FichteFoll/InsertDate/"&gt;InsertDate&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="plug-ins"&gt;Plug-ins&lt;a class="headerlink" href="#plug-ins" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="markdown-editing"&gt;MarkDown Editing&lt;a class="headerlink" href="#markdown-editing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The basic support from Sublime Text 2 is enough to use it as a MarkDown Editor but the &lt;a href="https://github.com/SublimeText-Markdown/MarkdownEditing"&gt;MarkdownEditing&lt;/a&gt; provides great support in terms of.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paring of Asterisks, underscores, brackets&lt;/li&gt;
&lt;li&gt;Creation of Numbered list and Un-numbered list, with tab support of Indents.&lt;/li&gt;
&lt;li&gt;Great key bindings.&lt;/li&gt;
&lt;li&gt;Good theme with decent syntax highlighting, though I will propose read the blog in the Reference section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These basic settings in helps a lot in MarkDown editing. Save it in &lt;code&gt;Markdown (Standard).sublime-settings&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    # Sets the Color Theme.&lt;/span&gt;
&lt;span class="err"&gt;    "color_scheme": "Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme",&lt;/span&gt;
&lt;span class="err"&gt;    # Sometime md is not recognized as a MarkDown Extensions.&lt;/span&gt;
&lt;span class="err"&gt;    "extensions":&lt;/span&gt;
&lt;span class="err"&gt;    [&lt;/span&gt;
&lt;span class="err"&gt;        "md"&lt;/span&gt;
&lt;span class="err"&gt;    ],&lt;/span&gt;
&lt;span class="err"&gt;    # Enable Spell Check.&lt;/span&gt;
&lt;span class="err"&gt;    "spell_check": true,&lt;/span&gt;
&lt;span class="err"&gt;    # If you want the text to start in the left hand corner, default is Centered.&lt;/span&gt;
&lt;span class="err"&gt;    "draw_centered": false,&lt;/span&gt;
&lt;span class="err"&gt;    "wrap_width": 180&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kindly visit the documentation in the GitHub page for more configuration and settings.&lt;/p&gt;
&lt;h3 id="insert-date"&gt;Insert Date&lt;a class="headerlink" href="#insert-date" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When writing a blog post using MarkDown we need to enter Date in the present Blog. This plug-in &lt;a href="https://github.com/FichteFoll/InsertDate/"&gt;InsertDate&lt;/a&gt; is a great way to insert localized time into any documents based of few KeyStrokes. &lt;/p&gt;
&lt;p&gt;This plug-in is vastly configurable, so we can customize completely to our needs.&lt;/p&gt;
&lt;p&gt;Change this configuration in the file &lt;code&gt;insert_date.sublime-settings&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    # Mention your local Time zone&lt;/span&gt;
&lt;span class="err"&gt;    "tz_in": "Asia/Kolkata",    &lt;/span&gt;
&lt;span class="err"&gt;    # Sunday July 28,2019 Prints in this format&lt;/span&gt;
&lt;span class="err"&gt;    "format": "%A %B%e,%Y"&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.strfti.me/"&gt;strftime reference and sandbox &lt;/a&gt;, use this to format the date according to your need.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default Key combination to trigger this is &lt;code&gt;[Ctrl + f5] [Ctrl + f5]&lt;/code&gt;. This works on all platform except Mac, as it triggers the VoiceOver App. Kindly see &lt;a href="https://github.com/FichteFoll/InsertDate/issues/28"&gt;this&lt;/a&gt; issue for resolution.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Conclusion, I will only try to mention that both,
* &lt;a href="https://github.com/SublimeText-Markdown/MarkdownEditing"&gt;MarkdownEditing&lt;/a&gt;
* &lt;a href="https://github.com/FichteFoll/InsertDate/"&gt;InsertDate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;are great Plug-ins to write MarkDown files, Lets use these to make a better ReadMe in Github. &lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariusschulz.com/blog/how-to-set-up-sublime-text-for-a-vastly-better-markdown-writing-experience"&gt;How to Set Up Sublime Text for a Vastly Better Markdown Writing Experience &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SublimeText-Markdown/MarkdownEditing"&gt;MarkdownEditing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FichteFoll/InsertDate/"&gt;InsertDate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FichteFoll/InsertDate/issues/28"&gt;Default keybindings don't work on OS X Yosemite #28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="SublimeText"></category><category term="SublimeText"></category><category term="Markdown"></category><category term="Sublime text 2"></category></entry><entry><title>100Days of Code Log File 3rd Attempt</title><link href="https://www.archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_3_0.html" rel="alternate"></link><published>2019-06-05T22:29:49+05:30</published><updated>2019-08-08T23:31:22+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2019-06-05:/articles/100daysofcode-python/100Days-of-code-log-file_V_3_0.html</id><summary type="html">&lt;p&gt;This is 3rd attempt at completing the #100DaysOfCode. Hope to be consistent longer this time.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="https://www.archerimagine.com/images/100DaysOfCode/quote_fancy_01.jpg" title="If we fail, let us try again and again until we succeed, by  Joseph Chamberlain"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic third coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="https://www.archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html" title="Second attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Selected the resource in advance, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/python/"&gt;FrontEndMasters | Python Fundamentals | Nina Zakharenko &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete first 21 Days first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-45-thursday-august-82019"&gt;Day 45 | Thursday August 8,2019&lt;a class="headerlink" href="#day-45-thursday-august-82019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always group the custom exceptions into a common module called exception in application.&lt;/li&gt;
&lt;li&gt;The custom exception class name should always end with error or exception, signifying the purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Custom Exceptions Application " src="https://www.archerimagine.com/images/100DaysOfCode/exception_04.png" title="Custom Exceptions Application."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-44-wednesday-august-72019"&gt;Day 44 | Wednesday August 7,2019&lt;a class="headerlink" href="#day-44-wednesday-august-72019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Error Specificity&lt;ul&gt;
&lt;li&gt;The order of catching &lt;code&gt;Exception&lt;/code&gt; should be from specific to general.&lt;/li&gt;
&lt;li&gt;The code should never be catching generic &lt;code&gt;Exception&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="error specificity " src="https://www.archerimagine.com/images/100DaysOfCode/exception_02.png" title="error specificity"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom Exceptions&lt;ul&gt;
&lt;li&gt;We can raise our custom exception by inheriting from base class &lt;code&gt;Exception&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The base &lt;code&gt;Exception&lt;/code&gt; &lt;code&gt;__init__()&lt;/code&gt; takes a custom message.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;raise&lt;/code&gt; is the keyword to raise the custom exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Custom Exceptions " src="https://www.archerimagine.com/images/100DaysOfCode/exception_03.png" title="Custom Exceptions"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1159152249085427712?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-43-monday-august-52019"&gt;Day 43 | Monday August 5,2019&lt;a class="headerlink" href="#day-43-monday-august-52019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exception is a great way to make the application more robust.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try/except&lt;/code&gt; are the tools to catch exceptions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BaseException&lt;/code&gt; is the base class of all exception which should never be caught in our code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exception&lt;/code&gt; is the exception class which needs to be caught.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;except&lt;/code&gt; takes a tuple of exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Exception " src="https://www.archerimagine.com/images/100DaysOfCode/exception_01.png" title="Exception"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1158434116884320257?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-42-thursday-august-12019"&gt;Day 42 | Thursday August 1,2019&lt;a class="headerlink" href="#day-42-thursday-august-12019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Inheritance is the best way to share property and responsibility across the code.&lt;ul&gt;
&lt;li&gt;Car has 4 wheels, but Bike has only 2 wheels, but most other parts are similar.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It creates code re-usability.&lt;/li&gt;
&lt;li&gt;Divides the code from more generic to specific.&lt;/li&gt;
&lt;li&gt;Multiple inheritance is possible, but mostly restricted to Mixins.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="inheritance " src="https://www.archerimagine.com/images/100DaysOfCode/class_04.png" title="inheritance"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1156981216337248256?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-41-wednesday-july-312019"&gt;Day 41 | Wednesday July 31,2019&lt;a class="headerlink" href="#day-41-wednesday-july-312019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;On our raw object, is we use &lt;code&gt;str()&lt;/code&gt; it gives a completely non-relevant information.&lt;/li&gt;
&lt;li&gt;We can change this by overriding the &lt;code&gt;__str__()&lt;/code&gt; method in our class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repr()&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;Its informs a way of creation of the object.&lt;/li&gt;
&lt;li&gt;We can override &lt;code&gt;__repr__&lt;/code&gt; method in our class for this information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="__str__ and __repr__ " src="https://www.archerimagine.com/images/100DaysOfCode/class_03.png" title="__str__ and __repr__"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1156624050191364096?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-40-monday-july-292019"&gt;Day 40 | Monday July 29,2019&lt;a class="headerlink" href="#day-40-monday-july-292019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isinstance()&lt;/code&gt; : &lt;ul&gt;
&lt;li&gt;returns &lt;code&gt;True&lt;/code&gt; if an object is an instance of a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;issubclass()&lt;/code&gt; :&lt;ul&gt;
&lt;li&gt;returns &lt;code&gt;True&lt;/code&gt; is an object is a subclass of a class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; is a subclass and instance of &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt; is the parent class of all object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any()&lt;/code&gt; :&lt;ul&gt;
&lt;li&gt;returns &lt;code&gt;True&lt;/code&gt;, if any value in the collection is True.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all()&lt;/code&gt; :&lt;ul&gt;
&lt;li&gt;returns &lt;code&gt;True&lt;/code&gt;, if all the value in the collection is True.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; : &lt;ul&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; being a subclass of &lt;code&gt;int&lt;/code&gt;, we have some weird combination, which we can try.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True + True&lt;/code&gt; : 2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{0,1, True, False}&lt;/code&gt;: returns &lt;code&gt;{0, 1}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Class isinstance and isSubclass " src="https://www.archerimagine.com/images/100DaysOfCode/class_02.png" title="Class isinstance and isSubclass"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1155886130706780160?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-39-sunday-july-282019"&gt;Day 39 | Sunday July 28,2019&lt;a class="headerlink" href="#day-39-sunday-july-282019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Class methods are unique methods, which operates on class variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@classmethod&lt;/code&gt; : a special decorator to create a class method.&lt;/li&gt;
&lt;li&gt;Class methods take &lt;code&gt;cls&lt;/code&gt; as argument and not &lt;code&gt;self&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The instance object can access the class methods, since it is aware of their existence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Class Method " src="https://www.archerimagine.com/images/100DaysOfCode/class_method_01.png" title="Class Method"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1155513534962266113?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-38-saturday-july-272019"&gt;Day 38 | Saturday July 27,2019&lt;a class="headerlink" href="#day-38-saturday-july-272019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The journey into object oriented programming with python.&lt;/li&gt;
&lt;li&gt;Python has no protection of its class variables for modification unlike Java.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__(self)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It is special function which python calls under the hood when initializing a object.&lt;/li&gt;
&lt;li&gt;It takes &lt;code&gt;self&lt;/code&gt; by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="dunder init " src="https://www.archerimagine.com/images/100DaysOfCode/init_01.png" title="dunder init"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1155323021835374592?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-37-friday-july-262019"&gt;Day 37 | Friday July 26,2019&lt;a class="headerlink" href="#day-37-friday-july-262019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OOPs concept.&lt;/li&gt;
&lt;li&gt;Everything is an object in Python.&lt;/li&gt;
&lt;li&gt;Class is template, blue print of a object.&lt;/li&gt;
&lt;li&gt;Instance is a specific creation of a class.&lt;/li&gt;
&lt;li&gt;We can have both&lt;ul&gt;
&lt;li&gt;Class Variables&lt;ul&gt;
&lt;li&gt;Accessed by class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance Variable&lt;ul&gt;
&lt;li&gt;Accessed by instance of a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; is a special name given to a instance in python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Class " src="https://www.archerimagine.com/images/100DaysOfCode/class_01.png" title="Class"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1154961918638997506?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-36-thursday-july-252019"&gt;Day 36 | Thursday July 25,2019&lt;a class="headerlink" href="#day-36-thursday-july-252019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.items()&lt;/code&gt; on a &lt;code&gt;dict()&lt;/code&gt; returns a list of tuples.&lt;/li&gt;
&lt;li&gt;A list of tuples can also be converted back to a dictionary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip()&lt;/code&gt; function combines two lists into a list of tuples.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop can be used to iterate over a &lt;code&gt;zip&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;zip()&lt;/code&gt; on asymmetrical list will create a list of tuples with the least no of elements common in the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict(zip(list1, list2))&lt;/code&gt; : converts a list of tuple back to a dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Zip Function " src="https://www.archerimagine.com/images/100DaysOfCode/zip_01.png" title="zip function"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1154448076569903104?s=20"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-35-wednesday-july-242019"&gt;Day 35 | Wednesday July 24,2019&lt;a class="headerlink" href="#day-35-wednesday-july-242019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced the learning of list slice.&lt;/li&gt;
&lt;li&gt;Simple index gives an element of the list.&lt;/li&gt;
&lt;li&gt;The slice has the following format.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1:3]&lt;/code&gt; : the index will start from 1, ends at 3 - 1 = 2&lt;ul&gt;
&lt;li&gt;No of elements will be 3 - 1 = 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slice also supports negative index.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt; : give the last element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-len(list)&lt;/code&gt; : gives the first element&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slice also has 3rd index, which is &lt;code&gt;step&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[::2]&lt;/code&gt; : skips 2 elements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[::-1]&lt;/code&gt; : short cut to reverse a list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="List Slice " src="https://www.archerimagine.com/images/100DaysOfCode/list_slice_01.png" title="List Slice"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1154083653133074437"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-34-tuesday-july-232019"&gt;Day 34 | Tuesday July 23,2019&lt;a class="headerlink" href="#day-34-tuesday-july-232019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today is the day, when I am more confused than aware.&lt;/li&gt;
&lt;li&gt;There is no tuple comprehension in python, but there are Generator expressions.&lt;/li&gt;
&lt;li&gt;Generator expressions are created with this syntax.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(num * num for num in range(11))&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Ideally we expect it to be a tuple comprehension, but it is a generator object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generator expressions are a memory efficient way of creating a big list.&lt;/li&gt;
&lt;li&gt;We cannot index on the generator object, gives a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;for/each&lt;/code&gt; can be used to iterate over a generator.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Generator comprehensions " src="https://www.archerimagine.com/images/100DaysOfCode/generator_comp_01.png" title="Generator comprehensions"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;References.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/51811061/can-i-turn-a-generator-object-into-a-tuple-without-using-tuple/51811147#51811147"&gt;Generator Unpacking &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/16940293/why-is-there-no-tuple-comprehension-in-python"&gt;Why is there no tuple comprehension in Python?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1153716904554463232"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-33-monday-july-222019"&gt;Day 33 | Monday July 22,2019&lt;a class="headerlink" href="#day-33-monday-july-222019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;dict&lt;/code&gt; comprehensions are very similar in syntax.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; comprehensions.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{num * num for num in range(11)}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt; comprehensions.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{num: num * num for num in range(11)}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;dict&lt;/code&gt; comprehensions are not ordered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Set comprehensions " src="https://www.archerimagine.com/images/100DaysOfCode/set_comp_01.png" title="Set comprehensions"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1153360497732751360"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-32-friday-july-192019"&gt;Day 32 | Friday July 19,2019&lt;a class="headerlink" href="#day-32-friday-july-192019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Built-in function which works on the &lt;code&gt;list&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum()&lt;/code&gt; : returns the sum of a list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min()&lt;/code&gt; : returns the smallest element in the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max()&lt;/code&gt; : returns the biggest element in the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted()&lt;/code&gt; : returns a sorted list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reverse=True&lt;/code&gt; as a default argument will reverse the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="List comprehensions " src="https://www.archerimagine.com/images/100DaysOfCode/list_comp_03.png" title="List comprehensions"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1152274282329735168"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-31-thursday-july-182019"&gt;Day 31 | Thursday July 18,2019&lt;a class="headerlink" href="#day-31-thursday-july-182019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Continued with List comprehensions.&lt;/li&gt;
&lt;li&gt;We can use conditionals in list comprehension to filter values.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[num**2 for num in numbers if num %2 == 0]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The conditional comes at the end.&lt;/li&gt;
&lt;li&gt;This conditional works as a filter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We have 3 ways to use List comprehensions.&lt;ul&gt;
&lt;li&gt;Map - All values are used&lt;/li&gt;
&lt;li&gt;Filter - Some values are used&lt;/li&gt;
&lt;li&gt;Map/Filter - Some values filtered and then modified.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="List comprehensions " src="https://www.archerimagine.com/images/100DaysOfCode/list_comp_02.png" title="List comprehensions"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1151907365383360512"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-30-tuesday-july162019"&gt;Day 30 | Tuesday July16,2019&lt;a class="headerlink" href="#day-30-tuesday-july162019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_15"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There are various type conversion which we can use.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt; : convert string to a list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt; : convert a list to string. &lt;code&gt;",".join(my_list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tuple unpacking can also be used when using &lt;code&gt;.split()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learned about list comprehensions.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[num**2 for num in numbers]&lt;/code&gt; : list of square of numbers.&lt;ul&gt;
&lt;li&gt;We right the square brackets first&lt;/li&gt;
&lt;li&gt;Followed by the &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;li&gt;The variable used in the &lt;code&gt;for&lt;/code&gt; loop is available to the left of loop, &lt;code&gt;num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apply mapping on the variable left of &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can combine with &lt;code&gt;tuple&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; strings to get more valuable information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="List comprehensions " src="https://www.archerimagine.com/images/100DaysOfCode/list_comp_01.png" title="List comprehensions"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/intermediate_python"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1151181246510161920"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-29-saturday-july-132019"&gt;Day 29 | Saturday July 13,2019&lt;a class="headerlink" href="#day-29-saturday-july-132019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_16"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_16" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Worked on the Github Api Project using these concepts.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exceptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APIs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Query Parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_16"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_16" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1150102077391036422"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-28-friday-july-122019"&gt;Day 28 | Friday July 12,2019&lt;a class="headerlink" href="#day-28-friday-july-122019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_17"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_17" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;learned mostly about &lt;code&gt;requests&lt;/code&gt; library.&lt;/li&gt;
&lt;li&gt;4 HTTP methods&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP code&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1XX&lt;/code&gt; : Information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2XX&lt;/code&gt; : Success&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3XX&lt;/code&gt; : Redirection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4XX&lt;/code&gt; : Client error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5XX&lt;/code&gt; : Server error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Shibe URL for dogs " src="https://www.archerimagine.com/images/100DaysOfCode/dog_01.png" title="Shibe URL for dogs"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_17"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_17" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1149743435944824832"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-27-thursday-july-112019"&gt;Day 27 | Thursday July 11,2019&lt;a class="headerlink" href="#day-27-thursday-july-112019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_18"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_18" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__name__&lt;/code&gt; is a nice way to put code when we want to execute as a script.&lt;ul&gt;
&lt;li&gt;The above code is not invoked when called as a library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try/except&lt;/code&gt; is a great way to catch error's in code, and give alternate execution path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_18"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_18" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1149376500728078336"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-26-wednesday-july-102019"&gt;Day 26 | Wednesday July 10,2019&lt;a class="headerlink" href="#day-26-wednesday-july-102019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_19"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_19" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mostly learned about python file's and debugging techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_19"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_19" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1149011262996660225"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-25-tuesday-july-92019"&gt;Day 25 | Tuesday July 9,2019&lt;a class="headerlink" href="#day-25-tuesday-july-92019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_20"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_20" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; loop is used to iterate over numbers in place of sequence.&lt;ul&gt;
&lt;li&gt;Also when we are not sure about the no of iteration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;: &lt;ul&gt;
&lt;li&gt;It stops the execution of loop, and jumps to end of loop.&lt;/li&gt;
&lt;li&gt;If present in nested loop, it breaks the loop it is present in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;It stops the loop execution and jump to start of the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;: &lt;ul&gt;
&lt;li&gt;It also return the loop control to outside of the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="break, continue and return statement. " src="https://www.archerimagine.com/images/100DaysOfCode/break_01.png" title="break, continue and return statement"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_20"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_20" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1148637195948843008"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-24-friday-july-52019"&gt;Day 24 | Friday July 5,2019&lt;a class="headerlink" href="#day-24-friday-july-52019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_21"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_21" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today's learning was mostly on the Control flow.&lt;/li&gt;
&lt;li&gt;We have different variant of &lt;code&gt;if&lt;/code&gt; condition.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if-else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if-elif-else&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can also check truthiness.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="if statement. " src="https://www.archerimagine.com/images/100DaysOfCode/if_01.png" title="if statement"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_21"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_21" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1147190975795646464"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-23-thursday-july-42019"&gt;Day 23 | Thursday July 4,2019&lt;a class="headerlink" href="#day-23-thursday-july-42019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_22"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_22" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Continuing the process of learning loop, understood about looping with &lt;code&gt;dict&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are mainly 3 looping with &lt;code&gt;dict&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.key()&lt;/code&gt; - this is default, so do not have to specify in &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.items()&lt;/code&gt; - returns a tuple of key, value pair.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt; - returns only the values in &lt;code&gt;dict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.enumerate(.items())&lt;/code&gt; - gives, index and a tuple of key value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="dict loop. " src="https://www.archerimagine.com/images/100DaysOfCode/dict_loop.png" title="dict loop"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_22"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_22" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1146829703782625281"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-22-wednesday-july-32019"&gt;Day 22 | Wednesday July 3,2019&lt;a class="headerlink" href="#day-22-wednesday-july-32019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_23"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_23" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mostly improved the understanding of loops with list and range function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; loops create a temporary variable which is in scope outside of &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range()&lt;/code&gt;  is a good function for looping, it has 3 variant.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(5)&lt;/code&gt; : default, creates the number from 0 to 4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(1,5)&lt;/code&gt; : start and end index, creates the number from 1 to 4, 5 non inclusive.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(1,5,2)&lt;/code&gt; : the 3rd argument is &lt;code&gt;steps&lt;/code&gt;, will step those many numbers.&lt;/li&gt;
&lt;li&gt;It does not take any Keyword arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="list loop. " src="https://www.archerimagine.com/images/100DaysOfCode/list_loop.png" title="list loop"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_23"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_23" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1146472085671124992"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-21-monday-july-12019"&gt;Day 21 | Monday July 1,2019&lt;a class="headerlink" href="#day-21-monday-july-12019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_24"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_24" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I have reached that day, where it is said, 21 days is required minimum to form a habit.&lt;ul&gt;
&lt;li&gt;Hope this habit stays with me.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning continued on &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;It was an eye opener.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; returns the value of one of the expression and not &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It returns the value of 2nd operand if the first operand is &lt;code&gt;True&lt;/code&gt; else value of first.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="and Operator. " src="https://www.archerimagine.com/images/100DaysOfCode/and.png" title="and Operator"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It returns the value of 1st operand if it evaluates to &lt;code&gt;True&lt;/code&gt;, else value of second.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="or Operator. " src="https://www.archerimagine.com/images/100DaysOfCode/or.png" title="or Operator"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Returns the inverse of the operator.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="not Operator. " src="https://www.archerimagine.com/images/100DaysOfCode/not.png" title="not Operator"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_24"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_24" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1145744575375409152"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-20-sunday-june-302019"&gt;Day 20 | Sunday June 30,2019&lt;a class="headerlink" href="#day-20-sunday-june-302019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_25"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_25" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comparison operators in Python.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : Less than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : greater than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; : less than equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; : greater than equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; : equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt; : Not equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt; : Identity, when both object points to same.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings are compared based on their ASCII value.&lt;ul&gt;
&lt;li&gt;The capital letters are smaller than small letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Comparison Operator. " src="https://www.archerimagine.com/images/100DaysOfCode/Booleans_02.png" title="Comparison Operator"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_25"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_25" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-19-friday-june-282019"&gt;Day 19 | Friday June 28,2019&lt;a class="headerlink" href="#day-19-friday-june-282019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_26"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_26" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What are the truthiness of various data types.&lt;ul&gt;
&lt;li&gt;integers:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;any other number is &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collections:&lt;ul&gt;
&lt;li&gt;Empty list, tuple, Dictionary, sets are &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Non Empty collections are &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings:&lt;ul&gt;
&lt;li&gt;Empty String is &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Non Empty String are &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Booleans truthiness. " src="https://www.archerimagine.com/images/100DaysOfCode/Booleans_01.png" title="Booleans truthiness"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_26"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_26" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1144659185348431872"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-18-wednesday-june-262019"&gt;Day 18 | Wednesday June 26,2019&lt;a class="headerlink" href="#day-18-wednesday-june-262019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_27"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_27" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about the list slice.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;my_list[0:3&lt;/code&gt; : Returns 0 - 2nd index&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_list[:]&lt;/code&gt; : clone the entire list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_list[-1]&lt;/code&gt; : Special way to get the last item.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="List Slice. " src="https://www.archerimagine.com/images/100DaysOfCode/list_04.png" title="List Slice"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_27"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_27" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1143935174394015744"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-17-tuesday-june-252019"&gt;Day 17 | Tuesday June 25,2019&lt;a class="headerlink" href="#day-17-tuesday-june-252019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_28"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_28" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finally crossed the last attempts days.&lt;/li&gt;
&lt;li&gt;Learned about mutability.&lt;/li&gt;
&lt;li&gt;Basic data type are immutable.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Containers data type are divided&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt; are mutable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple&lt;/code&gt; is immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_28"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_28" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1143575190632194049"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-monday-june-242019"&gt;Day 16 | Monday June 24,2019&lt;a class="headerlink" href="#day-16-monday-june-242019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_29"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_29" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Adding/Accessing dictionary elements.&lt;ul&gt;
&lt;li&gt;add new key/Value pair.   &lt;code&gt;nums["four"] = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are no duplicate key in Dictionaries.&lt;/li&gt;
&lt;li&gt;If new value is assigned to same key, it will override the old value.&lt;/li&gt;
&lt;li&gt;Existence of a key in Dictionaries. &lt;code&gt;"one" in nums&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.update()&lt;/code&gt;: Combine two list.&lt;/li&gt;
&lt;li&gt;3 important functions on Dictionaries&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.keys()&lt;/code&gt;: returns special list called dict keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;: returns a special list called dict values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.item()&lt;/code&gt;: returns a list of tuple, called dict items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dictionaries Operation " src="https://www.archerimagine.com/images/100DaysOfCode/dict_02.png" title="Dictionaries Operation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_29"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_29" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1143211092597825536"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-sunday-june-232019"&gt;Day 15 | Sunday June 23,2019&lt;a class="headerlink" href="#day-15-sunday-june-232019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_30"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_30" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started learning about dictionaries.&lt;/li&gt;
&lt;li&gt;Dictionaries store &lt;code&gt;key:value&lt;/code&gt; pair.&lt;/li&gt;
&lt;li&gt;Dictionaries are mutable but the &lt;code&gt;keys&lt;/code&gt; are immutable.&lt;/li&gt;
&lt;li&gt;The search is very fast, just like &lt;code&gt;sets&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Retrieve the value with index as the &lt;code&gt;key&lt;/code&gt; &lt;code&gt;a["one"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt; method can be used when we do not want an error while retrieving a value.&lt;ul&gt;
&lt;li&gt;Its returns a default value if the key is not present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Dictionaries Basics " src="https://www.archerimagine.com/images/100DaysOfCode/dict_01.png" title="Dictionaries Basics"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_30"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_30" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1142836839323095040"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-saturday-june-222019"&gt;Day 14 | Saturday June 22,2019&lt;a class="headerlink" href="#day-14-saturday-june-222019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_31"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_31" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Important set operation.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union()&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; : Returns the union of two sets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection()&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;: Returns the intersection of two sets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference()&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;: present in 1 set but not in other.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set Operation " src="https://www.archerimagine.com/images/100DaysOfCode/set_03.png" title="Set Operation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_31"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_31" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1142493860150439936"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-thursday-june-202019"&gt;Day 13 | Thursday June 20,2019&lt;a class="headerlink" href="#day-13-thursday-june-202019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_32"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_32" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Updated my RAM with set operation for CRUD.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add()&lt;/code&gt; - Adds item to the set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;discard()&lt;/code&gt; - Removes item from the set, if not present, gives no error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove()&lt;/code&gt; - Removes item from the set, if not present. gives &lt;code&gt;KeyError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update()&lt;/code&gt; - Adds item from a sequence into a set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set crud " src="https://www.archerimagine.com/images/100DaysOfCode/set_02.png" title="Set CRUD"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_32"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_32" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141757313604173824"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-june-192019"&gt;Day 12 | Wednesday June 19,2019&lt;a class="headerlink" href="#day-12-wednesday-june-192019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_33"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_33" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the basic premise around sets.&lt;ul&gt;
&lt;li&gt;Empty sets can only be created using &lt;code&gt;set()&lt;/code&gt; function, empty &lt;code&gt;{}&lt;/code&gt; creates a dict.&lt;/li&gt;
&lt;li&gt;Sets stores only immutable data type which can give a &lt;code&gt;hash()&lt;/code&gt; value.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = {"a", (1, 2, 3), [1, 2, 3]}&lt;/code&gt; &lt;code&gt;# TypeError: unhashable type: 'list'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sets are used to remove duplicates from List.&lt;/li&gt;
&lt;li&gt;Sets searching is very fast.&lt;/li&gt;
&lt;li&gt;Sets do not have a indexing order.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="set creation " src="https://www.archerimagine.com/images/100DaysOfCode/set_01.png" title="Set creation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_33"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_33" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141395988881367040"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-june-182019"&gt;Day 11 | Tuesday June 18,2019&lt;a class="headerlink" href="#day-11-tuesday-june-182019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_34"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_34" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explored the different ways to create a &lt;code&gt;tuple&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Create a empty tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = tuple()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;b = ()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a single item tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = (1,)&lt;/code&gt; and not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = (1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brackets are not mandatory for tuple.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b = 1, 2, 3, 4, 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;indexing in tuple, same as list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tuple creation " src="https://www.archerimagine.com/images/100DaysOfCode/tuple_01.png" title="tuple creation"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_34"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_34" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1141031483282317312"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-june-172019"&gt;Day 10 | Monday June 17,2019&lt;a class="headerlink" href="#day-10-monday-june-172019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_35"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_35" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Established some basic understanding on list operations&lt;/li&gt;
&lt;li&gt;Operations to add item to the list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append()&lt;/code&gt;: add an item to end of the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert(2, "bbbb")&lt;/code&gt;: insert at an index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend()&lt;/code&gt;: concatenates two list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operation on list look-up, which is very slow, almost linear.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index(value)&lt;/code&gt;: returns first index of value&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ValueError:&lt;/code&gt; if the value is not present in list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count(value)&lt;/code&gt;: returns the no of times a value is present.&lt;ul&gt;
&lt;li&gt;return's &lt;code&gt;0&lt;/code&gt; is the value is not present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operation to remove item from list.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;remove(value)&lt;/code&gt;: removes the value from the list, if not present does not throw error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt;: remove and returns the last element of the list or the index.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List are heterogeneous.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Heterogeneous list. " src="https://www.archerimagine.com/images/100DaysOfCode/list_03.png" title="Heterogeneous list."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_35"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_35" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1140663343528599554"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-sunday-june-162019"&gt;Day 09 | Sunday June 16,2019&lt;a class="headerlink" href="#day-09-sunday-june-162019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_36"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_36" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the list's sort and the built-in sorted function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted()&lt;/code&gt; returns a list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.sort()&lt;/code&gt; or &lt;code&gt;list.reverse()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="sorted() and built-in sort " src="https://www.archerimagine.com/images/100DaysOfCode/list_02.png" title="sorted() and built-in sort"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_36"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_36" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1140304997944401920"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-saturday-june-152019"&gt;Day 08 | Saturday June 15,2019&lt;a class="headerlink" href="#day-08-saturday-june-152019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_37"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_37" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started after a gap of 1 cheat day.&lt;/li&gt;
&lt;li&gt;List was the focus today.&lt;ul&gt;
&lt;li&gt;list can be created using &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list is a ordered collection.&lt;/li&gt;
&lt;li&gt;list is a heterogeneous collection.&lt;/li&gt;
&lt;li&gt;list elements can be accessed using index start at &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List has 1 efficient way of declaring.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"XXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"YYY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"ZZZ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# unlike json, we can have comma at the last element, &lt;/span&gt;
            &lt;span class="c1"&gt;# it helps with git diff&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Multi Line list declaration." src="https://www.archerimagine.com/images/100DaysOfCode/list_01.png" title="Multi Line list declaration."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_37"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_37" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1139956001749123072"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-thursday-june-132019"&gt;Day 07 | Thursday June 13,2019&lt;a class="headerlink" href="#day-07-thursday-june-132019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_38"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_38" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function scope is little confusing without practice.&lt;ul&gt;
&lt;li&gt;There is a global scope and a local scope to a function.&lt;/li&gt;
&lt;li&gt;If same variable name is same, local scope gets preference.&lt;ul&gt;
&lt;li&gt;Global variable cannot be modified even thought it share the same name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This code will work.
&lt;img alt="Function Scope Working case." src="https://www.archerimagine.com/images/100DaysOfCode/functions_scope_01.png" title="Function Scope Working case."/&gt;&lt;/li&gt;
&lt;li&gt;But this code will not work, gives &lt;code&gt;UnboundLocalError:&lt;/code&gt;.
&lt;img alt="Function Scope Not Working case." src="https://www.archerimagine.com/images/100DaysOfCode/functions_scope_error.png" title="Function Scope Not Working case."/&gt;&lt;/li&gt;
&lt;li&gt;The explanation is mentioned in the Python &lt;a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"&gt;Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_38"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_38" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1139222966279892992"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-wednesday-june-122019"&gt;Day 06 | Wednesday June 12,2019&lt;a class="headerlink" href="#day-06-wednesday-june-122019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="List as a function argument." src="https://www.archerimagine.com/images/100DaysOfCode/functions_03_01.png" title="List as a function argument."/&gt;
&lt;img alt="List as a function argument." src="https://www.archerimagine.com/images/100DaysOfCode/functions_03_02.png" title="List as a function argument."/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_39"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_39" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List or any other mutable data type should not be used as the default arguments.&lt;ul&gt;
&lt;li&gt;The list is initialized when the function is called the 1st time, and then it modifies the same list. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_39"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_39" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138870851497934848"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-5-tuesday-june-112019"&gt;Day 5 | Tuesday June 11,2019&lt;a class="headerlink" href="#day-5-tuesday-june-112019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Functions Arguments" src="https://www.archerimagine.com/images/100DaysOfCode/functions_02.png" title="Function Arguments"/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_40"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_40" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started with the &lt;em&gt;Function's Arguments&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Positional arguments must be passed to functions.&lt;/li&gt;
&lt;li&gt;Default arguments are always provide at the end of function's argument list.&lt;/li&gt;
&lt;li&gt;We can give &lt;em&gt;none&lt;/em&gt;, &lt;em&gt;one&lt;/em&gt;, &lt;em&gt;all&lt;/em&gt; arguments to a function with only default arguments list.&lt;/li&gt;
&lt;li&gt;Labeled arguments can be passed in any order to a function. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_40"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_40" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138501823415951360"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-monday-june-102019"&gt;Day 04 | Monday June 10,2019&lt;a class="headerlink" href="#day-04-monday-june-102019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Functions" src="https://www.archerimagine.com/images/100DaysOfCode/functions_01.png" title="Different return type of functions."/&gt;&lt;/p&gt;
&lt;h3 id="days-progress_41"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_41" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the &lt;code&gt;functions&lt;/code&gt; section of the lecture.&lt;/li&gt;
&lt;li&gt;This lesson, teaches about different function type.&lt;ul&gt;
&lt;li&gt;Function with no arguments and no return type&lt;/li&gt;
&lt;li&gt;Function with no arguments and a return type&lt;/li&gt;
&lt;li&gt;Function with 2 arguments and a return type&lt;/li&gt;
&lt;li&gt;Function with multi-line function body.&lt;/li&gt;
&lt;li&gt;return is always optional in function, it returns &lt;code&gt;&amp;lt;class 'NoneType'&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_41"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_41" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The function returning &lt;code&gt;&amp;lt;class 'NoneType'&amp;gt;&lt;/code&gt; was a eye opener.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1138147827287187457"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-sunday-june-92019"&gt;Day 03 | Sunday June 9,2019&lt;a class="headerlink" href="#day-03-sunday-june-92019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_42"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_42" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the Data Type chapter in the FrontEnd Master's Python fundamentals.&lt;/li&gt;
&lt;li&gt;This chapter introduces some nice concept about data types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;45j&lt;/code&gt;  is a complex data type &lt;code&gt;&amp;lt;class 'complex'&amp;gt;&lt;/code&gt; but not &lt;code&gt;45i&lt;/code&gt;, so &lt;code&gt;j&lt;/code&gt; is the identifier for complex number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new_name f"Hello, {name}"&lt;/code&gt; is a format string, &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;{}&lt;/code&gt; is the variable name which will be replaced.&lt;/li&gt;
&lt;li&gt;Same variable can be used to store number, or strings.&lt;/li&gt;
&lt;li&gt;String can be created by both &lt;code&gt;'string 1 '&lt;/code&gt; or &lt;code&gt;" String 2 "&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integer division gives the result in floating point &lt;code&gt;3/2 = 1.5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_42"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_42" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python Data types have lot of power inside them with very less ambiguity.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137766857312616453"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-saturday-june-82019"&gt;Day 02 | Saturday June 8,2019&lt;a class="headerlink" href="#day-02-saturday-june-82019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_43"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_43" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood the VSCode basic settings, got help from a great tutorial by &lt;a href="https://www.youtube.com/watch?v=06I63_p-2A4"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The tutorials talks about these topics&lt;ul&gt;
&lt;li&gt;Change the way settings is displayed as JSON, in place of UI.&lt;/li&gt;
&lt;li&gt;Select virtual environment.&lt;/li&gt;
&lt;li&gt;Change color theme.&lt;/li&gt;
&lt;li&gt;Change file icons.&lt;/li&gt;
&lt;li&gt;Set the global python path - &lt;code&gt;"python.pythonPath": "&amp;lt;Path&amp;gt;"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set a global python file formatter, we are using Black for this. &lt;code&gt;"python.formatting.provider": "black",&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Also change the option to run the formatter on saving the file. &lt;code&gt;"editor.formatOnSave": true,&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable Linting.&lt;/li&gt;
&lt;li&gt;Git Integration.&lt;/li&gt;
&lt;li&gt;Unit Testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_43"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_43" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VScode has lot of power, lets see how much I learn from it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137427179573092353"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-friday-june-72019"&gt;Day 01 |  Friday June 7,2019&lt;a class="headerlink" href="#day-01-friday-june-72019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_44"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_44" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Python Fundamentals course by Nina Zakharenko.&lt;/li&gt;
&lt;li&gt;Today's main focus was setting my these things.&lt;ul&gt;
&lt;li&gt;Virtual environment.&lt;/li&gt;
&lt;li&gt;VScode setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Faced few issues, which &lt;a href="https://stackoverflow.com/questions/41687841/there-is-no-activate-when-i-am-trying-to-run-my-virtual-env"&gt;stackoverflow &lt;/a&gt; helped in solving&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="issues-and-solutions"&gt;Issues and Solutions&lt;a class="headerlink" href="#issues-and-solutions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was no activate script when the virtual environment was created by using the command &lt;code&gt;python -m venv .env&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;On doing Google for the problem found that running the same command again solves the issue, so ran &lt;code&gt;python -m venv env&lt;/code&gt; again and viola the activate script appeared.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VScode was not recognizing the virtual environment created inside a sub folder in the project.&lt;ul&gt;
&lt;li&gt;Deleted the pre-existing environment and created a new virtual environment at the project root.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_44"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_44" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Programming is just efficient Google technique.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/archeranimesh/pythonFundamentals"&gt;My Github Url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1137047401137549312"&gt;Link to tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/1733403/Joseph-Chamberlain-If-we-fail-let-us-try-again-and-again-until-we-succeed"&gt;QuoteFancy | Image Source &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nealschaffer.com/tweet-link-preview-image-twitter/"&gt;Create a Tweet With image Preview for Free &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/python/"&gt;FrontEndMasters | Python Fundamentals | Nina Zakharenko &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=06I63_p-2A4"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode, python"></category><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry><entry><title>100 Days of Discrete Maths.</title><link href="https://www.archerimagine.com/articles/100daysofdiscretemath/100Days-of-DiscreteMath-log-file.html" rel="alternate"></link><published>2019-02-17T22:46:40+05:30</published><updated>2019-03-21T22:52:00+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2019-02-17:/articles/100daysofdiscretemath/100Days-of-DiscreteMath-log-file.html</id><summary type="html">&lt;p&gt;Discrete Maths is a study of things which are discrete, which means things which can be counted. Discrete Maths forms the basis of a lot of concepts in algorithms and Computer science in general. I am starting this #100DaysOfX which Discrete Maths, to have a sufficient understanding of the concepts. I am using resources from NPTEL, MIT OCW, and ArsDigita University.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="https://www.archerimagine.com/images/discreteMaths/100DaysDiscreteMaths.jpg" title="To the wise, life is a problem, to the fool, a solution."/&gt;&lt;/p&gt;
&lt;p&gt;Discrete Maths is a study of things which are discrete, which means things which can be counted. Discrete Maths forms the basis of a lot of concepts in algorithms and Computer science in general. I am starting this #100DaysOfX which Discrete Maths, to have a sufficient understanding of the concepts. I am using resources from NPTEL, MIT OCW, and ArsDigita University.&lt;/p&gt;
&lt;p&gt;The plan is to follow the 3 lectures mentioned in the references and the Rosen book on Discrete math. &lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just a revision of implication, exclusive OR.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780407548530690"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the logical inference lecture from NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=kZ6UqFm8lnw&amp;amp;list=PL0862D1A947252D20&amp;amp;index=5"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logical inference for propositional calculus&lt;ul&gt;
&lt;li&gt;Fallacy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logical inference for Quantifiers&lt;/li&gt;
&lt;li&gt;Normal Forms&lt;ul&gt;
&lt;li&gt;CNF&lt;/li&gt;
&lt;li&gt;DNF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432148091076610"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Revision of Preposition calculus from Rosen Book. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Books are easier to understand once, the concept is understood.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063385629966336"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Revision of lecture 4 from NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned that Implication and Equivalence are not the same.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understood about logical relationship involving quantifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107683968730779649"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Revision of lecture 4 from NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Now learned properly about Predicates and Quantifiers.&lt;/li&gt;
&lt;li&gt;Scope of Quantifiers.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Valid&lt;/code&gt;, &lt;code&gt;Satisfiable&lt;/code&gt; and &lt;code&gt;unsatisfiable&lt;/code&gt; predicates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107298216075243521"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Again listened to the 4th lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about Logical Inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107298216075243521"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Listened to the 4th lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learned a little about logical inference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Still confusion over Predicate and Quantifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105168631971889154"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-thursday-28-february-2019"&gt;Day 09 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-09-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reading and listening to explanation on how to negate a quantifiers.&lt;/li&gt;
&lt;li&gt;Learning about scope of a quantifiers. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Still have doubts on these topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101174243029590023"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-wednesday-27-february-2019"&gt;Day 08 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-08-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In between the 4th Lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=jNeISigUCo0&amp;amp;list=PL0862D1A947252D20&amp;amp;index=4"&gt;Maths&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Great lecture on predicate logic&lt;/li&gt;
&lt;li&gt;Learned about:-&lt;ul&gt;
&lt;li&gt;Valid Expression&lt;/li&gt;
&lt;li&gt;Satisfiable Expression&lt;/li&gt;
&lt;li&gt;Unsatisfiable Expression&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These addition video's also helped.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GJpezCUMOxA"&gt;Universal and Existential Quantifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gyoqX0W-NH4"&gt;[Discrete Math 1] Predicate Logic and Negating Quantifiers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100803453591400448"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-tuesday-26-february-2019"&gt;Day 07 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-07-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Listened to the 2nd lecture of MIT 6.042J YouTube &lt;a href="https://www.youtube.com/watch?v=z8HKWUWS-lA&amp;amp;index=2&amp;amp;list=PLB7540DEDD482705B"&gt;play-list&lt;/a&gt; &lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This lecture discusses about &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proof by Contradiction&lt;/li&gt;
&lt;li&gt;Introduces to the concept of Induction proof.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100451208240734215"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-monday-25-february-2019"&gt;Day 06 | Monday 25 February 2019&lt;a class="headerlink" href="#day-06-monday-25-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Completed the 3rd Lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=DmCltf8ypks&amp;amp;list=PL0862D1A947252D20"&gt;Maths&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Predicate and Quantifiers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predicate&lt;ul&gt;
&lt;li&gt;Predicate Logic&lt;/li&gt;
&lt;li&gt;n-ary predicate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Quantifiers&lt;ul&gt;
&lt;li&gt;Universal&lt;/li&gt;
&lt;li&gt;Existential&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binding Variables&lt;/li&gt;
&lt;li&gt;Logical equivalence involving quantifiers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100451208240734215"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-friday-22-february-2019"&gt;Day 05 | Friday 22 February 2019&lt;a class="headerlink" href="#day-05-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Today was a rest day for Discrete Maths.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-thursday-21-february-2019"&gt;Day 04 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-04-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Listened to the 2nd lecture of MIT 6.042J YouTube &lt;a href="https://www.youtube.com/watch?v=z8HKWUWS-lA&amp;amp;index=2&amp;amp;list=PLB7540DEDD482705B"&gt;play-list&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;This lecture discusses about &lt;ul&gt;
&lt;li&gt;Proof by Contradiction&lt;/li&gt;
&lt;li&gt;Introduces to the concept of Induction proof.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Today was focused on listening to the lecture, so have not taken detailed notes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098632243373924353"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-wednesday-20-february-2019"&gt;Day 03 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-03-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Completed the 2nd Lecture of NPTEL's Discrete &lt;a href="https://www.youtube.com/watch?v=0uTE24o3q-o&amp;amp;list=PL0862D1A947252D20"&gt;Maths&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proving implication without drawing all possible rows of truth table.&lt;/li&gt;
&lt;li&gt;Proved that implication is not associative.&lt;/li&gt;
&lt;li&gt;Learned about logical identities.&lt;/li&gt;
&lt;li&gt;Simplified complex compound propositions.&lt;/li&gt;
&lt;li&gt;Conversion between English to logic and vice versa.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rules of inference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modus Ponens&lt;/li&gt;
&lt;li&gt;Modus Tollens&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098270228784574466"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-tuesday-19-february-2019"&gt;Day 02 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-02-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the First lecture of MIT 6.042J YouTube play &lt;a href="https://www.youtube.com/watch?v=L3LMbpZIKhQ&amp;amp;list=PLB7540DEDD482705B&amp;amp;index=2&amp;amp;t=0s"&gt;list &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I have not taken any notes, but the lecture was mostly focused on methods of proof, propositions and connectives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097924977976844289"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-monday-18-february-2019"&gt;Day 01 | Monday 18 February 2019&lt;a class="headerlink" href="#day-01-monday-18-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the First lecture of NPTEL's YouTube play &lt;a href="https://www.youtube.com/watch?v=xlUFkMKSB3Y&amp;amp;list=PL0862D1A947252D20&amp;amp;index=2&amp;amp;t=0s"&gt;list &lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This lecture covers these topics:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logic&lt;/li&gt;
&lt;li&gt;Propositions&lt;/li&gt;
&lt;li&gt;Logical Connectives (&lt;span class="math"&gt;\(\&amp;amp;\)&lt;/span&gt;, &lt;span class="math"&gt;\(|\)&lt;/span&gt;, &lt;span class="math"&gt;\(\sim\)&lt;/span&gt;) and its truth tables&lt;/li&gt;
&lt;li&gt;Implication. (&lt;span class="math"&gt;\(\Rightarrow\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Equivalence. (&lt;span class="math"&gt;\(\Leftrightarrow\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Tautology, Contradiction &amp;amp; Contingency.&lt;/li&gt;
&lt;li&gt;Logical Identities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Understanding Equivalence and Implication was little tough.&lt;/p&gt;
&lt;p&gt;These 2 video's provided the additional help.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LSm4P6ywxoA"&gt;Rachel's Discrete Math Course - Implications (Lecture 5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hICRgMz2LG8"&gt;Propositional logic | first order predicate logic| Propositional calculus | gate | net - part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097558663814893569"&gt;Link to Tweet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL0862D1A947252D20"&gt;NPTEL | Computer Sc - Discrete Mathematical Structures | Prof. Kamala Krithivasan &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLUpS0WwSvA3e7HtgzNHMivo0T8V0etX_Z"&gt;ArsDigita | Discrete Mathematics and Its Applications | Rosen | Shai Simonson &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB7540DEDD482705B"&gt;MIT 6.042J | Mathematics for Computer Science, Fall 2010 | Tom Leighton, Marten van Dijk &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Discrete-Mathematics-Its-Applications-SIE/dp/0070681880/"&gt;Amazon | Discrete Mathematics and Its Applications (SIE) | Kenneth Rosen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.put.poznan.pl/ksiek/latexmath.html"&gt;Latex | Math Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nosferalatu.com/Pelican.html"&gt;Pelican and Math Equations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="#100DaysOfDiscreteMath"></category><category term="#100DaysOfX"></category><category term="#100DaysOfDiscreteMath"></category></entry><entry><title>100Days of Vim Log File</title><link href="https://www.archerimagine.com/articles/100daysofvim/100Days-of-vim-log-file-V-2-0.html" rel="alternate"></link><published>2019-02-16T23:28:02+05:30</published><updated>2019-03-21T22:51:42+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2019-02-16:/articles/100daysofvim/100Days-of-vim-log-file-V-2-0.html</id><summary type="html">&lt;p&gt;Vim is really hard to learn, time and again I have failed to use it consistently. I understand the basics of vim and can get some work done with VIM. I am targeting to become efficient at this. Hopefully the 100DaysOfVim will help me to be consistent.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Vim Help Screen " src="https://www.archerimagine.com/images/100DaysOfVim/vimHelp.png" title="Vim Help Screen"/&gt;&lt;/p&gt;
&lt;p&gt;I am starting this new journey into the world of VIM, with a hope that this time the mistakes of my past attempts will be rectified. This journey's goal is pre-decided so that there is no deviation from the plan of learning VIM. &lt;/p&gt;
&lt;p&gt;In the last attempt of learning VIM, I was doing the classic mistakes of learning vim as described by Mr. Bram Moolenaar in &lt;a href="https://www.youtube.com/watch?v=p6K4iIMlouI"&gt;this&lt;/a&gt; video, that is, &lt;strong&gt;Learn every feature the editor offers and use the most efficient command all the time.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The approach this time will be learning a little bit of commands in VIM and apply it daily for a few days, as it becomes part of the muscle memory move to the next set. In addition, I have also set my goals for this 100 Days to have a razor sharp focus and not deviating.&lt;/p&gt;
&lt;p&gt;The goal of this &lt;strong&gt;100DaysofVim&lt;/strong&gt; are:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit text effectively.&lt;/li&gt;
&lt;li&gt;Scroll and move in a file quickly.&lt;/li&gt;
&lt;li&gt;Navigate source code with ctags and key board shortcuts.&lt;/li&gt;
&lt;li&gt;Edit multiple files using buffers.&lt;/li&gt;
&lt;li&gt;No use of any vim plugins.&lt;/li&gt;
&lt;li&gt;Read and understand the vim help system.&lt;/li&gt;
&lt;li&gt;Integrate debugging with source code navigation in VIM.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Editing a file&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/running-vim-within-irb/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nothing significant progress today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780661358411776"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Starting Vim&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/spell-checking/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understood about the default spell checking mechanism of VIM.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Will post the key bindings soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432461615243265"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Special Ex characters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/formatting-text-with-par/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Most of the Special EX char, can be used with the &lt;code&gt;:edit&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Vimcast from wrapping and this completely went over the head, will revisit again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063720264122376"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Ranges&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/hard-wrapping-text/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Understanding Wrapping is little difficult in VIM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107683433843703810"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Command-line editing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/soft-wrapping-text/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297853284732934"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Various commands&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/the-file-explorer/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Configured the &lt;code&gt;netrw&lt;/code&gt; to behave like a File Explorer.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Took help from these links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shapeshed.com/vim-netrw/"&gt;Vim: you don't need NERDtree or (maybe) netrw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kgrz.io/editing-files-over-network.html"&gt;Magic of netrw in Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="link"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help about &lt;strong&gt;Quickfix commands&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/the-edit-command/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quickfix commands&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;We need a arguments called &lt;code&gt;makeprg&lt;/code&gt; to be configured.&lt;/li&gt;
&lt;li&gt;C program's by default have &lt;code&gt;make&lt;/code&gt; as the &lt;code&gt;makeprg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Python program can configure &lt;code&gt;makeprg&lt;/code&gt; as &lt;code&gt;pyflakes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can even configure this pased on the &lt;code&gt;ftplugin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VimCast&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to change directory while editing a file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105169141072363521"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-thursday-28-february-2019"&gt;Day 09 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-09-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/modal-editing-undo-redo-and-repeat/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; : = &lt;code&gt;xi&lt;/code&gt; : delete a char and insert mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; := &lt;code&gt;^C&lt;/code&gt; : delete line and insert mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the &lt;strong&gt;Options&lt;/strong&gt; help, did not understand and word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101175253693358082"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-wednesday-27-february-2019"&gt;Day 08 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-08-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/using-the-changelist-and-jumplist/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt; : Navigate the change list in forward and backward direction.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + 0&lt;/code&gt;, &lt;code&gt;CTRL + I&lt;/code&gt;: Navigate the jump list in forward and backward direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100802343728308226"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-tuesday-26-february-2019"&gt;Day 07 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-07-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/creating-the-vimcasts-logo-as-ascii-art/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about session when reading the &lt;strong&gt; Key Mapping&lt;/strong&gt; section of vim help.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mksession hello.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim -S hello.vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100449588861956101"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-monday-25-february-2019"&gt;Day 06 | Monday 25 February 2019&lt;a class="headerlink" href="#day-06-monday-25-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/how-to-use-tabs/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100449588861956101"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-friday-22-february-2019"&gt;Day 05 | Friday 22 February 2019&lt;a class="headerlink" href="#day-05-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/working-with-tabs/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completed the course &lt;a href="https://www.udemy.com/vim-commands-cheat-sheet/"&gt;Udemy | Vim MasterClass | Jason Cannon &lt;/a&gt; &lt;ul&gt;
&lt;li&gt;Received the course completion certificate.
&lt;img alt="Vim Master Class Certificate " src="https://www.archerimagine.com/images/100DaysOfVim/vimMasterClass.jpg" title="Vim Master Class Certificate"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about the gVIM clipboard buffers &lt;code&gt;"+&lt;/code&gt; and &lt;code&gt;"*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tab's command&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:tabe&lt;/code&gt; : open a tab with file name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-W T&lt;/code&gt;: move current split into a tab.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabc&lt;/code&gt; : close current tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabo[nly]&lt;/code&gt;: one 1 tab open.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gT&lt;/code&gt; and &lt;code&gt;gt&lt;/code&gt;: to switch between tabs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabmove&lt;/code&gt;: move tabs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completed these help topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; Visual Mode &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; Text Object &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098996430537142274"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-thursday-21-february-2019"&gt;Day 04 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-04-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Lecture on buffers from &lt;a href="https://www.udemy.com/vim-commands-cheat-sheet/"&gt;Udemy | Vim MasterClass | Jason Cannon &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/working-with-windows/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about the various windows commands.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL +w s&lt;/code&gt; or :sp `: horizontal split&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL +w v&lt;/code&gt; &lt;code&gt;:vsp&lt;/code&gt;: vertical split&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only&lt;/code&gt;: closes all window except the active one&lt;/li&gt;
&lt;li&gt;Navigation is done by &lt;code&gt;CTRL + w w&lt;/code&gt;, &lt;code&gt;CTRL + w h&lt;/code&gt;, &lt;code&gt;CTRL + w j&lt;/code&gt;, &lt;code&gt;CTRL + w k&lt;/code&gt;, &lt;code&gt;CTRL + w l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resize windows&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL + w +&lt;/code&gt;, &lt;code&gt;CTRL + w -&lt;/code&gt;, increase or decrease the size by 1 line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + W _&lt;/code&gt;, &lt;code&gt;CTRL + w |&lt;/code&gt;, increase size of current window in height and width &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Moving window is done by &lt;code&gt;CTRL + w R&lt;/code&gt;, &lt;code&gt;CTRL + w H&lt;/code&gt;, &lt;code&gt;CTRL + w J&lt;/code&gt;, &lt;code&gt;CTRL + w K&lt;/code&gt;, &lt;code&gt;CTRL + w L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;like &lt;code&gt;bufdo&lt;/code&gt; we have a command &lt;code&gt;windo&lt;/code&gt; which works only on opened window.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Studied the &lt;strong&gt;Complex Changes&lt;/strong&gt; from vim helps, did not understood much from this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098634646991065089"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-wednesday-20-february-2019"&gt;Day 03 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-03-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Vim Help Screen for changing text " src="https://www.archerimagine.com/images/100DaysOfVim/vim_changingText.png" title="Vim Help Screen for changing text"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Lecture on buffers from &lt;a href="https://www.udemy.com/vim-commands-cheat-sheet/"&gt;Udemy | Vim MasterClass | Jason Cannon &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about these buffers commands.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:buffers&lt;/code&gt; or &lt;code&gt;:ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;/code&gt; or &lt;code&gt;:bnext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bp&lt;/code&gt; or &lt;code&gt;:bprevious&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bf&lt;/code&gt; or &lt;code&gt;:bfirst&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bl&lt;/code&gt; or &lt;code&gt;:blast&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + ^&lt;/code&gt; : last open buffers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set hidden&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:qall!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wall!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:badd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bufdo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:Explore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Studied the &lt;strong&gt;Changing Text&lt;/strong&gt; from Vim help.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cc&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; all work on line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + A&lt;/code&gt; and &lt;code&gt;CTRL + X&lt;/code&gt; has a very nice implementation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:ce&lt;/code&gt;, &lt;code&gt;:le&lt;/code&gt; &amp;amp; &lt;code&gt;:ri&lt;/code&gt; changes the alignment of line, center, left and right.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098270900154236928"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-2-tuesday-19-february-2019"&gt;Day 2 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-2-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_1"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;li&gt;Saw 1 screen cast from &lt;a href="http://vimcasts.org/episodes/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Studied the &lt;strong&gt;Copying and Moving text.&lt;/strong&gt; section of vim help.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; behaves the same as &lt;code&gt;^&lt;/code&gt; without a count preceding it. When count is preceding it, this behaves as &lt;code&gt;j&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/155926/what-does-the-underscore-motion-do-in-vim"&gt;What does the underscore motion do in vim?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While learning about vim help file, I found that all the commands which are similar are generally kept together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097924386038915072"&gt;Link To Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-1-monday-18-february-2019"&gt;Day 1 | Monday 18 February 2019&lt;a class="headerlink" href="#day-1-monday-18-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="todays-progress_2"&gt;Today's Progress&lt;a class="headerlink" href="#todays-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Complete the &lt;code&gt;vimtutor&lt;/code&gt; exercise.&lt;/li&gt;
&lt;li&gt;Studied the quick reference in vim help.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Few commands which was very good.&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;C&lt;/code&gt; to change the text from the cursor till end of line.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;D&lt;/code&gt; to delete the text from the cursor till end of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Few Insert Mode commands.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; : insert one shiftwidth of indent in front of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-D&lt;/code&gt; : deletes one shiftwidth of indent in front of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097560432850685954"&gt;Link to Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@peterxjang/how-to-learn-vim-a-four-week-plan-cd8b376a9b85"&gt;How To Learn Vim: A Four Week Plan &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://100daysofx.com/"&gt;100daysOfX&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p6K4iIMlouI"&gt;YouTube | 7 Habits For Effective Text Editing 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/episodes/"&gt;VimCast | Episodes &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="#100DaysOfVim"></category><category term="#100DaysOfVim"></category><category term="#100DaysOfX"></category></entry><entry><title>100Days of Code Log File 2nd Attempt</title><link href="https://www.archerimagine.com/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html" rel="alternate"></link><published>2019-02-15T22:42:30+05:30</published><updated>2019-03-21T22:49:10+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2019-02-15:/articles/100daysofcode-python/100Days-of-code-log-file_V_2_0.html</id><summary type="html">&lt;p&gt;Hello World!, You are about the witness the second coming of an epic 100-Day coding journey, A story that great sages will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and unexpected epiphanies.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Motivational Quotes" src="https://www.archerimagine.com/images/100DaysOfCode/100DaysCode_Quotefancy.jpg" title="life always offers you a second chance. is called tomorrow, by Dylan Thomas"/&gt;&lt;/p&gt;
&lt;p&gt;Hello World!, You are about the witness the beginning of an epic second coming of the 100-Day coding journey, A story that great sages
will pass down from generation to generation. This quest will feature a potpourri of unfiltered joy, unrivaled pain, and 
unexpected epiphanies.&lt;/p&gt;
&lt;p&gt;Some moments, I will be the smartest man alive. Others moments, I will be a stupid idiot. But each day, I will be a valiant warrior, fighting to develop and perfect the skills necessary to evolve into a true beast with these keys.&lt;/p&gt;
&lt;p&gt;I have failed in my previous attempt for the challenge, which you can find &lt;a href="https://www.archerimagine.com/articles/100daysofcode/100Days-of-code-log-file.html" title="First attempt for 100Daysofcode"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are learning from the previous failure, here are the modification which was done to the challenge according to my handicap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selected the resource in advance, &lt;ul&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice the 100Daysofcode for a month before committing fully.&lt;/li&gt;
&lt;li&gt;Create a time table and sticking to it.&lt;/li&gt;
&lt;li&gt;Studying at the same time everyday, brains craves for learning python in that hour of the day.&lt;/li&gt;
&lt;li&gt;Missing few (~5) days is acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ladies and gentleman, I present to you, #100DaysofCode with @ &lt;a href="https://twitter.com/animeshkbhadra" title="Twitter Handle"&gt;animeshkbhadra &lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="day-16-thursday-21-march-2019"&gt;Day 16 | Thursday 21 March 2019&lt;a class="headerlink" href="#day-16-thursday-21-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress"&gt;Days Progress&lt;a class="headerlink" href="#days-progress" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed few regular expression tutorials from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Negation&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[^abc]&lt;/code&gt; - A set that will not match any char of these characters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.IGNORECASE&lt;/code&gt;, &lt;code&gt;re.I&lt;/code&gt; - Flag to ignore case while searching&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.VERBOSE&lt;/code&gt;, &lt;code&gt;re.X&lt;/code&gt; - Flag that allows regular expression to span multiple lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Groups&lt;ul&gt;
&lt;li&gt;&lt;code&gt;([abc])&lt;/code&gt; - create a group, that contains a set of letters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(P&amp;lt;name&amp;gt;[abc])&lt;/code&gt; - creates a named group, member can be accessed using &lt;code&gt;group('name')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.MULTILINE&lt;/code&gt;, &lt;code&gt;re.M&lt;/code&gt; - flag to make a pattern having lines.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; - Beginning of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; - End of line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108780013992796163"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-15-wednesday-20-march-2019"&gt;Day 15 | Wednesday 20 March 2019&lt;a class="headerlink" href="#day-15-wednesday-20-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_1"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today did not get much work done, solved few exercises in solo learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_1"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108432674560069633"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-14-tuesday-19-march-2019"&gt;Day 14 | Tuesday 19 March 2019&lt;a class="headerlink" href="#day-14-tuesday-19-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_2"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed few regular expression tutorials from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_2"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about counts in regular expressions.&lt;/li&gt;
&lt;li&gt;We can create expressions like these&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w{3}&lt;/code&gt; - Match any 3 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{,3}&lt;/code&gt; - Match 0,1,2 or 3 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{3,}&lt;/code&gt; - Match 3 or more char, no upper limit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w{3,5}&lt;/code&gt; - Match 3,4 or 5 word char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w?&lt;/code&gt; - Match 0 or 1 char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w*&lt;/code&gt; - Match 0 or more&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w+&lt;/code&gt; - Match 1 or more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can also pass a variable in regular expression string.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"\w{%s}" %count&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt; - for string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; - for decimal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; - for float&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sets basic was also checked.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt; - set of char a,b,c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z][A-Z][a-zA-Z]&lt;/code&gt; - Char ranges&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt; - digit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^2]&lt;/code&gt; - Not 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1108063107849564161"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-13-monday-18-march-2019"&gt;Day 13 | Monday 18 March 2019&lt;a class="headerlink" href="#day-13-monday-18-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_3"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Chapter 01 from Head First Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_3"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about 2 types of &lt;code&gt;import&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learned about these module, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107684592805396480"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-12-wednesday-13-march-2019"&gt;Day 12 | Wednesday 13 March 2019&lt;a class="headerlink" href="#day-12-wednesday-13-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_4"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practiced some of the learning from Regular Expression from previous Day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_4"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297400236986370"&gt;link to tweet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-11-tuesday-12-march-2019"&gt;Day 11 | Tuesday 12 March 2019&lt;a class="headerlink" href="#day-11-tuesday-12-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_5"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the Module of Regular Expression from &lt;a href="https://teamtreehouse.com/library/regular-expressions-in-python"&gt;TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_5"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about File read and write operations like&lt;ul&gt;
&lt;li&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In addition to these explored&lt;ul&gt;
&lt;li&gt;&lt;code&gt;re.match()&lt;/code&gt; - Matches against the beginning of text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.search()&lt;/code&gt; - returns the first match location anywhere in the text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Few escape sequence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt; - Matches Unicode word char including numbers but excluding special character.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\W&lt;/code&gt; - Matches anything which is &lt;strong&gt; NOT &lt;/strong&gt; Unicode word or numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt; - Matches all white spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt; - Matches anything which is &lt;strong&gt; NOT &lt;/strong&gt; white spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; - Matches numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; - Matches &lt;strong&gt; NOT &lt;/strong&gt; numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt; - Matches word boundary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\B&lt;/code&gt; - Matches &lt;strong&gt; NOT &lt;/strong&gt; word boundary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1107297400236986370"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-10-monday-11-march-2019"&gt;Day 10 | Monday 11 March 2019&lt;a class="headerlink" href="#day-10-monday-11-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_6"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Read the first chapter of Head first Python.&lt;/li&gt;
&lt;li&gt;Wrote few code from the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_6"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learned about the &lt;code&gt;datetime&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1105167915958063105"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-09-tuesday-05-march-2019"&gt;Day 09 | Tuesday 05 March 2019&lt;a class="headerlink" href="#day-09-tuesday-05-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_7"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the module of Quiz Game in the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Earned the Dates and Times badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Dates and Times Badge " src="https://www.archerimagine.com/images/100DaysOfCode/python_date_time.png" title="Python Dates and Times Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_7"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about timezone.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a very difficult to handle without &lt;a href="https://pypi.org/project/pytz/"&gt;pytz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1102918666625130499"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-08-friday-01-march-2019"&gt;Day 08 | Friday 01 March 2019&lt;a class="headerlink" href="#day-08-friday-01-march-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_8"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the module of Quiz Game in the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Earned the build timed quiz App badge.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Timed Quiz Badge " src="https://www.archerimagine.com/images/100DaysOfCode/python_time.png" title="Python Timed Quiz Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_8"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some concepts of games were very good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101526314564141057"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-07-thursday-28-february-2019"&gt;Day 07 | Thursday 28 February 2019&lt;a class="headerlink" href="#day-07-thursday-28-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_9"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Started the course. &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;TreeHouse | Date and Times in Python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Received the badge Date and time Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Date and Time Badge " src="https://www.archerimagine.com/images/100DaysOfCode/python_time.png" title="Python Date and Time Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_9"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learned about &lt;code&gt;strftime()&lt;/code&gt; and &lt;code&gt;strptime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Made a script to create a link for wikipedia.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1101173226271592449"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-06-wednesday-27-february-2019"&gt;Day 06 | Wednesday 27 February 2019&lt;a class="headerlink" href="#day-06-wednesday-27-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_10"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I just watched the second lecture from MIT OCW's &lt;a href="https://www.youtube.com/watch?v=SLvTCHhu5SE&amp;amp;index=2&amp;amp;list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_10"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this lecture we discuss about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of objects.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expression&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100802868599234563"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-05-tuesday-26-february-2019"&gt;Day 05 | Tuesday 26 February 2019&lt;a class="headerlink" href="#day-05-tuesday-26-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_11"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There was a gap of 3 days.&lt;/li&gt;
&lt;li&gt;Started the &lt;a href="https://teamtreehouse.com/library/dates-and-times-in-python"&gt;Date and Time&lt;/a&gt; module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thoughts_11"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This course teaches about the date and time module of Python.&lt;/li&gt;
&lt;li&gt;Major modules in &lt;code&gt;datetime&lt;/code&gt; are&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;timedelta&lt;/code&gt;, &lt;code&gt;timezone&lt;/code&gt;, &lt;code&gt;tzinfo&lt;/code&gt;- which is rarely used directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learned about &lt;code&gt;.today()&lt;/code&gt;, &lt;code&gt;.combine()&lt;/code&gt;, &lt;code&gt;.timestamp()&lt;/code&gt; -  which returns the epoch time.&lt;/li&gt;
&lt;li&gt;We can format the time with help from &lt;code&gt;strftime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can create time with string format &lt;code&gt;strptime()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1100450089930276864"&gt;link to tweet&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-04-friday-22-february-2019"&gt;Day 04 | Friday 22 February 2019&lt;a class="headerlink" href="#day-04-friday-22-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_12"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the course &lt;a href="https://teamtreehouse.com/library/write-better-python"&gt;TreeHouse | Write Better python &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Received the badge Clean Code Badge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Clean Code Badge " src="https://www.archerimagine.com/images/100DaysOfCode/python_cleancode.png" title="Python Clean Code Badge"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In addition completed the Write Better python Course of the Learn Python track.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Write Better Python " src="https://www.archerimagine.com/images/100DaysOfCode/writeBetterPython.png" title="Write Better Python"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_12"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This course taught about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PEP-8 Coding style guide.&lt;/li&gt;
&lt;li&gt;PEP-20 which is the Zen of python, can be accessed using &lt;code&gt;import this&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;PEP-257 for docstrings&lt;ul&gt;
&lt;li&gt;DocString which can fit one line should.&lt;/li&gt;
&lt;li&gt;DocString that cannot, put the closing triple quote on their own line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging Module of python&lt;ul&gt;
&lt;li&gt;6 Logs levels, &lt;code&gt;CRITICAL&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;NOTSET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Debugger &lt;code&gt;pdb&lt;/code&gt;, can be invoked by calling &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098994918071156737"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-03-thursday-21-february-2019"&gt;Day 03 | Thursday 21 February 2019&lt;a class="headerlink" href="#day-03-thursday-21-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_13"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I completed the &lt;a href="https://teamtreehouse.com/library/objectoriented-python-2"&gt;Object Oriented Python course &lt;/a&gt;. With this I have also received the badge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Object Oriented Python Badge." src="https://www.archerimagine.com/images/100DaysOfCode/OOPython.png" title="Object Oriented Python Badge"/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_13"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Today completed the project Dice Roller.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am still not confident in some part of Object Oriented Python, will soon polish it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098633238963240961"&gt;link to tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-02-wednesday-20-february-2019"&gt;Day 02 | Wednesday 20 February 2019&lt;a class="headerlink" href="#day-02-wednesday-20-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_14"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I just watched the first lecture from MIT OCW's &lt;a href="https://www.youtube.com/watch?v=bX3jvD7XFPs&amp;amp;list=PLB2BE3D6CA77BB8F7&amp;amp;index=2&amp;amp;t=0s"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a great lecture by &lt;a href="https://people.csail.mit.edu/guttag/"&gt;John Guttag &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am alternating between &lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?reload=9&amp;amp;list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/p&gt;
&lt;h3 id="thoughts_14"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lecture 1 of MIT 6.00SC Introduction to Computer Science and Programming taught me about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declarative and Imperative Knowledge.&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Fixed program and stored program computers&lt;/li&gt;
&lt;li&gt;Programming Language&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Static Semantics&lt;/li&gt;
&lt;li&gt;Semantics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types of errors&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiled Vs Interpreted Language &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1098272030032572416"&gt;Link To Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="day-01-tuesday-19-february-2019"&gt;Day 01 | Tuesday 19 February 2019&lt;a class="headerlink" href="#day-01-tuesday-19-february-2019" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="days-progress_15"&gt;Days Progress&lt;a class="headerlink" href="#days-progress_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I am learning Python from the learn python track of &lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;TreeHouse&lt;/a&gt;. I started this course, some days back, from now, will post regularly on behalf of #100DaysOfCode.&lt;/p&gt;
&lt;p&gt;Today I have completed the Advanced Object Badge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Advance Object TreeHouse Badge." src="https://www.archerimagine.com/images/100DaysOfCode/python.png" title="Advance Object TreeHouse Badge."/&gt;&lt;/p&gt;
&lt;h3 id="thoughts_15"&gt;Thoughts&lt;a class="headerlink" href="#thoughts_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today I learned about:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@property&lt;/code&gt; : This decorator is used to convert a class method into a class property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@property.setter&lt;/code&gt; : This decorator is used to make the method set a class property.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@classmethod&lt;/code&gt; : This is a decorator which takes a function as input works on it and returns another function as output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/animeshkbhadra/status/1097923646327345153"&gt;Link to Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quotefancy.com/quote/970132/Dylan-Thomas-Life-always-offers-you-a-second-chance-is-called-tomorrow"&gt;QuoteFancy | Image Source &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode Official Website &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamtreehouse.com/tracks/learn-python"&gt;Learn Python Track from Team TreeHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLB2BE3D6CA77BB8F7"&gt;MIT 6.00SC Introduction to Computer Science and Programming &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nealschaffer.com/tweet-link-preview-image-twitter/"&gt;Create a Tweet With image Preview for Free &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="#100DaysOfCode, python"></category><category term="#100DaysOfCode"></category><category term="#100DaysOfX"></category><category term="Python"></category></entry></feed>