<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Archer Imagine</title><link href="http://archerimagine.com/" rel="alternate"></link><link href="http://archerimagine.com/feeds/all.atom.xml" rel="self"></link><id>http://archerimagine.com/</id><updated>2017-04-30T18:11:34+05:30</updated><entry><title>Understanding the Pelican Settings files.</title><link href="http://archerimagine.com/articles/pelican-settings-files.html" rel="alternate"></link><published>2017-04-30T17:07:03+05:30</published><updated>2017-04-30T18:11:34+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-30:/articles/pelican-settings-files.html</id><summary type="html">&lt;p&gt;By default pelican comes with 2 settings files, pelicanconf.py and publishconf.py. In this post we try to understand the meaning of these to files and some basic settings.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The basic work flow in pelican blogging is to first generate content, verify it locally using a &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;, and when everything is fine will publish it.&lt;/p&gt;
&lt;p&gt;Pelican comes with two settings files to separate these 2 process. These two files are.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets check what is the use of these 2 files, and how to manipulate these files to get the most out of pelican.&lt;/p&gt;
&lt;p&gt;These setting files are mostly passed to the templates associated with the themes to generate the site, all these settings are some parameters to these templates.&lt;/p&gt;
&lt;h2 id="pelicanconfpy"&gt;pelicanconf.py&lt;a class="headerlink" href="#pelicanconfpy" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We had used the &lt;code&gt;pelican-quickstart&lt;/code&gt; to generate this blog, when we use this command, we get a pre-configured &lt;code&gt;pelicanconf.py&lt;/code&gt; and a &lt;code&gt;publishconf.py&lt;/code&gt; files. This have the bare basic configuration to be used based on the questions we answered on the options.&lt;/p&gt;
&lt;p&gt;These files basically contains the settings identifier for the pelican blog, all the setting identifiers are in all-caps, and the values numbers (5, 20, etc.), booleans (True, False, None, etc.), dictionaries, or tuples should not be enclosed in quotation marks.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; is used to generate the site locally and tested over &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. The basic &lt;code&gt;pelicanconf.py&lt;/code&gt; would look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Animesh&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Kolkata&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/{slug}.html&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://getpelican.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://python.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jinja2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://jinja.pocoo.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You can modify those links in your config file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c1"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You can add links in your config file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Another social link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="c1"&gt;#RELATIVE_URLS = True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you remember correctly some of the settings value we had provided during the &lt;code&gt;pelican-quickstart&lt;/code&gt; commands, like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AUTHOR&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the name of the site author which we had entered during the questions asked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SITENAME&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;This is the Name of the site which we provided.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SITEURL&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Since we still do not have domain name registered, we had kept this empty, and also it make sense to keep this empty for &lt;code&gt;localhost&lt;/code&gt; testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; where we write our blog is the default path set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TIMEZONE&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This we had entered during the initial process, and in future if we want to change this we can change this settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_LANG&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This was also entered during the &lt;code&gt;pelican-quickstart&lt;/code&gt; process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FEEDS_*&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;All the &lt;code&gt;FEEDS_*&lt;/code&gt; related settings are empty because we have still not configured the RSS feeds settings, this we will change in future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ARTICLE_*&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the settings which we modified for keeping the path of the post into one folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LINKS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a tuple of tuple, with each entry showing a links which you want provide in you blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOCIAL&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is also a tuple of tuple, were each entry is meant to point to a name of a social network say &lt;code&gt;Facebook&lt;/code&gt; and the link to your profile.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_PAGINATION&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a number showing how many blogs should be listed on the front page. Some Themes use this setting for some other purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now these settings are not fully exhaustive, Pelican has a huge list of setting, which we will revisit once we have the need of them.&lt;/p&gt;
&lt;h2 id="publishconfpy"&gt;publishconf.py&lt;a class="headerlink" href="#publishconfpy" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike &lt;code&gt;pelicanconf.py&lt;/code&gt;, this setting file is only used when we are supposed to publish our blog to the domain hosting. This configuration is accessed when we generate the site using the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content -s publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic content of these files look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c1"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c1"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.atom.xml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Following items are often useful when publishing&lt;/span&gt;

&lt;span class="c1"&gt;#DISQUS_SITENAME = &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#GOOGLE_ANALYTICS = &amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This file, basically build on top of the &lt;code&gt;pelicanconf.py&lt;/code&gt;, as we can see from this line, &lt;code&gt;from pelicanconf import *&lt;/code&gt;. What this means is all the configuration from &lt;code&gt;pelicancongf.py&lt;/code&gt; is taken into consideration along with some specific configuration which is required for just publishing.&lt;/p&gt;
&lt;p&gt;If you see this setting most of them are empty which we will fill one by one as we make progress in our blog, but from the structure you might get an idea that this file pertains to its integraton with the &lt;code&gt;DISQUS&lt;/code&gt; comment system, and the &lt;code&gt;GOOGLE_ANALYTICS&lt;/code&gt; code. We will see the use of this code once we integrate these feature into our blog.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/settings.html"&gt;Pelican Settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Pelican commands to generate the first blog.</title><link href="http://archerimagine.com/articles/pelican-commands-to-generate-first-pelican-blog-post.html" rel="alternate"></link><published>2017-04-29T22:15:05+05:30</published><updated>2017-04-29T23:12:16+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-29:/articles/pelican-commands-to-generate-first-pelican-blog-post.html</id><summary type="html">&lt;p&gt;In this post we will check some of pelican commands, and how it helps us to generate a blog post.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have our boilerplate pelican blog available, now we have still not seen the magic of pelican. In this post we will see our blog coming to life.&lt;/p&gt;
&lt;h2 id="first-pelican-blog"&gt;First Pelican Blog&lt;a class="headerlink" href="#first-pelican-blog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have see the folder structure here&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelicanFolderStructure" src="http://archerimagine.com/images/pelicanQuickStart/pelicanFolderStructure.png" title="pelican folder structure"&gt;  &lt;/p&gt;
&lt;p&gt;Now we will first execute some commands and see what happens with this boilerplate. Remember to be in the &lt;code&gt;pelican1&lt;/code&gt; environment. We can do this by.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; activate pelican1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we are in &lt;code&gt;pelican1&lt;/code&gt; environment, we have all the &lt;code&gt;pelican&lt;/code&gt; commands at our disposal. Kindly execute this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above command we are passing &lt;code&gt;content&lt;/code&gt; as a parameter, which is nothing but one of the directory of the folder structure.&lt;/p&gt;
&lt;p&gt;The output will be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WARNING: No valid files found in content.
Done: Processed &lt;span class="m"&gt;0&lt;/span&gt; articles, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.12 seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It clearly warn us about no valid files found in &lt;strong&gt;content&lt;/strong&gt;, as we have not added any post to the directory. If you see inside the &lt;code&gt;output&lt;/code&gt; folder, we will see some content in that namely these files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;archives.html
authors.html
categories.html
index.html
tags.html
theme &lt;span class="c1"&gt;#directory which contains some predefined images and css.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let us see what the blog looks like. Just execute these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; output/
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you execute the above commands we can see the output on browser on this path &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt; and it will look something like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican First Post" src="http://archerimagine.com/images/pelicanCommands/firstPostPelican.png" title="The first post from pelican"&gt;&lt;/p&gt;
&lt;p&gt;Nothing fancy here, but we will some content with some link and a default theme. It is petty good for being a boilerplate.&lt;/p&gt;
&lt;h2 id="the-first-post"&gt;The first post.&lt;a class="headerlink" href="#the-first-post" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we are ready for our first post, we will do the sample hello world which is the de-facto standard in programming languages first program.&lt;/p&gt;
&lt;p&gt;We will write the first post in &lt;strong&gt;Markdown&lt;/strong&gt;. Create a file named &lt;code&gt;HelloWorld.md&lt;/code&gt; in this directory &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Hello World
Date: 2017-04-29 11:01
Category: Pelican

Hello World to Pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once create and saved this file, just run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will have the following output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Done: Processed &lt;span class="m"&gt;1&lt;/span&gt; article, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.27 seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time it clearly states that we have &lt;code&gt;1&lt;/code&gt; article. Then follow the other commands as discussed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; output/
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again check the output on the browser at &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. Now this time the output is different and it look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican Hello World Post" src="http://archerimagine.com/images/pelicanCommands/helloWorldPelicanPost.png" title="The HelloWorld post from pelican"&gt;&lt;/p&gt;
&lt;p&gt;The area surrounded in ellipse are new. This shows us the power of pelican, we do not have to bother how the content is presented on screen, we have to only concentrate on writing content.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/quickstart.html"&gt;Pelican Doc Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Pelican Folder Structure</title><link href="http://archerimagine.com/articles/pelican-folder-structure.html" rel="alternate"></link><published>2017-04-29T22:10:10+05:30</published><updated>2017-04-30T17:06:34+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-29:/articles/pelican-folder-structure.html</id><summary type="html">&lt;p&gt;In this post we will see some important files and folder structure of the pelican blog, and understand the significance of all these files in our blogs to come.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We will be able to extract the full juice of pelican once we understand the building blocks of the pelican blog. Folder structure and some of the files form the basic of this. We will understand some of this files and folder use in this post.&lt;/p&gt;
&lt;p&gt;After the first blog post if we give &lt;code&gt;make clean&lt;/code&gt; command we will see a folder structure just like this. This will have a empty &lt;code&gt;output&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelicanFolderStructure" src="http://archerimagine.com/images/pelicanFolder/PelicanFolderStructure.png" title="pelican folder structure"&gt;  &lt;/p&gt;
&lt;p&gt;We will understand the use of these folder and a proper way of managing your content.&lt;/p&gt;
&lt;h2 id="content-folder"&gt;content folder&lt;a class="headerlink" href="#content-folder" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the folder where all the magic happens. This is the root folder for our all content, we can use this folder for these purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing content&lt;/li&gt;
&lt;li&gt;Saving the images references in the content&lt;/li&gt;
&lt;li&gt;Static Pages (ex: about, contact etc)&lt;/li&gt;
&lt;li&gt;folder for storing our favicon.ico and apple icon&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="writing-content"&gt;Writing Content&lt;a class="headerlink" href="#writing-content" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In traditional wordpress or most of the bloging platform the content is stored in this format &lt;code&gt;/2015/05/24/my-content/&lt;/code&gt; now this may be what some people might be happy with and you can also do the same, but this impacts the SEO ranking as the path becomes long and the date when the content was created has no significance to the actual content but is occupying space on the url. In my opinion we can better organize ourself with some meaning full structure.&lt;/p&gt;
&lt;p&gt;What we can do is we can create a folder in side &lt;code&gt;content&lt;/code&gt; named &lt;code&gt;articles&lt;/code&gt; and the sub folders inside &lt;code&gt;articles&lt;/code&gt; for each category which you want to write or if you want to have a flat system you can place all your content inside &lt;code&gt;articles&lt;/code&gt;. I prefer the sub folder approach as we can derive the category name just from the folder name.&lt;/p&gt;
&lt;p&gt;So go ahead for beginning create a folder inside &lt;code&gt;content&lt;/code&gt; name &lt;code&gt;articles&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content/
mkdir articles
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now create your second post inside this and publish the content based on the command we learned on the previous post.&lt;/p&gt;
&lt;p&gt;Now if you launch the &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;, and click on the article title, you will see no difference but if you see on the url bar, we still see that our post is without the &lt;code&gt;article&lt;/code&gt; folder structure. We did not wanted this. Have a look&lt;/p&gt;
&lt;p&gt;&lt;img alt="url without article " src="http://archerimagine.com/images/pelicanFolder/URLwithoutarticles.png" title="URL without articles."&gt;&lt;/p&gt;
&lt;p&gt;In order to get the proper URL in the address bar we have to change somethings in the &lt;code&gt;pelicanconf.py&lt;/code&gt;, we will explain what is the purpose of this file in a short file for not just add these 3 line into that config.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/{slug}.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With is configuration in the config folder, just generate the blog with the commands already learned and then check the &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. It should look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="url with article " src="http://archerimagine.com/images/pelicanFolder/URLwitharticles.png" title="URL with articles."&gt;&lt;/p&gt;
&lt;p&gt;Now we have a proper folder structure.&lt;/p&gt;
&lt;h3 id="static-pages"&gt;Static Pages&lt;a class="headerlink" href="#static-pages" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most often then not we will want some pages which will rarely change, like an &lt;strong&gt;About&lt;/strong&gt; and a &lt;strong&gt;Contact&lt;/strong&gt; pages. These type of static pages is also supported in the pelican blog. Just create a folder named &lt;code&gt;pages&lt;/code&gt; inside &lt;code&gt;content&lt;/code&gt; folder like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content/
mkdir pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we are ready to make our sample &lt;code&gt;About.md&lt;/code&gt; and &lt;code&gt;Contact.md&lt;/code&gt;  inside &lt;code&gt;pages&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: About
Date: 2017-04-14 22:30
Modified: 2017-04-14 22:30
Slug: About
Author: username
Summary: This is a sample blog.


The About Page for the blog.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;code&gt;Contact.md&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Contact
Date: 2017-04-14 22:30
Modified: 2017-04-14 22:30
Slug: Contact
Author: username
Summary: This is a sample blog contact page.


The Contact Page for the blog.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We again generate the blog and check it on &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When we see the output of &lt;code&gt;pelican content&lt;/code&gt; command we will see this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Done: Processed &lt;span class="m"&gt;1&lt;/span&gt; article, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;2&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.20 seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which means that the &lt;code&gt;pages&lt;/code&gt; are generated. When we launch the &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;. we will see that the &lt;code&gt;About&lt;/code&gt; and &lt;code&gt;Contact&lt;/code&gt; menu like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="About and Contact Page " src="http://archerimagine.com/images/pelicanFolder/staticPages.png" title="About and Contact Page."&gt;&lt;/p&gt;
&lt;p&gt;We can modify these pages with the information which you want to furnish.&lt;/p&gt;
&lt;h3 id="static-images"&gt;Static Images&lt;a class="headerlink" href="#static-images" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most often then not we will use images to link in our blogs, we can store all these images inside the &lt;code&gt;content&lt;/code&gt; folder, having a directory called &lt;code&gt;images&lt;/code&gt;. Do this by following these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; content/
mkdir images
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can copy any image inside this folder and try to link it into one of our blog. Just copy any image in this folder and copy the file name.&lt;/p&gt;
&lt;p&gt;Now create a link to this file inside the already existing blog post by the help of &lt;code&gt;link&lt;/code&gt; of markdown, here is a sample.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![&lt;span class="nt"&gt;Hello World 1&lt;/span&gt;](&lt;span class="na"&gt;{filename}../images/helloWorldPelicanPost.png &amp;quot;Hello World 2&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should understand some details about the above piece of code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hello World 1&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;alt&lt;/code&gt; text is good if there is a browser which block image, this &lt;code&gt;alt&lt;/code&gt; text is displayed, showing an information about what this images was supposed to do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"Hello World 2"&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is the &lt;code&gt;title&lt;/code&gt; of the image, which is shown as a tool tip once we hover over the image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{filename}&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a special syntax which is used by pelican to generate links, so be it url or images, when using relative urls kindly use this format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have covered most of the folder structure inside &lt;code&gt;article&lt;/code&gt; we will see the configuration files in the next blog post.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/content.html#pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/content.html#linking-to-internal-content"&gt;Linking to internal content &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Pelican HelloWorld using pelican-quickstart</title><link href="http://archerimagine.com/articles/helloworld-pelican-quickstart.html" rel="alternate"></link><published>2017-04-27T23:26:43+05:30</published><updated>2017-04-29T22:09:10+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-27:/articles/helloworld-pelican-quickstart.html</id><summary type="html">&lt;p&gt;We all want to hit the ground rolling, and what better way then to start with a Pelican HelloWorld. pelican-quickstart is a great command to start a basic pelican blogs with most of the defaults working out of the box.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican makes it very easy to make the ground rolling ASAP. Pelican provides a great command &lt;code&gt;pelican-quickstart&lt;/code&gt;, which asks a few questions to you and makes a boilerplate blog ready in a few seconds. We will go through the entire process explaining each option is details.&lt;/p&gt;
&lt;h2 id="activate-python-environment"&gt;Activate Python environment&lt;a class="headerlink" href="#activate-python-environment" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We had setup a separate python anaconda environment in our previous &lt;a href="http://archerimagine.com/articles/python-setup-for-pelican-blog.html"&gt;post&lt;/a&gt; now is the time to active the environment, we can do that by using a simple command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; activate pelican1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will activate the &lt;code&gt;pelican1&lt;/code&gt; environment, and we can identify it by check the terminal prompt which will change to &lt;code&gt;(pelican1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the work is done we can deactivate the same with a simple command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; deactivate pelican1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the above command will work for linux and Mac, kindly check the windows equivalent of the same.&lt;/p&gt;
&lt;h2 id="pelican-quickstart"&gt;pelican-quickstart&lt;a class="headerlink" href="#pelican-quickstart" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we are ready to divulge in the world of pelican. Pelican has a ready to bake command to setup the basic boilerplate for the blog. The command is called&lt;/p&gt;
&lt;p&gt;Before executing the below commands just create a directory where you want your blog files to be stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/myBlogDirectory
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/myBlogDirectory
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just execute this commands and it asks you these series of questions, which we will talk in details.&lt;/p&gt;
&lt;h3 id="pelican-quickstart-options"&gt;pelican-quickstart options&lt;a class="headerlink" href="#pelican-quickstart-options" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The options shown after executing the &lt;code&gt;pelican-quickstart&lt;/code&gt; are as below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican quickstart options" src="http://archerimagine.com/images/pelicanQuickStart/pelicanQuickStartoptions.png" title="pelican quickstart options"&gt;&lt;/p&gt;
&lt;p&gt;We will discuss each and every options and there usage, we can always choose the default shown in capital letter, &lt;code&gt;{Y|n}&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where do you want to create your new Web site ? [.]&lt;ul&gt;
&lt;li&gt;Most probably we will keep the default as we are already in that directory, if not you can specify the path &lt;code&gt;/home/pathtomyblog&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What will be the title of the blog?&lt;ul&gt;
&lt;li&gt;Provide a suitable title to your blog, do not worry even if you want to change it latter we can change it. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Who will be the author of this Web site ?&lt;ul&gt;
&lt;li&gt;Just provide any name you want whose name should be present as a author on the blog post, it can be your name also.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What will be the default language  of this Web site ? [en]&lt;ul&gt;
&lt;li&gt;The default choice is &lt;code&gt;english&lt;/code&gt;, else you can give any language format mentioned in ISO 639-1 Language Codes, the list can be found &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" title="ISO Language codes"&gt;ISO Language codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)&lt;ul&gt;
&lt;li&gt;If you already have purchased a domain give the domain name as shown in the example, else continue with &lt;code&gt;n&lt;/code&gt;, we can later fill the domain name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to enable article pagination? (Y/n)&lt;ul&gt;
&lt;li&gt;We can go with the default of having pagination, which means how many post of a the blogs will be displayed in one page, the choice of this is in the next question.&lt;ul&gt;
&lt;li&gt;How many articles per page do you want? [10] &lt;ul&gt;
&lt;li&gt;The default choice is &lt;code&gt;10&lt;/code&gt;, for the time being keep it that way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is your time zone? [Europe/Paris]&lt;ul&gt;
&lt;li&gt;To change the time zone, we should be aware that these are &lt;strong&gt;tz database&lt;/strong&gt; time zone, to exactly get the time zone codes for your country visit &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" title="List of tz database time zones"&gt;List of tz database time zones&lt;/a&gt;, give the code without the &lt;code&gt;[]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)&lt;ul&gt;
&lt;li&gt;There are multiple ways to automate the blog publishing process, makefile and fabic comes to our help, just chose the default and we will decide on this later. This creates two files in the directory, &lt;code&gt;fabfile.py&lt;/code&gt; and &lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)&lt;ul&gt;
&lt;li&gt;We have the help of auto-reload commands to automatically generates the preview as soon as we change anything in the themes, we might not require it initially, so keep it false.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using FTP? (y/N)&lt;ul&gt;
&lt;li&gt;If we had an FTP site where we could upload, just choose the default and say &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using SSH? (y/N)&lt;ul&gt;
&lt;li&gt;If your hosting uses SSH, for our use case we will choose &lt;code&gt;N&lt;/code&gt;, which is the default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using Dropbox? (y/N)&lt;ul&gt;
&lt;li&gt;We can also use dropbox to upload out static files, but for this, we will try some other time, for now choose the default which is &lt;code&gt;N&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using S3? (y/N)&lt;ul&gt;
&lt;li&gt;We also have the facility of choosing amazon S3 for our site hosting, for now not needed chose &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using Rackspace Cloud Files? (y/N) &lt;ul&gt;
&lt;li&gt;Again the default &lt;code&gt;N&lt;/code&gt;, we are not using Rackspace.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you want to upload your website using GitHub Pages? (y/N)&lt;ul&gt;
&lt;li&gt;We can choose &lt;code&gt;y&lt;/code&gt; here, but we will try another mechanism, for now choose the default &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you had chosen &lt;code&gt;y&lt;/code&gt; in this option you will get this sub option.&lt;ul&gt;
&lt;li&gt;Is this your personal page (username.github.io)? (y/N)&lt;ul&gt;
&lt;li&gt;Choose &lt;code&gt;y&lt;/code&gt;, &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After this we will get this message in either case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Done. Your new project is available at /home/username/myWork/mySampleBlog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our blogs boilerplate is available. Here is the folder structure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelicanFolderStructure" src="http://archerimagine.com/images/pelicanQuickStart/pelicanFolderStructure.png" title="pelican folder structure"&gt;  &lt;/p&gt;
&lt;p&gt;We have still not seen how the blog will look like, we will divulge into this in the next post, with all the pelican commands which is extremely important to get the full juice out of pelican.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://terriyu.info/blog/posts/2013/07/pelican-setup/" title="How did the command option help"&gt;How I setup Pelican &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" title="List of tz database time zones"&gt;List of tz database time zones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" title="List of ISO 639-1 codes"&gt;List of ISO 639-1 codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/almet/1140861"&gt;pelican-quickstart.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>How to setup Anaconda Python environment for Pelican Blog.</title><link href="http://archerimagine.com/articles/python-setup-for-pelican-blog.html" rel="alternate"></link><published>2017-04-26T22:39:03+05:30</published><updated>2017-04-26T23:50:52+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-26:/articles/python-setup-for-pelican-blog.html</id><summary type="html">&lt;p&gt;Anaconda is a well know distribution of Python, supporting both python 2 and 3. We can setup a exclusive environment for Pelican blog using conda.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="installing-pelican"&gt;Installing Pelican&lt;a class="headerlink" href="#installing-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican is a python package, so we can have multiple option to install pelican. There can be 3 option which I can think of.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct Installation&lt;ul&gt;
&lt;li&gt;If we have only one python installation on the system, and we do not have any issue if we screw up this installation just use &lt;code&gt;pip&lt;/code&gt; to install pelican.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Installation using VirtualEnv.&lt;ul&gt;
&lt;li&gt;This approach is already mentioned in official documentation of &lt;a href="http://docs.getpelican.com/en/stable/install.html" title="Installing Pelican"&gt;pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Installation using Conda.&lt;ul&gt;
&lt;li&gt;By now you could have understood that we will use Conda to install pelican. This is because Anaconda is already a pre-packaged installation of very well know python package in both version 2 and 3. In future I will will update this page if I wrote about Anaconda installation, for now refer any documents on the google search for installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="configure-anaconda-for-pelican-blog"&gt;Configure Anaconda for Pelican Blog&lt;a class="headerlink" href="#configure-anaconda-for-pelican-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing we have to do is to create a environment using the python version 2. This can be done by this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create -n pelican1 python=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have executed the above command we will have &lt;code&gt;pelican1&lt;/code&gt; as an environment.&lt;/p&gt;
&lt;p&gt;We can see the list of environment in the system by using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda info --envs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will provide an output like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican1                 /home/username/anaconda3/envs/pelican1
py27                     /home/username/anaconda3/envs/py27
py35                     /home/username/anaconda3/envs/py35
root                  *  /home/username/anaconda3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows all the available environment.&lt;/p&gt;
&lt;p&gt;We can activate the &lt;code&gt;pelican1&lt;/code&gt; by using this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source activate pelican1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have an environment which we can used for pelican development. The reason for this environment creation is to have a separate environment for experimentation with pelican, if anything goes wrong we do not disturb already existing programs.&lt;/p&gt;
&lt;h3 id="configure-pelican-environment-for-blog"&gt;Configure Pelican Environment for Blog&lt;a class="headerlink" href="#configure-pelican-environment-for-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once we have the environment we have install few packages in this environment. The first is to install PiP to install other package. Install Pip by using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the completion of installing &lt;code&gt;pip&lt;/code&gt;, the first and foremost package to install is pelican, with this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we will be using Markdown to write our blogs we need the markdown package, which we can install using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some plugin and themes in pelican which might need some additional packages, we will install these 2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Fabric
pip install beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="freeze-the-requirement"&gt;Freeze the Requirement&lt;a class="headerlink" href="#freeze-the-requirement" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we have all our installation complete, we should save our package history into a &lt;code&gt;requirement.txt&lt;/code&gt;. We can use this &lt;code&gt;requirement.txt&lt;/code&gt; to install all the above mentioned packages with same version in one go.&lt;/p&gt;
&lt;p&gt;We can freeze the details by using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dependencies"&gt;Dependencies&lt;a class="headerlink" href="#dependencies" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we check the &lt;code&gt;requirement.txt&lt;/code&gt; generated in the above step, we will see a lot of packages already installed apart from &lt;code&gt;pelican&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;, &lt;code&gt;Fabric&lt;/code&gt; and &lt;code&gt;beautifulsoup4&lt;/code&gt;. These extra packages are dependencies for running pelican.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feedgenerator:&lt;/strong&gt; to generate the Atom feeds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jinja2:&lt;/strong&gt; for templating support&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pygments:&lt;/strong&gt; for syntax highlighting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docutils:&lt;/strong&gt; for supporting reStructuredText as an input format&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pytz:&lt;/strong&gt; for timezone definitions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blinker:&lt;/strong&gt; an object-to-object and broadcast signaling system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unidecode:&lt;/strong&gt; for ASCII transliterations of Unicode text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;six:&lt;/strong&gt; for Python 2 and 3 compatibility utilities&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MarkupSafe:&lt;/strong&gt; for a markup safe string implementation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-dateutil:&lt;/strong&gt; to read the date metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have completed 2 important steps of our own blog publishing.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/stable/install.html"&gt;Installing Pelican &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conda.io/docs/py2or3.html"&gt;Managing Python &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Cost effective blogging with Pelican and Github</title><link href="http://archerimagine.com/articles/cost-effective-blogging-with-Pelican-and-Github.html" rel="alternate"></link><published>2017-04-25T23:20:03+05:30</published><updated>2017-04-26T23:56:43+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-25:/articles/cost-effective-blogging-with-Pelican-and-Github.html</id><summary type="html">&lt;p&gt;This is a series of blog post to help set up a static blog at minimal cost and integrating with Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This is a series of blog post to help set up a static blog at minimal cost and integrating with all the popular tools such as Google Analytics, MailChimp, Disqus, Google Adsense. This will be the one stop place to find all the details for setting up a beginner level blog.&lt;/p&gt;
&lt;p&gt;I am a novice blogger and this blog would act as a journal, which will document my approach towards bloging, software development. The idea is to generate some revenue out of this blog in the long run. We all might have read about so many blogs which are able to generate good amount of traffic but in none one of those we have never read how do they achieve it.&lt;/p&gt;
&lt;p&gt;I may fail in my attempt, which might work as a guidance for someone to not follow this path and try another path for the same goal. The background theme to support this is to minimize my cost to the bare minimum so that the failure does not hurt me financially.&lt;/p&gt;
&lt;h2 id="why-static-blog"&gt;Why Static Blog?&lt;a class="headerlink" href="#why-static-blog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are already a lot of literature present behind this, just wanted to summarize those:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cost:-&lt;/strong&gt; This was the deciding factor for me, because of using a static website, this complete website can be hosted and deployed by just registering a domain name with a provider. I do not have to go for any hosting services etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy of Writing Content:-&lt;/strong&gt; I wanted to write my content using just &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, as i have grown comfortable writing in markdown. With using a static blog this was possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hosting:-&lt;/strong&gt; We can serve these static html pages practically from any place, be it &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;, &lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;, &lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt; or any other place which can serve static html pages. I have chosen Github just to save the cost.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy workFlow:-&lt;/strong&gt; The work flow is very simple when deploying with static blogs, just right you content in markdown, generate html, push your changes to github and that's it. Your content is not available online. If you want to even go crazy you cam automate the whole thing other than writing content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above three are the main reason for choosing static blogs, but there could be many more valid reason for choosing static blogs. Most of the reason for me was personal in nature so you can also choose accordingly.&lt;/p&gt;
&lt;h2 id="why-pelican"&gt;Why Pelican?&lt;a class="headerlink" href="#why-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the approach to make this blog as static was finalized, the next big question came was which technology to choose, &lt;a href="https://blog.getpelican.com/"&gt;Pelican &lt;/a&gt; or &lt;a href="https://jekyllrb.com/"&gt;Jerkll &lt;/a&gt;. There as already many comparison already available among these, but the only reason for me to choose pelican was because it uses python and jinja. In some near future I want to fully customize my blog with the knowledge of these two.&lt;/p&gt;
&lt;h2 id="why-github"&gt;Why Github?&lt;a class="headerlink" href="#why-github" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final decision to be taken before starting this blog was to finalize the hosting provider. We have already mentioned some of the popular choice are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose Github, for its near zero cost, it may cost you if you want to keep your repository private else it is completely free were as Amazon S3 would have required to shell out some money though less, with some extra benefits, but for the time being when I am just measuring the water it made sense to keep my cost down.&lt;/p&gt;
&lt;p&gt;Once all the above 3 moral questions were answered, setting up the blogs was easy and which will be documented in future.&lt;/p&gt;
&lt;h2 id="collated-blog-post"&gt;Collated Blog post.&lt;a class="headerlink" href="#collated-blog-post" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://archerimagine.com/articles/python-setup-for-pelican-blog.html"&gt;How to setup Anaconda Python environment for Pelican Blog.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;Making a Static Blog with Pelican &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This above blog explains why a static blog generator is good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arunrocks.com/moving-blogs-to-pelican/"&gt;Moving Blogs to Pelican &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This blog has a terrific explanation for pelican vs jekyll.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discuss.gohugo.io/t/hosting-amazon-s3-vs-github-gh-pages-vs/340"&gt;Amazon S3 Vs Github Pages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This explains the benefits of Amazon S3 over Github Pages, kindly check if you are affected because of this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Configuring Github pages with Custom Domain</title><link href="http://archerimagine.com/articles/LaunchingSite.html" rel="alternate"></link><published>2017-04-14T21:30:00+05:30</published><updated>2017-04-29T22:07:21+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:archerimagine.com,2017-04-14:/articles/LaunchingSite.html</id><summary type="html">&lt;p&gt;How to configure a Pelican blog using Github Pages and a Custom domain.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;I have mentioned some of the links in references, have visited all of the below and few more, but the configuration is much simpler.&lt;/p&gt;
&lt;p&gt;The process can be broken into 2 broad steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure your Github repo  &lt;/li&gt;
&lt;li&gt;Configure the DNS at &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="configure-your-github-repo"&gt;Configure your Github repo&lt;a class="headerlink" href="#configure-your-github-repo" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The prequsite is that we have a github pages of like this &lt;a href="http://archeranimesh.github.io"&gt;archeranimesh.github.io&lt;/a&gt;, if not kindly visit this &lt;a href="https://pages.github.com/"&gt;link&lt;/a&gt; for generating one.&lt;/p&gt;
&lt;p&gt;The first thing we would like to do is to configure a CNAME in the above repo.&lt;/p&gt;
&lt;p&gt;There are two ways to do this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Local Repo&lt;/li&gt;
&lt;li&gt;Directly on Github.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="local-repo"&gt;Local Repo&lt;a class="headerlink" href="#local-repo" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a local file in the repo with the name CNAME.&lt;/li&gt;
&lt;li&gt;Just have one line in the file. &lt;code&gt;example.com&lt;/code&gt;, where &lt;code&gt;example.com&lt;/code&gt; is your domain you have bought from &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Push the changes to &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="directly-on-github"&gt;Directly on GitHub&lt;a class="headerlink" href="#directly-on-github" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On the repository in &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;, you will see something like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Settings" src="../images/launchSite/Settings.png" title="GitHub Setting"/&gt;&lt;/p&gt;
&lt;p&gt;In the above Click on the &lt;code&gt;Settings&lt;/code&gt;, Scroll down you will see something like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Pages Settings" src="../images/launchSite/gitHubPages.png" title="GitHub Pages Setting"/&gt;&lt;/p&gt;
&lt;p&gt;Enter the domain you have purchased from &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are the only changes required to be done in GitHub.&lt;/p&gt;
&lt;h2 id="configure-the-dns-at-godaddy"&gt;Configure the DNS at &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;&lt;a class="headerlink" href="#configure-the-dns-at-godaddy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most easiest of the all the below references is &lt;a href="http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html"&gt;Configuring a Godaddy domain name with github pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The real issue is all of the links shows the old UI of &lt;a href="https://in.godaddy.com/"&gt;GoDaddy&lt;/a&gt;, so some things get confusing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the account setting page, which mostly will like in this &lt;a href="https://mya.godaddy.com/?pc=urlargs"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The link will look like this.&lt;/li&gt;
&lt;li&gt;&lt;img alt="Godaddy Accounts Settings" src="../images/launchSite/accountSettingsGodaddy.png" title="Godaddy Accounts Settings"/&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; Symbols in Front of Domain, and Click on the &lt;code&gt;Manage DNS&lt;/code&gt; Link&lt;/li&gt;
&lt;li&gt;&lt;img alt="Godaddy DNS Management" src="../images/launchSite/manageDNS.png" title="Godaddy DNS Management"/&gt;&lt;/li&gt;
&lt;li&gt;The link will show a lot of &lt;code&gt;Records&lt;/code&gt;, go to the end of the &lt;code&gt;Records&lt;/code&gt;, and click on the link &lt;strong&gt;ADD&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;img alt="Godaddy Add Options" src="../images/launchSite/AddOption.png" title="Godaddy Add Options"/&gt;&lt;/li&gt;
&lt;li&gt;From the above option we have to add 3 entries.&lt;/li&gt;
&lt;li&gt;These is how all the 3 would look like after adding.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Godaddy A Options" src="../images/launchSite/AOptions.png" title="Godaddy A Options"&gt;
&lt;img alt="Godaddy www Options" src="../images/launchSite/wwwOption.png" title="Godaddy www Options"/&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;Now you can launch and check your desired domain. Kindly wait 48 hrs for these changes to reflect, do not try to configure multiple times, if it does not work even after 48 hours kindly search for help, till then take a coffee break and have a nice time out of this screen.&lt;/p&gt;
&lt;h2 id="the-domain-xyx-is-no-longer-parked-by-godaddy"&gt;The domain XYX is no longer parked by godaddy&lt;a class="headerlink" href="#the-domain-xyx-is-no-longer-parked-by-godaddy" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we are doing the above process, even after 24 hours, when you launch your website, we find one of these error.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The domain XYX is no longer parked by godaddy&lt;/li&gt;
&lt;li&gt;It is detected as a Malware in the office network.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The website might launch for some times and sometimes you might get any one of the above 2 errors. kindly check this in the &lt;strong&gt;Manage DNS&lt;/strong&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We had added two &lt;strong&gt;A&lt;/strong&gt; Names pointing to the GitHub URL as shown below.
&lt;img alt="Godaddy A Options" src="../images/launchSite/AOptions.png" title="Godaddy A Options"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check if you have any other &lt;strong&gt;A&lt;/strong&gt; Names in addition to the above two, if you have, kindly delete that. The detailed issue can be read &lt;a href="https://serverfault.com/questions/743327/godaddy-domain-randomly-not-resolving-to-github-pages"&gt;GoDaddy domain (randomly) not resolving to GitHub Pages&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;a class="headerlink" href="#references" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.mycowsworld.com/blog/2015/07/12/setting-up-a-godaddy-domain-name-with-github/"&gt;Setting Up a GoDaddy Domain Name With GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html"&gt;Configuring a Godaddy domain name with github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;Using a custom domain with GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.teamtreehouse.com/using-github-pages-to-host-your-website"&gt;Using GitHub Pages To Host Your Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/743327/godaddy-domain-randomly-not-resolving-to-github-pages"&gt;GoDaddy domain (randomly) not resolving to GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/webdev/comments/653q6z/help_how_to_correctly_connect_my_github_pages/"&gt;[Help]: How to correctly connect my github pages blog to a custom domain?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ongspxm.github.io/blog/2016/08/github-custom-domain-godaddy/"&gt;Redirecting GitHub Page to a custom domain&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;Kindly read the above site, to understand what is the use of CNAME and A Record. Great introduction. &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="pelican"></category></entry></feed>