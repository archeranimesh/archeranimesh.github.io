<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Archer Imagine - C Programming</title><link href="https://www.archerimagine.com/" rel="alternate"></link><link href="https://www.archerimagine.com/feeds/c-programming.atom.xml" rel="self"></link><id>https://www.archerimagine.com/</id><updated>2018-06-24T17:15:17+05:30</updated><subtitle>Anyone can do my job, but no one can be me. Harvey</subtitle><entry><title>Study Notes for Programming in C</title><link href="https://www.archerimagine.com/articles/c-programming/StudyNotes-Programming-in-C.html" rel="alternate"></link><published>2018-06-23T18:50:35+05:30</published><updated>2018-06-24T17:15:17+05:30</updated><author><name>Animesh Bhadra</name></author><id>tag:www.archerimagine.com,2018-06-23:/articles/c-programming/StudyNotes-Programming-in-C.html</id><summary type="html">&lt;p&gt;Study Notes for learning C programming from the legendary book &lt;em&gt;The C Programming Language&lt;/em&gt; by "Brain W. Kenighan and Dennis M. Ritchie". This books is considered to be the bible for C Programming. This blog is my understanding's from the books and study notes, in case a reference is required in future.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Hello World Programming " src="https://www.archerimagine.com/images/CProgramming/helloWorld.png" title="Hello World Image"/&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C is not only a "System programming language" but has a wide variety of use in other domain.&lt;/p&gt;
&lt;h3 id="fundamental-data-types"&gt;Fundamental Data Types&lt;a class="headerlink" href="#fundamental-data-types" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Characters &lt;code&gt;char&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integers &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Floating point &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="derived-data-types"&gt;Derived Data Types&lt;a class="headerlink" href="#derived-data-types" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pointers&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pointers&lt;/strong&gt; provide for a machine-independent address arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Structure&lt;/li&gt;
&lt;li&gt;Unions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="expressions"&gt;Expressions&lt;a class="headerlink" href="#expressions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt; are formed from &lt;strong&gt;Operator&lt;/strong&gt; and &lt;strong&gt;Operands&lt;/strong&gt;. Any expression including an assignment or a function call can be a &lt;strong&gt;statement&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="functions"&gt;Functions&lt;a class="headerlink" href="#functions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt; performs a single set of operation within a block of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt; may return values of &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fundamental data types.&lt;/li&gt;
&lt;li&gt;Derived Data types. except arrays&lt;ul&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Structure&lt;/li&gt;
&lt;li&gt;Unions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="variables"&gt;Variables&lt;a class="headerlink" href="#variables" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Variables can be internal to a function.&lt;/li&gt;
&lt;li&gt;External but known only within a single source file.&lt;/li&gt;
&lt;li&gt;Visible to the entire program.&lt;ul&gt;
&lt;li&gt;This is frowned upon and we should rarely use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="preprocessing"&gt;Preprocessing&lt;a class="headerlink" href="#preprocessing" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Preprocessing step performs macro substitution on program text, inclusion of other source file or conditional compilation.&lt;/p&gt;
&lt;h3 id="usecase-not-provided-in-c"&gt;UseCase not provided in C&lt;a class="headerlink" href="#usecase-not-provided-in-c" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Operations directly dealing with Composite Objects, like&lt;ul&gt;
&lt;li&gt;Array,&lt;/li&gt;
&lt;li&gt;Structure, &lt;/li&gt;
&lt;li&gt;Unions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No Storage other than &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;auto&lt;/code&gt;matic.&lt;/li&gt;
&lt;li&gt;No Input/Output facilities.&lt;/li&gt;
&lt;li&gt;No built in file Access.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above facilities are included by help of standard library defined by the &lt;strong&gt;ANSI C Standard&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="ansi-c-standard"&gt;ANSI C Standard&lt;a class="headerlink" href="#ansi-c-standard" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New syntax for declaring and defining functions.&lt;/li&gt;
&lt;li&gt;Definition of a standard library.&lt;/li&gt;
&lt;li&gt;C is not a strongly typed language.&lt;/li&gt;
&lt;li&gt;C frowns on but permits the interchange of pointer and integers which has been eliminated by ANSI.&lt;/li&gt;
&lt;li&gt;No Automatic conversion of incompatible data types.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://excelwithbusiness.com/blog/say-hello-world-in-28-different-programming-languages/"&gt;Image Source &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C Programming"></category><category term="C-Programming"></category><category term="Kernighan&amp;Ritchie"></category><category term="KnR"></category><category term="The C Programming Language."></category></entry></feed>